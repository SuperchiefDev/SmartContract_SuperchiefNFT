{
  "address": "0x592fA4a81A8D06E52D377c1C2a248A5717d48d62",
  "abi": [
    {
      "inputs": [],
      "name": "InvalidProof",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "leaf",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "_computeRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "leaf",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "root",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "_verifyProof",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xb6777f64d405df3372a18d3c57c7144535d457babe38ba6f530247502cdf4754",
  "receipt": {
    "to": null,
    "from": "0xf5CA36c9873d61Bc28C117BD470981Ef6647A685",
    "contractAddress": "0x592fA4a81A8D06E52D377c1C2a248A5717d48d62",
    "transactionIndex": 2,
    "gasUsed": "207059",
    "logsBloom": "0x
    "blockHash": "0x8dcfe6612d36e45b3d435c221e2e116659c51d26d1da916c671ca83b1b346f78",
    "transactionHash": "0xb6777f64d405df3372a18d3c57c7144535d457babe38ba6f530247502cdf4754",
    "logs": [],
    "blockNumber": 25047008,
    "cumulativeGasUsed": "517178",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "fa97f7343770aacf15ca0c42476b72fe",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"_computeRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"_verifyProof\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Utility functions for Merkle tree computations\",\"kind\":\"dev\",\"methods\":{\"_computeRoot(bytes32,bytes32[])\":{\"details\":\"Compute the merkle root\",\"params\":{\"leaf\":\"leaf\",\"proof\":\"proof\"}},\"_verifyProof(bytes32,bytes32,bytes32[])\":{\"details\":\"Verify the merkle proof\",\"params\":{\"leaf\":\"leaf\",\"proof\":\"proof\",\"root\":\"root\"}}},\"title\":\"MerkleVerifier\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/MerkleVerifier.sol\":\"MerkleVerifier\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"contracts/libraries/MerkleVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title MerkleVerifier\\n * @dev Utility functions for Merkle tree computations\\n */\\nlibrary MerkleVerifier {\\n  error InvalidProof();\\n\\n  /**\\n   * @dev Verify the merkle proof\\n   * @param leaf leaf\\n   * @param root root\\n   * @param proof proof\\n   */\\n  function _verifyProof(bytes32 leaf, bytes32 root, bytes32[] memory proof) public pure {\\n    bytes32 computedRoot = _computeRoot(leaf, proof);\\n    if (computedRoot != root) {\\n      revert InvalidProof();\\n    }\\n  }\\n\\n  /**\\n   * @dev Compute the merkle root\\n   * @param leaf leaf\\n   * @param proof proof\\n   */\\n  function _computeRoot(bytes32 leaf, bytes32[] memory proof) public pure returns (bytes32) {\\n    bytes32 computedHash = leaf;\\n    for (uint256 i = 0; i < proof.length; i++) {\\n      bytes32 proofElement = proof[i];\\n      computedHash = _hashPair(computedHash, proofElement);\\n    }\\n    return computedHash;\\n  }\\n\\n  function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n    return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n  }\\n\\n  function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n    assembly {\\n      mstore(0x00, a)\\n      mstore(0x20, b)\\n      value := keccak256(0x00, 0x40)\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x031ffb83eefe3e6f41dbcbc6871e811aa34b07bdafd532ea9120ebab3969b580\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6102c861003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c806372aaadac146100455780639c7bf9381461005a575b600080fd5b6100586100533660046101e9565b61007f565b005b61006d610068366004610238565b6100b3565b60405190815260200160405180910390f35b600061008b84836100b3565b90508281146100ad576040516309bde33960e01b815260040160405180910390fd5b50505050565b600082815b83518110156100ff5760008482815181106100d5576100d561027e565b602002602001015190506100e98382610107565b92505080806100f790610294565b9150506100b8565b509392505050565b6000818310610123576000828152602084905260409020610132565b60008381526020839052604090205b9392505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261016057600080fd5b813560206001600160401b038083111561017c5761017c610139565b8260051b604051601f19603f830116810181811084821117156101a1576101a1610139565b6040529384528581018301938381019250878511156101bf57600080fd5b83870191505b848210156101de578135835291830191908301906101c5565b979650505050505050565b6000806000606084860312156101fe57600080fd5b833592506020840135915060408401356001600160401b0381111561022257600080fd5b61022e8682870161014f565b9150509250925092565b6000806040838503121561024b57600080fd5b8235915060208301356001600160401b0381111561026857600080fd5b6102748582860161014f565b9150509250929050565b634e487b7160e01b600052603260045260246000fd5b6000600182016102b457634e487b7160e01b600052601160045260246000fd5b506001019056fea164736f6c6343000813000a",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c806372aaadac146100455780639c7bf9381461005a575b600080fd5b6100586100533660046101e9565b61007f565b005b61006d610068366004610238565b6100b3565b60405190815260200160405180910390f35b600061008b84836100b3565b90508281146100ad576040516309bde33960e01b815260040160405180910390fd5b50505050565b600082815b83518110156100ff5760008482815181106100d5576100d561027e565b602002602001015190506100e98382610107565b92505080806100f790610294565b9150506100b8565b509392505050565b6000818310610123576000828152602084905260409020610132565b60008381526020839052604090205b9392505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261016057600080fd5b813560206001600160401b038083111561017c5761017c610139565b8260051b604051601f19603f830116810181811084821117156101a1576101a1610139565b6040529384528581018301938381019250878511156101bf57600080fd5b83870191505b848210156101de578135835291830191908301906101c5565b979650505050505050565b6000806000606084860312156101fe57600080fd5b833592506020840135915060408401356001600160401b0381111561022257600080fd5b61022e8682870161014f565b9150509250925092565b6000806040838503121561024b57600080fd5b8235915060208301356001600160401b0381111561026857600080fd5b6102748582860161014f565b9150509250929050565b634e487b7160e01b600052603260045260246000fd5b6000600182016102b457634e487b7160e01b600052601160045260246000fd5b506001019056fea164736f6c6343000813000a",
  "devdoc": {
    "details": "Utility functions for Merkle tree computations",
    "kind": "dev",
    "methods": {
      "_computeRoot(bytes32,bytes32[])": {
        "details": "Compute the merkle root",
        "params": {
          "leaf": "leaf",
          "proof": "proof"
        }
      },
      "_verifyProof(bytes32,bytes32,bytes32[])": {
        "details": "Verify the merkle proof",
        "params": {
          "leaf": "leaf",
          "proof": "proof",
          "root": "root"
        }
      }
    },
    "title": "MerkleVerifier",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}