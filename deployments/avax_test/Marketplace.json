{
  "address": "0x0AF11E8B2F0af822843bc67267C0997fC637Ef6d",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Closed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blockRange",
          "type": "uint256"
        }
      ],
      "name": "NewBlockRange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IExecutionDelegate",
          "name": "executionDelegate",
          "type": "address"
        }
      ],
      "name": "NewExecutionDelegate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "NewOracle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IPolicyManager",
          "name": "policyManager",
          "type": "address"
        }
      ],
      "name": "NewPolicyManager",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newNonce",
          "type": "uint256"
        }
      ],
      "name": "NonceIncremented",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Opened",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "name": "OrderCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "taker",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "enum Side",
              "name": "side",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "matchingPolicy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "paymentToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "listingTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expirationTime",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint16",
                  "name": "rate",
                  "type": "uint16"
                },
                {
                  "internalType": "address payable",
                  "name": "recipient",
                  "type": "address"
                }
              ],
              "internalType": "struct Fee[]",
              "name": "fees",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "extraParams",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct Order",
          "name": "sell",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "sellHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "enum Side",
              "name": "side",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "matchingPolicy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "paymentToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "listingTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expirationTime",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint16",
                  "name": "rate",
                  "type": "uint16"
                },
                {
                  "internalType": "address payable",
                  "name": "recipient",
                  "type": "address"
                }
              ],
              "internalType": "struct Fee[]",
              "name": "fees",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "extraParams",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct Order",
          "name": "buy",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "buyHash",
          "type": "bytes32"
        }
      ],
      "name": "OrdersMatched",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FEE_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INVERSE_BASIS_POINT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ORACLE_ORDER_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ORDER_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROOT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "blockRange",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "enum Side",
              "name": "side",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "matchingPolicy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "paymentToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "listingTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expirationTime",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint16",
                  "name": "rate",
                  "type": "uint16"
                },
                {
                  "internalType": "address payable",
                  "name": "recipient",
                  "type": "address"
                }
              ],
              "internalType": "struct Fee[]",
              "name": "fees",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "extraParams",
              "type": "bytes"
            }
          ],
          "internalType": "struct Order",
          "name": "order",
          "type": "tuple"
        }
      ],
      "name": "cancelOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "enum Side",
              "name": "side",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "matchingPolicy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "paymentToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "listingTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expirationTime",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint16",
                  "name": "rate",
                  "type": "uint16"
                },
                {
                  "internalType": "address payable",
                  "name": "recipient",
                  "type": "address"
                }
              ],
              "internalType": "struct Fee[]",
              "name": "fees",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "extraParams",
              "type": "bytes"
            }
          ],
          "internalType": "struct Order[]",
          "name": "orders",
          "type": "tuple[]"
        }
      ],
      "name": "cancelOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "cancelledOrFilled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "close",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "trader",
                  "type": "address"
                },
                {
                  "internalType": "enum Side",
                  "name": "side",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "matchingPolicy",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "collection",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "paymentToken",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "listingTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "expirationTime",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "uint16",
                      "name": "rate",
                      "type": "uint16"
                    },
                    {
                      "internalType": "address payable",
                      "name": "recipient",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct Fee[]",
                  "name": "fees",
                  "type": "tuple[]"
                },
                {
                  "internalType": "uint256",
                  "name": "salt",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "extraParams",
                  "type": "bytes"
                }
              ],
              "internalType": "struct Order",
              "name": "order",
              "type": "tuple"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "extraSignature",
              "type": "bytes"
            },
            {
              "internalType": "enum SignatureVersion",
              "name": "signatureVersion",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "blockNumber",
              "type": "uint256"
            }
          ],
          "internalType": "struct Input",
          "name": "sell",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "trader",
                  "type": "address"
                },
                {
                  "internalType": "enum Side",
                  "name": "side",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "matchingPolicy",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "collection",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "paymentToken",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "listingTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "expirationTime",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "uint16",
                      "name": "rate",
                      "type": "uint16"
                    },
                    {
                      "internalType": "address payable",
                      "name": "recipient",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct Fee[]",
                  "name": "fees",
                  "type": "tuple[]"
                },
                {
                  "internalType": "uint256",
                  "name": "salt",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "extraParams",
                  "type": "bytes"
                }
              ],
              "internalType": "struct Order",
              "name": "order",
              "type": "tuple"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "extraSignature",
              "type": "bytes"
            },
            {
              "internalType": "enum SignatureVersion",
              "name": "signatureVersion",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "blockNumber",
              "type": "uint256"
            }
          ],
          "internalType": "struct Input",
          "name": "buy",
          "type": "tuple"
        }
      ],
      "name": "execute",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "executionDelegate",
      "outputs": [
        {
          "internalType": "contract IExecutionDelegate",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "incrementNonce",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "contract IExecutionDelegate",
          "name": "_executionDelegate",
          "type": "address"
        },
        {
          "internalType": "contract IPolicyManager",
          "name": "_policyManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_blockRange",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOpen",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "open",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "policyManager",
      "outputs": [
        {
          "internalType": "contract IPolicyManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_blockRange",
          "type": "uint256"
        }
      ],
      "name": "setBlockRange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IExecutionDelegate",
          "name": "_executionDelegate",
          "type": "address"
        }
      ],
      "name": "setExecutionDelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        }
      ],
      "name": "setOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPolicyManager",
          "name": "_policyManager",
          "type": "address"
        }
      ],
      "name": "setPolicyManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xacef2043b33f612f4b317b50f2add35d2c310aa081c76c7e5d9f624ca549d493",
  "receipt": {
    "to": null,
    "from": "0xf5CA36c9873d61Bc28C117BD470981Ef6647A685",
    "contractAddress": "0x0AF11E8B2F0af822843bc67267C0997fC637Ef6d",
    "transactionIndex": 0,
    "gasUsed": "3039988",
    "logsBloom": "0x
    "blockHash": "0xa501fb5253caca30b85c39cccb0a09919de6d945dcd46b7284723b0fff15f1d2",
    "transactionHash": "0xacef2043b33f612f4b317b50f2add35d2c310aa081c76c7e5d9f624ca549d493",
    "logs": [],
    "blockNumber": 24930334,
    "cumulativeGasUsed": "3039988",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "69631710e4d570fdd1575ca96ae093de",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Closed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockRange\",\"type\":\"uint256\"}],\"name\":\"NewBlockRange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IExecutionDelegate\",\"name\":\"executionDelegate\",\"type\":\"address\"}],\"name\":\"NewExecutionDelegate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"NewOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IPolicyManager\",\"name\":\"policyManager\",\"type\":\"address\"}],\"name\":\"NewPolicyManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newNonce\",\"type\":\"uint256\"}],\"name\":\"NonceIncremented\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Opened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"OrderCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"enum Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"matchingPolicy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"listingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"rate\",\"type\":\"uint16\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct Fee[]\",\"name\":\"fees\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraParams\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct Order\",\"name\":\"sell\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sellHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"enum Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"matchingPolicy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"listingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"rate\",\"type\":\"uint16\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct Fee[]\",\"name\":\"fees\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraParams\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct Order\",\"name\":\"buy\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"buyHash\",\"type\":\"bytes32\"}],\"name\":\"OrdersMatched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INVERSE_BASIS_POINT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORACLE_ORDER_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORDER_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROOT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockRange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"enum Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"matchingPolicy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"listingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"rate\",\"type\":\"uint16\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct Fee[]\",\"name\":\"fees\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraParams\",\"type\":\"bytes\"}],\"internalType\":\"struct Order\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"enum Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"matchingPolicy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"listingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"rate\",\"type\":\"uint16\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct Fee[]\",\"name\":\"fees\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraParams\",\"type\":\"bytes\"}],\"internalType\":\"struct Order[]\",\"name\":\"orders\",\"type\":\"tuple[]\"}],\"name\":\"cancelOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"cancelledOrFilled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"close\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"enum Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"matchingPolicy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"listingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"rate\",\"type\":\"uint16\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct Fee[]\",\"name\":\"fees\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraParams\",\"type\":\"bytes\"}],\"internalType\":\"struct Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"extraSignature\",\"type\":\"bytes\"},{\"internalType\":\"enum SignatureVersion\",\"name\":\"signatureVersion\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct Input\",\"name\":\"sell\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"enum Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"matchingPolicy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"listingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"rate\",\"type\":\"uint16\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct Fee[]\",\"name\":\"fees\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraParams\",\"type\":\"bytes\"}],\"internalType\":\"struct Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"extraSignature\",\"type\":\"bytes\"},{\"internalType\":\"enum SignatureVersion\",\"name\":\"signatureVersion\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct Input\",\"name\":\"buy\",\"type\":\"tuple\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executionDelegate\",\"outputs\":[{\"internalType\":\"contract IExecutionDelegate\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incrementNonce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"contract IExecutionDelegate\",\"name\":\"_executionDelegate\",\"type\":\"address\"},{\"internalType\":\"contract IPolicyManager\",\"name\":\"_policyManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockRange\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOpen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"open\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policyManager\",\"outputs\":[{\"internalType\":\"contract IPolicyManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockRange\",\"type\":\"uint256\"}],\"name\":\"setBlockRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IExecutionDelegate\",\"name\":\"_executionDelegate\",\"type\":\"address\"}],\"name\":\"setExecutionDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPolicyManager\",\"name\":\"_policyManager\",\"type\":\"address\"}],\"name\":\"setPolicyManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Core marketplace contract\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"cancelOrder((address,uint8,address,address,uint256,uint256,address,uint256,uint256,uint256,(uint16,address)[],uint256,bytes))\":{\"details\":\"Cancel an order, preventing it from being matched. Must be called by the trader of the order\",\"params\":{\"order\":\"Order to cancel\"}},\"cancelOrders((address,uint8,address,address,uint256,uint256,address,uint256,uint256,uint256,(uint16,address)[],uint256,bytes)[])\":{\"details\":\"Cancel multiple orders\",\"params\":{\"orders\":\"Orders to cancel\"}},\"execute(((address,uint8,address,address,uint256,uint256,address,uint256,uint256,uint256,(uint16,address)[],uint256,bytes),uint8,bytes32,bytes32,bytes,uint8,uint256),((address,uint8,address,address,uint256,uint256,address,uint256,uint256,uint256,(uint16,address)[],uint256,bytes),uint8,bytes32,bytes32,bytes,uint8,uint256))\":{\"details\":\"Match two orders, ensuring validity of the match, and execute all associated state transitions. Protected against reentrancy by a contract-global lock.\",\"params\":{\"buy\":\"Buy input\",\"sell\":\"Sell input\"}},\"incrementNonce()\":{\"details\":\"Cancel all current orders for a user, preventing them from being matched. Must be called by the trader of the order\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"title\":\"Marketplace\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Marketplace.sol\":\"Marketplace\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x584ebdf9c1118a7c773f98788e3f3ede01982bdf8932aa06f5acc7d54876e161\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb607cb94c27e89750f5ae2ccebcb94e654e926f6125f4fd4c6262c89875118ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xa2b22da3032e50b55f95ec1d13336102d675f341167aa76db571ef7f8bb7975d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"contracts/Marketplace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {ERC1967Proxy} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\\\";\\n\\nimport {ReentrancyGuard} from \\\"./libraries/ReentrancyGuard.sol\\\";\\nimport {EIP712} from \\\"./libraries/EIP712.sol\\\";\\nimport {MerkleVerifier} from \\\"./libraries/MerkleVerifier.sol\\\";\\nimport {IMarketplace} from \\\"./interfaces/IMarketplace.sol\\\";\\nimport {IExecutionDelegate} from \\\"./interfaces/IExecutionDelegate.sol\\\";\\nimport {IPolicyManager} from \\\"./interfaces/IPolicyManager.sol\\\";\\nimport {IMatchingPolicy} from \\\"./interfaces/IMatchingPolicy.sol\\\";\\nimport {Side, SignatureVersion, AssetType, Fee, Order, Input} from \\\"./libraries/Structs.sol\\\";\\n\\n/**\\n * @title Marketplace\\n * @dev Core marketplace contract\\n */\\ncontract Marketplace is IMarketplace, ReentrancyGuard, EIP712, OwnableUpgradeable, UUPSUpgradeable {\\n  /* Auth */\\n  uint256 public isOpen;\\n\\n  modifier whenOpen() {\\n    require(isOpen == 1, \\\"Closed\\\");\\n    _;\\n  }\\n\\n  event Opened();\\n  event Closed();\\n\\n  function open() external onlyOwner {\\n    isOpen = 1;\\n    emit Opened();\\n  }\\n\\n  function close() external onlyOwner {\\n    isOpen = 0;\\n    emit Closed();\\n  }\\n\\n  // required by the OZ UUPS module\\n  function _authorizeUpgrade(address) internal override onlyOwner {}\\n\\n  /* Constants */\\n  string public constant name = \\\"SuperChief Marketplace\\\";\\n  string public constant version = \\\"1.0\\\";\\n  uint256 public constant INVERSE_BASIS_POINT = 10000;\\n\\n  /* Variables */\\n  address public weth;\\n  IExecutionDelegate public executionDelegate;\\n  IPolicyManager public policyManager;\\n  address public oracle;\\n  uint256 public blockRange;\\n\\n  /* Storage */\\n  mapping(bytes32 => bool) public cancelledOrFilled;\\n  mapping(address => uint256) public nonces;\\n\\n  /* Events */\\n  event OrdersMatched(\\n    address indexed maker,\\n    address indexed taker,\\n    Order sell,\\n    bytes32 sellHash,\\n    Order buy,\\n    bytes32 buyHash\\n  );\\n\\n  event OrderCancelled(bytes32 hash);\\n  event NonceIncremented(address trader, uint256 newNonce);\\n\\n  event NewExecutionDelegate(IExecutionDelegate executionDelegate);\\n  event NewPolicyManager(IPolicyManager policyManager);\\n  event NewOracle(address oracle);\\n  event NewBlockRange(uint256 blockRange);\\n\\n  constructor() {}\\n\\n  /* Constructor (for ERC1967) */\\n  function initialize(\\n    uint chainId,\\n    address _weth,\\n    IExecutionDelegate _executionDelegate,\\n    IPolicyManager _policyManager,\\n    address _oracle,\\n    uint _blockRange\\n  ) public initializer {\\n    __Ownable_init();\\n    isOpen = 1;\\n\\n    DOMAIN_SEPARATOR = _hashDomain(\\n      EIP712Domain({\\n        name: name,\\n        version: version,\\n        chainId: chainId,\\n        verifyingContract: address(this)\\n      })\\n    );\\n\\n    weth = _weth;\\n    executionDelegate = _executionDelegate;\\n    policyManager = _policyManager;\\n    oracle = _oracle;\\n    blockRange = _blockRange;\\n  }\\n\\n  /* External Functions */\\n\\n  /**\\n   * @dev Match two orders, ensuring validity of the match, and execute all associated state transitions. Protected against reentrancy by a contract-global lock.\\n   * @param sell Sell input\\n   * @param buy Buy input\\n   */\\n  function execute(Input calldata sell, Input calldata buy) external payable nonReentrant whenOpen {\\n    require(sell.order.side == Side.Sell);\\n\\n    bytes32 sellHash = _hashOrder(sell.order, nonces[sell.order.trader]);\\n    bytes32 buyHash = _hashOrder(buy.order, nonces[buy.order.trader]);\\n\\n    require(_validateOrderParameters(sell.order, sellHash), \\\"Sell has invalid parameters\\\");\\n    require(_validateOrderParameters(buy.order, buyHash), \\\"Buy has invalid parameters\\\");\\n\\n    require(_validateSignatures(sell, sellHash), \\\"Sell failed authorization\\\");\\n    require(_validateSignatures(buy, buyHash), \\\"Buy failed authorization\\\");\\n\\n    (uint256 price, uint256 tokenId, uint256 amount, AssetType assetType) = _canMatchOrders(\\n      sell.order,\\n      buy.order\\n    );\\n\\n    Fee[] memory fees = executionDelegate.calcuateFee(\\n      sell.order.collection,\\n      sell.order.tokenId,\\n      sell.order.fees\\n    );\\n\\n    _executeFundsTransfer(\\n      sell.order.trader,\\n      buy.order.trader,\\n      sell.order.paymentToken,\\n      fees,\\n      price\\n    );\\n    _executeTokenTransfer(\\n      sell.order.collection,\\n      sell.order.trader,\\n      buy.order.trader,\\n      tokenId,\\n      amount,\\n      assetType\\n    );\\n\\n    /* Mark orders as filled. */\\n    cancelledOrFilled[sellHash] = true;\\n    cancelledOrFilled[buyHash] = true;\\n\\n    emit OrdersMatched(\\n      sell.order.listingTime <= buy.order.listingTime ? sell.order.trader : buy.order.trader,\\n      sell.order.listingTime > buy.order.listingTime ? sell.order.trader : buy.order.trader,\\n      sell.order,\\n      sellHash,\\n      buy.order,\\n      buyHash\\n    );\\n  }\\n\\n  /**\\n   * @dev Cancel an order, preventing it from being matched. Must be called by the trader of the order\\n   * @param order Order to cancel\\n   */\\n  function cancelOrder(Order calldata order) public {\\n    /* Assert sender is authorized to cancel order. */\\n    require(msg.sender == order.trader);\\n\\n    bytes32 hash = _hashOrder(order, nonces[order.trader]);\\n\\n    if (!cancelledOrFilled[hash]) {\\n      /* Mark order as cancelled, preventing it from being matched. */\\n      cancelledOrFilled[hash] = true;\\n      emit OrderCancelled(hash);\\n    }\\n  }\\n\\n  /**\\n   * @dev Cancel multiple orders\\n   * @param orders Orders to cancel\\n   */\\n  function cancelOrders(Order[] calldata orders) external {\\n    for (uint8 i = 0; i < orders.length; i++) {\\n      cancelOrder(orders[i]);\\n    }\\n  }\\n\\n  /**\\n   * @dev Cancel all current orders for a user, preventing them from being matched. Must be called by the trader of the order\\n   */\\n  function incrementNonce() external {\\n    nonces[msg.sender] += 1;\\n    emit NonceIncremented(msg.sender, nonces[msg.sender]);\\n  }\\n\\n  /* Setters */\\n\\n  function setExecutionDelegate(IExecutionDelegate _executionDelegate) external onlyOwner {\\n    require(address(_executionDelegate) != address(0), \\\"Address cannot be zero\\\");\\n    executionDelegate = _executionDelegate;\\n    emit NewExecutionDelegate(executionDelegate);\\n  }\\n\\n  function setPolicyManager(IPolicyManager _policyManager) external onlyOwner {\\n    require(address(_policyManager) != address(0), \\\"Address cannot be zero\\\");\\n    policyManager = _policyManager;\\n    emit NewPolicyManager(policyManager);\\n  }\\n\\n  function setOracle(address _oracle) external onlyOwner {\\n    require(_oracle != address(0), \\\"Address cannot be zero\\\");\\n    oracle = _oracle;\\n    emit NewOracle(oracle);\\n  }\\n\\n  function setBlockRange(uint256 _blockRange) external onlyOwner {\\n    blockRange = _blockRange;\\n    emit NewBlockRange(blockRange);\\n  }\\n\\n  /* Internal Functions */\\n\\n  /**\\n   * @dev Verify the validity of the order parameters\\n   * @param order order\\n   * @param orderHash hash of order\\n   */\\n  function _validateOrderParameters(\\n    Order calldata order,\\n    bytes32 orderHash\\n  ) internal view returns (bool) {\\n    return (/* Order must have a trader. */\\n    (order.trader != address(0)) &&\\n      /* Order must not be cancelled or filled. */\\n      (cancelledOrFilled[orderHash] == false) &&\\n      /* Order must be settleable. */\\n      _canSettleOrder(order.listingTime, order.expirationTime));\\n  }\\n\\n  /**\\n   * @dev Check if the order can be settled at the current timestamp\\n   * @param listingTime order listing time\\n   * @param expirationTime order expiration time\\n   */\\n  function _canSettleOrder(\\n    uint256 listingTime,\\n    uint256 expirationTime\\n  ) internal view returns (bool) {\\n    return\\n      (listingTime < block.timestamp) && (expirationTime == 0 || block.timestamp < expirationTime);\\n  }\\n\\n  /**\\n   * @dev Verify the validity of the signatures\\n   * @param order order\\n   * @param orderHash hash of order\\n   */\\n  function _validateSignatures(\\n    Input calldata order,\\n    bytes32 orderHash\\n  ) private view returns (bool) {\\n    if (order.order.trader == msg.sender) {\\n      return true;\\n    }\\n\\n    /* Check user authorization. */\\n    if (\\n      !_validateUserAuthorization(\\n        orderHash,\\n        order.order.trader,\\n        order.v,\\n        order.r,\\n        order.s,\\n        order.signatureVersion,\\n        order.extraSignature\\n      )\\n    ) {\\n      return false;\\n    }\\n\\n    if (order.order.expirationTime == 0) {\\n      /* Check oracle authorization. */\\n      require(block.number - order.blockNumber < blockRange, \\\"Signed block number out of range\\\");\\n      if (\\n        !_validateOracleAuthorization(\\n          orderHash,\\n          order.signatureVersion,\\n          order.extraSignature,\\n          order.blockNumber\\n        )\\n      ) {\\n        return false;\\n      }\\n    }\\n\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Verify the validity of the user signature\\n   * @param orderHash hash of the order\\n   * @param trader order trader who should be the signer\\n   * @param v v\\n   * @param r r\\n   * @param s s\\n   * @param signatureVersion signature version\\n   * @param extraSignature packed merkle path\\n   */\\n  function _validateUserAuthorization(\\n    bytes32 orderHash,\\n    address trader,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s,\\n    SignatureVersion signatureVersion,\\n    bytes calldata extraSignature\\n  ) internal view returns (bool) {\\n    bytes32 hashToSign;\\n    if (signatureVersion == SignatureVersion.Single) {\\n      /* Single-listing authentication: Order signed by trader */\\n      hashToSign = _hashToSign(orderHash);\\n    } else if (signatureVersion == SignatureVersion.Bulk) {\\n      /* Bulk-listing authentication: Merkle root of orders signed by trader */\\n      bytes32[] memory merklePath = abi.decode(extraSignature, (bytes32[]));\\n\\n      bytes32 computedRoot = MerkleVerifier._computeRoot(orderHash, merklePath);\\n      hashToSign = _hashToSignRoot(computedRoot);\\n    }\\n\\n    return _recover(hashToSign, v, r, s) == trader;\\n  }\\n\\n  /**\\n   * @dev Verify the validity of oracle signature\\n   * @param orderHash hash of the order\\n   * @param signatureVersion signature version\\n   * @param extraSignature packed oracle signature\\n   * @param blockNumber block number used in oracle signature\\n   */\\n  function _validateOracleAuthorization(\\n    bytes32 orderHash,\\n    SignatureVersion signatureVersion,\\n    bytes calldata extraSignature,\\n    uint256 blockNumber\\n  ) internal view returns (bool) {\\n    bytes32 oracleHash = _hashToSignOracle(orderHash, blockNumber);\\n\\n    uint8 v;\\n    bytes32 r;\\n    bytes32 s;\\n    if (signatureVersion == SignatureVersion.Single) {\\n      (v, r, s) = abi.decode(extraSignature, (uint8, bytes32, bytes32));\\n    } else if (signatureVersion == SignatureVersion.Bulk) {\\n      /* If the signature was a bulk listing the merkle path musted be unpacked before the oracle signature. */\\n      (, uint8 _v, bytes32 _r, bytes32 _s) = abi.decode(\\n        extraSignature,\\n        (bytes32[], uint8, bytes32, bytes32)\\n      );\\n      v = _v;\\n      r = _r;\\n      s = _s;\\n    }\\n\\n    return _recover(oracleHash, v, r, s) == oracle;\\n  }\\n\\n  /**\\n   * @dev Wrapped ecrecover with safety check for v parameter\\n   * @param v v\\n   * @param r r\\n   * @param s s\\n   */\\n  function _recover(bytes32 digest, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n    require(v == 27 || v == 28, \\\"Invalid v parameter\\\");\\n    return ecrecover(digest, v, r, s);\\n  }\\n\\n  /**\\n   * @dev Call the matching policy to check orders can be matched and get execution parameters\\n   * @param sell sell order\\n   * @param buy buy order\\n   */\\n  function _canMatchOrders(\\n    Order calldata sell,\\n    Order calldata buy\\n  ) private view returns (uint256 price, uint256 tokenId, uint256 amount, AssetType assetType) {\\n    bool canMatch;\\n    if (sell.listingTime <= buy.listingTime) {\\n      /* Seller is maker. */\\n      require(policyManager.isPolicyWhitelisted(sell.matchingPolicy), \\\"Policy is not whitelisted\\\");\\n      (canMatch, price, tokenId, amount, assetType) = IMatchingPolicy(sell.matchingPolicy)\\n        .canMatchMakerAsk(sell, buy);\\n    } else {\\n      /* Buyer is maker. */\\n      require(policyManager.isPolicyWhitelisted(buy.matchingPolicy), \\\"Policy is not whitelisted\\\");\\n      (canMatch, price, tokenId, amount, assetType) = IMatchingPolicy(buy.matchingPolicy)\\n        .canMatchMakerBid(buy, sell);\\n    }\\n    require(canMatch, \\\"Orders cannot be matched\\\");\\n\\n    return (price, tokenId, amount, assetType);\\n  }\\n\\n  /**\\n   * @dev Execute all ERC20 token / ETH transfers associated with an order match (fees and buyer => seller transfer)\\n   * @param seller seller\\n   * @param buyer buyer\\n   * @param paymentToken payment token\\n   * @param fees fees\\n   * @param price price\\n   */\\n  function _executeFundsTransfer(\\n    address seller,\\n    address buyer,\\n    address paymentToken,\\n    Fee[] memory fees,\\n    uint256 price\\n  ) internal {\\n    if (paymentToken == address(0)) {\\n      require(msg.value == price);\\n    }\\n\\n    /* Take fee. */\\n    uint256 receiveAmount = _transferFees(fees, paymentToken, buyer, price);\\n\\n    /* Transfer remainder to seller. */\\n    _transferTo(paymentToken, buyer, seller, receiveAmount);\\n  }\\n\\n  /**\\n   * @dev Charge a fee in ETH or WETH\\n   * @param fees fees to distribute\\n   * @param paymentToken address of token to pay in\\n   * @param from address to charge fees\\n   * @param price price of token\\n   */\\n  function _transferFees(\\n    Fee[] memory fees,\\n    address paymentToken,\\n    address from,\\n    uint256 price\\n  ) internal returns (uint256) {\\n    uint256 totalFee = 0;\\n    for (uint8 i = 0; i < fees.length; i++) {\\n      uint256 fee = (price * fees[i].rate) / INVERSE_BASIS_POINT;\\n      _transferTo(paymentToken, from, fees[i].recipient, fee);\\n      totalFee += fee;\\n    }\\n\\n    require(totalFee <= price, \\\"Total amount of fees are more than the price\\\");\\n\\n    /* Amount that will be received by seller. */\\n    uint256 receiveAmount = price - totalFee;\\n    return (receiveAmount);\\n  }\\n\\n  /**\\n   * @dev Transfer amount in ETH or WETH\\n   * @param paymentToken address of token to pay in\\n   * @param from token sender\\n   * @param to token recipient\\n   * @param amount amount to transfer\\n   */\\n  function _transferTo(address paymentToken, address from, address to, uint256 amount) internal {\\n    if (amount == 0) {\\n      return;\\n    }\\n\\n    if (paymentToken == address(0)) {\\n      /* Transfer funds in ETH. */\\n      payable(to).transfer(amount);\\n    } else if (paymentToken == weth) {\\n      /* Transfer funds in WETH. */\\n      executionDelegate.transferERC20(weth, from, to, amount);\\n    } else {\\n      revert(\\\"Invalid payment token\\\");\\n    }\\n  }\\n\\n  /**\\n   * @dev Execute call through delegate proxy\\n   * @param collection collection contract address\\n   * @param from seller address\\n   * @param to buyer address\\n   * @param tokenId tokenId\\n   * @param assetType asset type of the token\\n   */\\n  function _executeTokenTransfer(\\n    address collection,\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    uint256 amount,\\n    AssetType assetType\\n  ) internal {\\n    /* Assert collection exists. */\\n    require(_exists(collection), \\\"Collection does not exist\\\");\\n\\n    /* Call execution delegate. */\\n    if (assetType == AssetType.ERC721) {\\n      executionDelegate.transferERC721(collection, from, to, tokenId);\\n    } else if (assetType == AssetType.ERC1155) {\\n      executionDelegate.transferERC1155(collection, from, to, tokenId, amount);\\n    }\\n  }\\n\\n  /**\\n   * @dev Determine if the given address exists\\n   * @param what address to check\\n   */\\n  function _exists(address what) internal view returns (bool) {\\n    uint size;\\n    assembly {\\n      size := extcodesize(what)\\n    }\\n    return size > 0;\\n  }\\n}\\n\",\"keccak256\":\"0xbe54fe1969912b614e0cba9112e9344d7d6175c2905337c7861acb22ab9cf5a4\",\"license\":\"MIT\"},\"contracts/interfaces/IExecutionDelegate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Fee} from \\\"../libraries/Structs.sol\\\";\\n\\ninterface IExecutionDelegate {\\n  function contracts(address to) external view returns (bool);\\n\\n  function approveContract(address _contract) external;\\n\\n  function denyContract(address _contract) external;\\n\\n  function revokeApproval() external;\\n\\n  function grantApproval() external;\\n\\n  function transferERC721Unsafe(\\n    address collection,\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) external;\\n\\n  function transferERC721(address collection, address from, address to, uint256 tokenId) external;\\n\\n  function transferERC1155(\\n    address collection,\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    uint256 amount\\n  ) external;\\n\\n  function transferERC20(\\n    address token,\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  function calcuateFee(\\n    address _collection,\\n    uint256 _tokenId,\\n    Fee[] memory _fees\\n  ) external view returns (Fee[] memory fees);\\n}\\n\",\"keccak256\":\"0xa838c2ee545545e0962429def9882a01766e65e5854d0ddb4b000c5915b64883\",\"license\":\"MIT\"},\"contracts/interfaces/IMarketplace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Input, Order} from \\\"../libraries/Structs.sol\\\";\\nimport {IExecutionDelegate} from \\\"./IExecutionDelegate.sol\\\";\\nimport {IPolicyManager} from \\\"./IPolicyManager.sol\\\";\\n\\ninterface IMarketplace {\\n  function nonces(address) external view returns (uint256);\\n\\n  function close() external;\\n\\n  function initialize(\\n    uint chainId,\\n    address _weth,\\n    IExecutionDelegate _executionDelegate,\\n    IPolicyManager _policyManager,\\n    address _oracle,\\n    uint _blockRange\\n  ) external;\\n\\n  function setExecutionDelegate(IExecutionDelegate _executionDelegate) external;\\n\\n  function setPolicyManager(IPolicyManager _policyManager) external;\\n\\n  function setOracle(address _oracle) external;\\n\\n  function setBlockRange(uint256 _blockRange) external;\\n\\n  function cancelOrder(Order calldata order) external;\\n\\n  function cancelOrders(Order[] calldata orders) external;\\n\\n  function incrementNonce() external;\\n\\n  function execute(Input calldata sell, Input calldata buy) external payable;\\n}\\n\",\"keccak256\":\"0xf8bfa05088e018a249a23213a499807c8eb2d7e9004d9bf5b66ea9aaa65e9b14\",\"license\":\"MIT\"},\"contracts/interfaces/IMatchingPolicy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Order, AssetType} from \\\"../libraries/Structs.sol\\\";\\n\\ninterface IMatchingPolicy {\\n  function canMatchMakerAsk(\\n    Order calldata makerAsk,\\n    Order calldata takerBid\\n  ) external view returns (bool, uint256, uint256, uint256, AssetType);\\n\\n  function canMatchMakerBid(\\n    Order calldata makerBid,\\n    Order calldata takerAsk\\n  ) external view returns (bool, uint256, uint256, uint256, AssetType);\\n}\\n\",\"keccak256\":\"0x02ae03e89eacabf34ba2652007703f508877f12141fb0e568fb8e528f4371923\",\"license\":\"MIT\"},\"contracts/interfaces/IPolicyManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IPolicyManager {\\n  function addPolicy(address policy) external;\\n\\n  function removePolicy(address policy) external;\\n\\n  function isPolicyWhitelisted(address policy) external view returns (bool);\\n\\n  function viewWhitelistedPolicies(\\n    uint256 cursor,\\n    uint256 size\\n  ) external view returns (address[] memory, uint256);\\n\\n  function viewCountWhitelistedPolicies() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2b6ad4c4b18d93f5c6fe6aae1d0f25ce5a6ca9813b89336d583536cda992b9e7\",\"license\":\"MIT\"},\"contracts/libraries/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Order, Fee} from \\\"./Structs.sol\\\";\\n\\n/**\\n * @title EIP712\\n * @dev Contains all of the order hashing functions for EIP712 compliant signatures\\n */\\ncontract EIP712 {\\n  struct EIP712Domain {\\n    string name;\\n    string version;\\n    uint256 chainId;\\n    address verifyingContract;\\n  }\\n\\n  /* Order typehash for EIP 712 compatibility. */\\n  bytes32 public constant FEE_TYPEHASH = keccak256(\\\"Fee(uint16 rate,address recipient)\\\");\\n  bytes32 public constant ORDER_TYPEHASH =\\n    keccak256(\\n      \\\"Order(address trader,uint8 side,address matchingPolicy,address collection,uint256 tokenId,uint256 amount,address paymentToken,uint256 price,uint256 listingTime,uint256 expirationTime,Fee[] fees,uint256 salt,bytes extraParams,uint256 nonce)Fee(uint16 rate,address recipient)\\\"\\n    );\\n  bytes32 public constant ORACLE_ORDER_TYPEHASH =\\n    keccak256(\\n      \\\"OracleOrder(Order order,uint256 blockNumber)Fee(uint16 rate,address recipient)Order(address trader,uint8 side,address matchingPolicy,address collection,uint256 tokenId,uint256 amount,address paymentToken,uint256 price,uint256 listingTime,uint256 expirationTime,Fee[] fees,uint256 salt,bytes extraParams,uint256 nonce)\\\"\\n    );\\n  bytes32 public constant ROOT_TYPEHASH = keccak256(\\\"Root(bytes32 root)\\\");\\n\\n  bytes32 constant EIP712DOMAIN_TYPEHASH =\\n    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n  bytes32 DOMAIN_SEPARATOR;\\n\\n  function _hashDomain(EIP712Domain memory eip712Domain) internal pure returns (bytes32) {\\n    return\\n      keccak256(\\n        abi.encode(\\n          EIP712DOMAIN_TYPEHASH,\\n          keccak256(bytes(eip712Domain.name)),\\n          keccak256(bytes(eip712Domain.version)),\\n          eip712Domain.chainId,\\n          eip712Domain.verifyingContract\\n        )\\n      );\\n  }\\n\\n  function _hashFee(Fee calldata fee) internal pure returns (bytes32) {\\n    return keccak256(abi.encode(FEE_TYPEHASH, fee.rate, fee.recipient));\\n  }\\n\\n  function _packFees(Fee[] calldata fees) internal pure returns (bytes32) {\\n    bytes32[] memory feeHashes = new bytes32[](fees.length);\\n    for (uint256 i = 0; i < fees.length; i++) {\\n      feeHashes[i] = _hashFee(fees[i]);\\n    }\\n    return keccak256(abi.encodePacked(feeHashes));\\n  }\\n\\n  function _hashOrder(Order calldata order, uint256 nonce) internal pure returns (bytes32) {\\n    return\\n      keccak256(\\n        bytes.concat(\\n          abi.encode(\\n            ORDER_TYPEHASH,\\n            order.trader,\\n            order.side,\\n            order.matchingPolicy,\\n            order.collection,\\n            order.tokenId,\\n            order.amount,\\n            order.paymentToken,\\n            order.price,\\n            order.listingTime,\\n            order.expirationTime,\\n            _packFees(order.fees),\\n            order.salt,\\n            keccak256(order.extraParams)\\n          ),\\n          abi.encode(nonce)\\n        )\\n      );\\n  }\\n\\n  function _hashToSign(bytes32 orderHash) internal view returns (bytes32 hash) {\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR, orderHash));\\n  }\\n\\n  function _hashToSignRoot(bytes32 root) internal view returns (bytes32 hash) {\\n    return\\n      keccak256(\\n        abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR, keccak256(abi.encode(ROOT_TYPEHASH, root)))\\n      );\\n  }\\n\\n  function _hashToSignOracle(\\n    bytes32 orderHash,\\n    uint256 blockNumber\\n  ) internal view returns (bytes32 hash) {\\n    return\\n      keccak256(\\n        abi.encodePacked(\\n          \\\"\\\\x19\\\\x01\\\",\\n          DOMAIN_SEPARATOR,\\n          keccak256(abi.encode(ORACLE_ORDER_TYPEHASH, orderHash, blockNumber))\\n        )\\n      );\\n  }\\n}\\n\",\"keccak256\":\"0x187403a05fb186fc025441d9a6350bc3fa29644b15a9939fc62d539a6b6774f7\",\"license\":\"MIT\"},\"contracts/libraries/MerkleVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title MerkleVerifier\\n * @dev Utility functions for Merkle tree computations\\n */\\nlibrary MerkleVerifier {\\n  error InvalidProof();\\n\\n  /**\\n   * @dev Verify the merkle proof\\n   * @param leaf leaf\\n   * @param root root\\n   * @param proof proof\\n   */\\n  function _verifyProof(bytes32 leaf, bytes32 root, bytes32[] memory proof) public pure {\\n    bytes32 computedRoot = _computeRoot(leaf, proof);\\n    if (computedRoot != root) {\\n      revert InvalidProof();\\n    }\\n  }\\n\\n  /**\\n   * @dev Compute the merkle root\\n   * @param leaf leaf\\n   * @param proof proof\\n   */\\n  function _computeRoot(bytes32 leaf, bytes32[] memory proof) public pure returns (bytes32) {\\n    bytes32 computedHash = leaf;\\n    for (uint256 i = 0; i < proof.length; i++) {\\n      bytes32 proofElement = proof[i];\\n      computedHash = _hashPair(computedHash, proofElement);\\n    }\\n    return computedHash;\\n  }\\n\\n  function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n    return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n  }\\n\\n  function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n    assembly {\\n      mstore(0x00, a)\\n      mstore(0x20, b)\\n      value := keccak256(0x00, 0x40)\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x031ffb83eefe3e6f41dbcbc6871e811aa34b07bdafd532ea9120ebab3969b580\",\"license\":\"MIT\"},\"contracts/libraries/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n  // Booleans are more expensive than uint256 or any type that takes up a full\\n  // word because each write operation emits an extra SLOAD to first read the\\n  // slot's contents, replace the bits taken up by the boolean, and then write\\n  // back. This is the compiler's defense against contract upgrades and\\n  // pointer aliasing, and it cannot be disabled.\\n\\n  // The values being non-zero value makes deployment a bit more expensive,\\n  // but in exchange the refund on every call to nonReentrant will be lower in\\n  // amount. Since refunds are capped to a percentage of the total\\n  // transaction's gas, it is best to keep them low in cases like this one, to\\n  // increase the likelihood of the full refund coming into effect.\\n  uint256 private constant _NOT_ENTERED = 1;\\n  uint256 private constant _ENTERED = 2;\\n\\n  uint256 private _status;\\n\\n  constructor() {\\n    _status = _NOT_ENTERED;\\n  }\\n\\n  /**\\n   * @dev Prevents a contract from calling itself, directly or indirectly.\\n   * Calling a `nonReentrant` function from another `nonReentrant`\\n   * function is not supported. It is possible to prevent this from happening\\n   * by making the `nonReentrant` function external, and make it call a\\n   * `private` function that does the actual work.\\n   */\\n  modifier nonReentrant() {\\n    // On the first call to nonReentrant, _notEntered will be true\\n    require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n    // Any calls to nonReentrant after this point will fail\\n    _status = _ENTERED;\\n\\n    _;\\n\\n    // By storing the original value once again, a refund is triggered (see\\n    // https://eips.ethereum.org/EIPS/eip-2200)\\n    _status = _NOT_ENTERED;\\n  }\\n}\\n\",\"keccak256\":\"0xf41fd84920d5cabbb768943e381d562baa1cd99d604d58aa2011b69bac284065\",\"license\":\"MIT\"},\"contracts/libraries/Structs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nenum Side {\\n  Buy,\\n  Sell\\n}\\n\\nenum SignatureVersion {\\n  Single,\\n  Bulk\\n}\\n\\nenum AssetType {\\n  ERC721,\\n  ERC1155\\n}\\n\\nstruct Fee {\\n  uint16 rate;\\n  address payable recipient;\\n}\\n\\nstruct Order {\\n  address trader;\\n  Side side;\\n  address matchingPolicy;\\n  address collection;\\n  uint256 tokenId;\\n  uint256 amount;\\n  address paymentToken;\\n  uint256 price;\\n  uint256 listingTime;\\n  /* Order expiration timestamp - 0 for oracle cancellations. */\\n  uint256 expirationTime;\\n  Fee[] fees;\\n  uint256 salt;\\n  bytes extraParams;\\n}\\n\\nstruct Input {\\n  Order order;\\n  uint8 v;\\n  bytes32 r;\\n  bytes32 s;\\n  bytes extraSignature;\\n  SignatureVersion signatureVersion;\\n  uint256 blockNumber;\\n}\\n\\nstruct Auction {\\n  AssetType assetType;\\n  address collection;\\n  uint256 tokenId;\\n  address paymentToken;\\n  uint256 minPrice;\\n  address lastBidder;\\n  uint256 bidPrice;\\n  uint256 startTime;\\n  uint256 endTime;\\n  uint256 amount;\\n  address owner;\\n  Fee[] fees;\\n}\\n\\nstruct Sig {\\n  bytes32 r;\\n  bytes32 s;\\n  uint8 v;\\n}\\n\",\"keccak256\":\"0x24b612a27f49e9d14e13a993ad2a5afc34e9cf7a2818717f4e1c72005b1dd3e7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523060805234801561001457600080fd5b5060016000556080516135a361005160003960008181610677015281816106b701528181610953015281816109930152610a0f01526135a36000f3fe6080604052600436106101735760003560e01c8063037c9be21461017857806306fdde031461019a5780631d97c9bb146101f257806331e6d0fe146102345780633659cfe6146102685780633fc8cef31461028857806342de6699146102b557806343d726d6146102d557806347535d7b146102ea5780634832ede1146103005780634f1ef2861461033457806352d1902d1461034757806354fd4d501461035c5780635511f3191461038b578063627cdcb9146103cb5780636992aa36146103e0578063715018a6146104005780637adbf973146104155780637dc0d1d0146104355780637ecebe00146104555780638da5cb5b14610482578063986c9b20146104975780639a1fc3a7146104b7578063a4b2c674146104ca578063ab3dbf3b146104e0578063ab7e8cba14610500578063adde41e114610520578063cae6047f14610540578063f2fde38b14610556578063f4acd74014610576578063f973a20914610596578063fcfff16f146105ca575b600080fd5b34801561018457600080fd5b5061019861019336600461274e565b6105df565b005b3480156101a657600080fd5b506101dc6040518060400160405280601681526020017553757065724368696566204d61726b6574706c61636560501b81525081565b6040516101e9919061278f565b60405180910390f35b3480156101fe57600080fd5b506102267fd71080023d2f293ed0723dc287d6b2d4e7d27d0b6c12928e300721b7c78c748581565b6040519081526020016101e9565b34801561024057600080fd5b506102267f5bcf4b2eaff7fcdeb49f0bda53026b9ebdd93db566fe4c447125cb899e598c9081565b34801561027457600080fd5b5061019861028336600461274e565b61066d565b34801561029457600080fd5b5060cc546102a8906001600160a01b031681565b6040516101e991906127df565b3480156102c157600080fd5b506101986102d03660046127f3565b610735565b3480156102e157600080fd5b50610198610911565b3480156102f657600080fd5b5061022660cb5481565b34801561030c57600080fd5b506102267f05b43f730f67de334a342883f867101fc7ef3361dfdff4a29a7aa97e0920ef7a81565b6101986103423660046128d1565b610949565b34801561035357600080fd5b50610226610a02565b34801561036857600080fd5b506101dc604051806040016040528060038152602001620312e360ec1b81525081565b34801561039757600080fd5b506103bb6103a6366004612978565b60d16020526000908152604090205460ff1681565b60405190151581526020016101e9565b3480156103d757600080fd5b50610198610ab0565b3480156103ec57600080fd5b506101986103fb366004612978565b610b1f565b34801561040c57600080fd5b50610198610b5c565b34801561042157600080fd5b5061019861043036600461274e565b610b70565b34801561044157600080fd5b5060cf546102a8906001600160a01b031681565b34801561046157600080fd5b5061022661047036600461274e565b60d26020526000908152604090205481565b34801561048e57600080fd5b506102a8610bea565b3480156104a357600080fd5b5060cd546102a8906001600160a01b031681565b6101986104c53660046129a9565b610bf9565b3480156104d657600080fd5b5061022660d05481565b3480156104ec57600080fd5b5060ce546102a8906001600160a01b031681565b34801561050c57600080fd5b5061019861051b366004612a0c565b611166565b34801561052c57600080fd5b5061019861053b36600461274e565b6111b5565b34801561054c57600080fd5b5061022661271081565b34801561056257600080fd5b5061019861057136600461274e565b61122f565b34801561058257600080fd5b50610198610591366004612a80565b6112a5565b3480156105a257600080fd5b506102267f376bfbc394a7ba7fdf10f224572cef371358e3053e362f4554fcd2ad56329b3f81565b3480156105d657600080fd5b50610198611355565b6105e761138d565b6001600160a01b0381166106165760405162461bcd60e51b815260040161060d90612abb565b60405180910390fd5b60cd80546001600160a01b0319166001600160a01b0383169081179091556040517ff9a0f356a7ef079355de09d32ce45cc3cfabc8f118681c19a17501f005a376ac91610662916127df565b60405180910390a150565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036106b55760405162461bcd60e51b815260040161060d90612aeb565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166106e76113ec565b6001600160a01b03161461070d5760405162461bcd60e51b815260040161060d90612b37565b61071681611408565b6040805160008082526020820190925261073291839190611410565b50565b600254610100900460ff16158080156107555750600254600160ff909116105b8061077657506107643061157b565b158015610776575060025460ff166001145b6107d95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161060d565b6002805460ff1916600117905580156107fc576002805461ff0019166101001790555b61080461158a565b600160cb556040805160c0810182526016608082019081527553757065724368696566204d61726b6574706c61636560501b60a083015281528151808301835260038152620312e360ec1b602082810191909152820152908101889052306060820152610870906115b9565b60015560cc80546001600160a01b038089166001600160a01b03199283161790925560cd805488841690831617905560ce805487841690831617905560cf80549286169290911691909117905560d08290558015610908576002805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b61091961138d565b600060cb8190556040517f1cdde67b72a90f19919ac732a437ac2f7a10fc128d28c2a6e525d89ce5cd9d3a9190a1565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036109915760405162461bcd60e51b815260040161060d90612aeb565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166109c36113ec565b6001600160a01b0316146109e95760405162461bcd60e51b815260040161060d90612b37565b6109f282611408565b6109fe82826001611410565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610a9d5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c6044820152771b1959081d1a1c9bdd59da0819195b1959d85d1958d85b1b60421b606482015260840161060d565b5060008051602061355083398151915290565b33600090815260d260205260408120805460019290610ad0908490612b99565b909155505033600081815260d26020908152604091829020548251938452908301527fa82a649bbd060c9099cd7b7326e2b0dc9e9af0836480e0f849dc9eaa79710b3b910160405180910390a1565b610b2761138d565b60d08190556040518181527f7706177c541ba1b858371bfc568aa77450b4713bbdbba62c730d4484ab6c125190602001610662565b610b6461138d565b610b6e6000611656565b565b610b7861138d565b6001600160a01b038116610b9e5760405162461bcd60e51b815260040161060d90612abb565b60cf80546001600160a01b0319166001600160a01b0383169081179091556040517fb3eacd0e351fafdfefdec84e1cd19679b38dbcd63ea7c2c24da17fd2bc3b3c0e91610662916127df565b6035546001600160a01b031690565b600260005403610c4b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161060d565b600260005560cb54600114610c8b5760405162461bcd60e51b815260206004820152600660248201526510db1bdcd95960d21b604482015260640161060d565b6001610c978380612bc2565b610ca8906040810190602001612bfb565b6001811115610cb957610cb9612bac565b14610cc357600080fd5b6000610d14610cd28480612bc2565b60d26000610ce08780612bc2565b610cee90602081019061274e565b6001600160a01b03166001600160a01b03168152602001908152602001600020546116a8565b90506000610d25610cd28480612bc2565b9050610d3a610d348580612bc2565b836117e9565b610d845760405162461bcd60e51b815260206004820152601b60248201527a53656c6c2068617320696e76616c696420706172616d657465727360281b604482015260640161060d565b610d97610d918480612bc2565b826117e9565b610de05760405162461bcd60e51b815260206004820152601a6024820152794275792068617320696e76616c696420706172616d657465727360301b604482015260640161060d565b610dea8483611841565b610e325760405162461bcd60e51b815260206004820152601960248201527829b2b636103330b4b632b21030baba3437b934bd30ba34b7b760391b604482015260640161060d565b610e3c8382611841565b610e835760405162461bcd60e51b8152602060048201526018602482015277213abc903330b4b632b21030baba3437b934bd30ba34b7b760411b604482015260640161060d565b6000808080610ea4610e958980612bc2565b610e9f8980612bc2565b61198a565b60cd54939750919550935091506000906001600160a01b0316636ef91c72610ecc8b80612bc2565b610edd90608081019060600161274e565b610ee78c80612bc2565b60800135610ef58d80612bc2565b610f0490610140810190612c18565b6040518563ffffffff1660e01b8152600401610f239493929190612cd9565b600060405180830381865afa158015610f40573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f689190810190612d24565b9050610fbf610f778a80612bc2565b610f8590602081019061274e565b610f8f8a80612bc2565b610f9d90602081019061274e565b610fa78c80612bc2565b610fb89060e081019060c00161274e565b8489611c43565b611015610fcc8a80612bc2565b610fdd90608081019060600161274e565b610fe78b80612bc2565b610ff590602081019061274e565b610fff8b80612bc2565b61100d90602081019061274e565b878787611c81565b600087815260d160205260408082208054600160ff199182168117909255898452919092208054909116909117905561104e8880612bc2565b610100013561105d8a80612bc2565b610100013511611084576110718880612bc2565b61107f90602081019061274e565b61109c565b61108e8980612bc2565b61109c90602081019061274e565b6001600160a01b03166110af8980612bc2565b61010001356110be8b80612bc2565b610100013511156110e6576110d38980612bc2565b6110e190602081019061274e565b6110fe565b6110f08a80612bc2565b6110fe90602081019061274e565b6001600160a01b03167f61cbb2a3dee0b6064c2e681aadd61677fb4ef319f0b547508d495626f5a62f646111328c80612bc2565b8a61113d8d80612bc2565b8b60405161114e9493929190612fcf565b60405180910390a35050600160005550505050505050565b60005b60ff81168211156111b05761119e83838360ff1681811061118c5761118c61300c565b90506020028101906105919190612bc2565b806111a881613022565b915050611169565b505050565b6111bd61138d565b6001600160a01b0381166111e35760405162461bcd60e51b815260040161060d90612abb565b60ce80546001600160a01b0319166001600160a01b0383169081179091556040517fdbe18f3fd927cc2aefe380ffd2abfdb8e13f0239c0258ccfc84c3d8fdd8c041891610662916127df565b61123761138d565b6001600160a01b03811661129c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161060d565b61073281611656565b6112b2602082018261274e565b6001600160a01b0316336001600160a01b0316146112cf57600080fd5b60006112e58260d283610cee602084018461274e565b600081815260d1602052604090205490915060ff166109fe57600081815260d1602052604090819020805460ff19166001179055517f5152abf959f6564662358c2e52b702259b78bac5ee7842a0f01937e670efcc7d906113499083815260200190565b60405180910390a15050565b61135d61138d565b600160cb556040517fd1dcd00534373f20882b79e6ab6875a5c358c5bd576448757ed50e63069ab51890600090a1565b33611396610bea565b6001600160a01b031614610b6e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161060d565b600080516020613550833981519152546001600160a01b031690565b61073261138d565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611443576111b083611def565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561149d575060408051601f3d908101601f1916820190925261149a91810190613041565b60015b6115005760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b606482015260840161060d565b600080516020613550833981519152811461156f5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b606482015260840161060d565b506111b0838383611e89565b6001600160a01b03163b151590565b600254610100900460ff166115b15760405162461bcd60e51b815260040161060d9061305a565b610b6e611eb4565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f826000015180519060200120836020015180519060200120846040015185606001516040516020016116399594939291909485526020850193909352604084019190915260608301526001600160a01b0316608082015260a00190565b604051602081830303815290604052805190602001209050919050565b603580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60007f376bfbc394a7ba7fdf10f224572cef371358e3053e362f4554fcd2ad56329b3f6116d8602085018561274e565b6116e86040860160208701612bfb565b6116f8606087016040880161274e565b611708608088016060890161274e565b608088013560a089013561172260e08b0160c08c0161274e565b8a60e001358b61010001358c610120013561174c8e8061014001906117479190612c18565b611ee4565b8e61016001358f80610180019061176391906130a5565b6040516117719291906130eb565b6040519081900381206117939e9d9c9b9a9998979695949392916020016130fb565b60408051601f1981840301815282825260208301859052910160408051601f19818403018152908290526117ca929160200161318e565b6040516020818303038152906040528051906020012090505b92915050565b6000806117f9602085018561274e565b6001600160a01b03161415801561181f5750600082815260d1602052604090205460ff16155b801561183a575061183a836101000135846101200135611fb6565b9392505050565b60003361184e8480612bc2565b61185c90602081019061274e565b6001600160a01b031603611872575060016117e3565b6118ca826118808580612bc2565b61188e90602081019061274e565b61189e60408701602088016131ce565b604087013560608801356118b860c08a0160a08b01612bfb565b6118c560808b018b6130a5565b611fd2565b6118d6575060006117e3565b6118e08380612bc2565b61012001356000036119815760d0546118fd60c0850135436131e9565b1061194a5760405162461bcd60e51b815260206004820181905260248201527f5369676e656420626c6f636b206e756d626572206f7574206f662072616e6765604482015260640161060d565b6119758261195e60c0860160a08701612bfb565b61196b60808701876130a5565b8760c001356120e0565b611981575060006117e3565b50600192915050565b600080600080600085610100013587610100013511611acc5760ce546001600160a01b031663874516cd6119c460608a0160408b0161274e565b6040518263ffffffff1660e01b81526004016119e091906127df565b602060405180830381865afa1580156119fd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a21919061320c565b611a3d5760405162461bcd60e51b815260040161060d90613227565b611a4d606088016040890161274e565b6001600160a01b031663d5ec8c7788886040518363ffffffff1660e01b8152600401611a7a92919061325a565b60a060405180830381865afa158015611a97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611abb9190613288565b929850909650945092509050611bf1565b60ce546001600160a01b031663874516cd611aed6060890160408a0161274e565b6040518263ffffffff1660e01b8152600401611b0991906127df565b602060405180830381865afa158015611b26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b4a919061320c565b611b665760405162461bcd60e51b815260040161060d90613227565b611b76606087016040880161274e565b6001600160a01b0316630813a76687896040518363ffffffff1660e01b8152600401611ba392919061325a565b60a060405180830381865afa158015611bc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611be49190613288565b9298509096509450925090505b80611c395760405162461bcd60e51b815260206004820152601860248201527713dc99195c9cc818d85b9b9bdd081899481b585d18da195960421b604482015260640161060d565b5092959194509250565b6001600160a01b038316611c5d57803414611c5d57600080fd5b6000611c6b83858785612170565b9050611c798486888461228d565b505050505050565b853b611ccb5760405162461bcd60e51b815260206004820152601960248201527810dbdb1b1958dd1a5bdb88191bd95cc81b9bdd08195e1a5cdd603a1b604482015260640161060d565b6000816001811115611cdf57611cdf612bac565b03611d515760cd54604051633c4fc9fb60e11b81526001600160a01b039091169063789f93f690611d1a9089908990899089906004016132dc565b600060405180830381600087803b158015611d3457600080fd5b505af1158015611d48573d6000803e3d6000fd5b50505050611c79565b6001816001811115611d6557611d65612bac565b03611c795760cd54604051633a54a01760e11b81526001600160a01b038881166004830152878116602483015286811660448301526064820186905260848201859052909116906374a9402e9060a401600060405180830381600087803b158015611dcf57600080fd5b505af1158015611de3573d6000803e3d6000fd5b50505050505050505050565b611df88161157b565b611e5a5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840161060d565b60008051602061355083398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b611e92836123b0565b600082511180611e9f5750805b156111b057611eae83836123f0565b50505050565b600254610100900460ff16611edb5760405162461bcd60e51b815260040161060d9061305a565b610b6e33611656565b600080826001600160401b03811115611eff57611eff612863565b604051908082528060200260200182016040528015611f28578160200160208202803683370190505b50905060005b83811015611f8557611f56858583818110611f4b57611f4b61300c565b905060400201612415565b828281518110611f6857611f6861300c565b602090810291909101015280611f7d81613306565b915050611f2e565b5080604051602001611f97919061331f565b6040516020818303038152906040528051906020012091505092915050565b6000428310801561183a575081158061183a5750504210919050565b60008080856001811115611fe857611fe8612bac565b03611ffd57611ff68a612485565b90506120b2565b600185600181111561201157612011612bac565b036120b2576000612024848601866133bb565b905060007375176B164941B463B46E619BE08083b1bE672270639c7bf9388d846040518363ffffffff1660e01b81526004016120619291906133ef565b602060405180830381865af415801561207e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120a29190613041565b90506120ad8161249c565b925050505b886001600160a01b03166120c8828a8a8a6124fd565b6001600160a01b0316149a9950505050505050505050565b6000806120ed87846125bd565b9050600080808089600181111561210657612106612bac565b03612123576121178789018961343d565b91945092509050612158565b600189600181111561213757612137612bac565b03612158576000808061214c8a8c018c613470565b91985096509450505050505b60cf546001600160a01b03166120c8858585856124fd565b600080805b86518160ff16101561220e576000612710888360ff168151811061219b5761219b61300c565b60200260200101516000015161ffff16866121b691906134cc565b6121c091906134e3565b90506121ee87878a8560ff16815181106121dc576121dc61300c565b6020026020010151602001518461228d565b6121f88184612b99565b925050808061220690613022565b915050612175565b50828111156122745760405162461bcd60e51b815260206004820152602c60248201527f546f74616c20616d6f756e74206f66206665657320617265206d6f726520746860448201526b616e2074686520707269636560a01b606482015260840161060d565b600061228082856131e9565b925050505b949350505050565b8015611eae576001600160a01b0384166122dd576040516001600160a01b0383169082156108fc029083906000818181858888f193505050501580156122d7573d6000803e3d6000fd5b50611eae565b60cc546001600160a01b03908116908516036123705760cd5460cc5460405163368fa33960e21b81526001600160a01b039283169263da3e8ce49261232d929116908790879087906004016132dc565b6020604051808303816000875af115801561234c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122d7919061320c565b60405162461bcd60e51b815260206004820152601560248201527424b73b30b634b2103830bcb6b2b73a103a37b5b2b760591b604482015260640161060d565b6123b981611def565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b606061183a838360405180606001604052806027815260200161357060279139612625565b60007f05b43f730f67de334a342883f867101fc7ef3361dfdff4a29a7aa97e0920ef7a6124456020840184613505565b612455604085016020860161274e565b6040516020016116399392919092835261ffff9190911660208301526001600160a01b0316604082015260600190565b600060015482604051602001611639929190613522565b600154604080517f5bcf4b2eaff7fcdeb49f0bda53026b9ebdd93db566fe4c447125cb899e598c9060208201529081018390526000919060600160405160208183030381529060405280519060200120604051602001611639929190613522565b60008360ff16601b148061251457508360ff16601c145b6125565760405162461bcd60e51b815260206004820152601360248201527224b73b30b634b2103b103830b930b6b2ba32b960691b604482015260640161060d565b60408051600081526020810180835287905260ff861691810191909152606081018490526080810183905260019060a0016020604051602081039080840390855afa1580156125a9573d6000803e3d6000fd5b5050604051601f1901519695505050505050565b600154604080517fd71080023d2f293ed0723dc287d6b2d4e7d27d0b6c12928e300721b7c78c748560208201529081018490526060810183905260009190608001604051602081830303815290604052805190602001206040516020016117ca929190613522565b6060600080856001600160a01b031685604051612642919061353d565b600060405180830381855af49150503d806000811461267d576040519150601f19603f3d011682016040523d82523d6000602084013e612682565b606091505b50915091506126938683838761269d565b9695505050505050565b6060831561270a578251600003612703576126b78561157b565b6127035760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161060d565b5081612285565b612285838381511561271f5781518083602001fd5b8060405162461bcd60e51b815260040161060d919061278f565b6001600160a01b038116811461073257600080fd5b60006020828403121561276057600080fd5b813561183a81612739565b60005b8381101561278657818101518382015260200161276e565b50506000910152565b60208152600082518060208401526127ae81604085016020870161276b565b601f01601f19169190910160400192915050565b80356127cd81612739565b919050565b6001600160a01b03169052565b6001600160a01b0391909116815260200190565b60008060008060008060c0878903121561280c57600080fd5b86359550602087013561281e81612739565b9450604087013561282e81612739565b9350606087013561283e81612739565b9250608087013561284e81612739565b8092505060a087013590509295509295509295565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b038111828210171561289b5761289b612863565b60405290565b604051601f8201601f191681016001600160401b03811182821017156128c9576128c9612863565b604052919050565b600080604083850312156128e457600080fd5b82356128ef81612739565b91506020838101356001600160401b038082111561290c57600080fd5b818601915086601f83011261292057600080fd5b81358181111561293257612932612863565b612944601f8201601f191685016128a1565b9150808252878482850101111561295a57600080fd5b80848401858401376000848284010152508093505050509250929050565b60006020828403121561298a57600080fd5b5035919050565b600060e082840312156129a357600080fd5b50919050565b600080604083850312156129bc57600080fd5b82356001600160401b03808211156129d357600080fd5b6129df86838701612991565b935060208501359150808211156129f557600080fd5b50612a0285828601612991565b9150509250929050565b60008060208385031215612a1f57600080fd5b82356001600160401b0380821115612a3657600080fd5b818501915085601f830112612a4a57600080fd5b813581811115612a5957600080fd5b8660208260051b8501011115612a6e57600080fd5b60209290920196919550909350505050565b600060208284031215612a9257600080fd5b81356001600160401b03811115612aa857600080fd5b82016101a0818503121561183a57600080fd5b602080825260169082015275416464726573732063616e6e6f74206265207a65726f60501b604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b808201808211156117e3576117e3612b83565b634e487b7160e01b600052602160045260246000fd5b6000823561019e19833603018112612bd957600080fd5b9190910192915050565b6002811061073257600080fd5b80356127cd81612be3565b600060208284031215612c0d57600080fd5b813561183a81612be3565b6000808335601e19843603018112612c2f57600080fd5b8301803591506001600160401b03821115612c4957600080fd5b6020019150600681901b3603821315612c6157600080fd5b9250929050565b61ffff8116811461073257600080fd5b8183526000602080850194508260005b85811015612cce578135612c9b81612c68565b61ffff16875281830135612cae81612739565b6001600160a01b0316878401526040968701969190910190600101612c88565b509495945050505050565b60018060a01b0385168152836020820152606060408201526000612693606083018486612c78565b60006001600160401b03821115612d1a57612d1a612863565b5060051b60200190565b60006020808385031215612d3757600080fd5b82516001600160401b03811115612d4d57600080fd5b8301601f81018513612d5e57600080fd5b8051612d71612d6c82612d01565b6128a1565b81815260069190911b82018301908381019087831115612d9057600080fd5b928401925b82841015612de65760408489031215612dae5760008081fd5b612db6612879565b8451612dc181612c68565b815284860151612dd081612739565b8187015282526040939093019290840190612d95565b979650505050505050565b60028110612e0f57634e487b7160e01b600052602160045260246000fd5b9052565b6000808335601e19843603018112612e2a57600080fd5b83016020810192503590506001600160401b03811115612e4957600080fd5b8060061b3603821315612c6157600080fd5b6000808335601e19843603018112612e7257600080fd5b83016020810192503590506001600160401b03811115612e9157600080fd5b803603821315612c6157600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60006101a0612ee084612edb856127c2565b6127d2565b612eec60208401612bf0565b612ef96020860182612df1565b50612f06604084016127c2565b612f1360408601826127d2565b50612f20606084016127c2565b612f2d60608601826127d2565b506080830135608085015260a083013560a0850152612f4e60c084016127c2565b612f5b60c08601826127d2565b5060e0838101359085015261010080840135908501526101208084013590850152610140612f8b81850185612e13565b8383880152612f9d8488018284612c78565b9350505050610160808401358186015250610180612fbd81850185612e5b565b86840383880152612de6848284612ea0565b608081526000612fe26080830187612ec9565b8560208401528281036040840152612ffa8186612ec9565b91505082606083015295945050505050565b634e487b7160e01b600052603260045260246000fd5b600060ff821660ff810361303857613038612b83565b60010192915050565b60006020828403121561305357600080fd5b5051919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000808335601e198436030181126130bc57600080fd5b8301803591506001600160401b038211156130d657600080fd5b602001915036819003821315612c6157600080fd5b8183823760009101908152919050565b8e81526001600160a01b038e1660208201526101c0810161311f604083018f612df1565b6001600160a01b038d811660608401528c16608083015260a082018b905260c082018a905261315160e083018a6127d2565b8761010083015286610120830152856101408301528461016083015283610180830152826101a08301529f9e505050505050505050505050505050565b600083516131a081846020880161276b565b8351908301906131b481836020880161276b565b01949350505050565b803560ff811681146127cd57600080fd5b6000602082840312156131e057600080fd5b61183a826131bd565b818103818111156117e3576117e3612b83565b805180151581146127cd57600080fd5b60006020828403121561321e57600080fd5b61183a826131fc565b602080825260199082015278141bdb1a58de481a5cc81b9bdd081dda1a5d195b1a5cdd1959603a1b604082015260600190565b60408152600061326d6040830185612ec9565b828103602084015261327f8185612ec9565b95945050505050565b600080600080600060a086880312156132a057600080fd5b6132a9866131fc565b945060208601519350604086015192506060860151915060808601516132ce81612be3565b809150509295509295909350565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b60006001820161331857613318612b83565b5060010190565b815160009082906020808601845b838110156133495781518552938201939082019060010161332d565b50929695505050505050565b600082601f83011261336657600080fd5b81356020613376612d6c83612d01565b82815260059290921b8401810191818101908684111561339557600080fd5b8286015b848110156133b05780358352918301918301613399565b509695505050505050565b6000602082840312156133cd57600080fd5b81356001600160401b038111156133e357600080fd5b61228584828501613355565b6000604082018483526020604081850152818551808452606086019150828701935060005b8181101561343057845183529383019391830191600101613414565b5090979650505050505050565b60008060006060848603121561345257600080fd5b61345b846131bd565b95602085013595506040909401359392505050565b6000806000806080858703121561348657600080fd5b84356001600160401b0381111561349c57600080fd5b6134a887828801613355565b9450506134b7602086016131bd565b93969395505050506040820135916060013590565b80820281158282048414176117e3576117e3612b83565b60008261350057634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561351757600080fd5b813561183a81612c68565b61190160f01b81526002810192909252602282015260420190565b60008251612bd981846020870161276b56fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a164736f6c6343000813000a",
  "deployedBytecode": "0x6080604052600436106101735760003560e01c8063037c9be21461017857806306fdde031461019a5780631d97c9bb146101f257806331e6d0fe146102345780633659cfe6146102685780633fc8cef31461028857806342de6699146102b557806343d726d6146102d557806347535d7b146102ea5780634832ede1146103005780634f1ef2861461033457806352d1902d1461034757806354fd4d501461035c5780635511f3191461038b578063627cdcb9146103cb5780636992aa36146103e0578063715018a6146104005780637adbf973146104155780637dc0d1d0146104355780637ecebe00146104555780638da5cb5b14610482578063986c9b20146104975780639a1fc3a7146104b7578063a4b2c674146104ca578063ab3dbf3b146104e0578063ab7e8cba14610500578063adde41e114610520578063cae6047f14610540578063f2fde38b14610556578063f4acd74014610576578063f973a20914610596578063fcfff16f146105ca575b600080fd5b34801561018457600080fd5b5061019861019336600461274e565b6105df565b005b3480156101a657600080fd5b506101dc6040518060400160405280601681526020017553757065724368696566204d61726b6574706c61636560501b81525081565b6040516101e9919061278f565b60405180910390f35b3480156101fe57600080fd5b506102267fd71080023d2f293ed0723dc287d6b2d4e7d27d0b6c12928e300721b7c78c748581565b6040519081526020016101e9565b34801561024057600080fd5b506102267f5bcf4b2eaff7fcdeb49f0bda53026b9ebdd93db566fe4c447125cb899e598c9081565b34801561027457600080fd5b5061019861028336600461274e565b61066d565b34801561029457600080fd5b5060cc546102a8906001600160a01b031681565b6040516101e991906127df565b3480156102c157600080fd5b506101986102d03660046127f3565b610735565b3480156102e157600080fd5b50610198610911565b3480156102f657600080fd5b5061022660cb5481565b34801561030c57600080fd5b506102267f05b43f730f67de334a342883f867101fc7ef3361dfdff4a29a7aa97e0920ef7a81565b6101986103423660046128d1565b610949565b34801561035357600080fd5b50610226610a02565b34801561036857600080fd5b506101dc604051806040016040528060038152602001620312e360ec1b81525081565b34801561039757600080fd5b506103bb6103a6366004612978565b60d16020526000908152604090205460ff1681565b60405190151581526020016101e9565b3480156103d757600080fd5b50610198610ab0565b3480156103ec57600080fd5b506101986103fb366004612978565b610b1f565b34801561040c57600080fd5b50610198610b5c565b34801561042157600080fd5b5061019861043036600461274e565b610b70565b34801561044157600080fd5b5060cf546102a8906001600160a01b031681565b34801561046157600080fd5b5061022661047036600461274e565b60d26020526000908152604090205481565b34801561048e57600080fd5b506102a8610bea565b3480156104a357600080fd5b5060cd546102a8906001600160a01b031681565b6101986104c53660046129a9565b610bf9565b3480156104d657600080fd5b5061022660d05481565b3480156104ec57600080fd5b5060ce546102a8906001600160a01b031681565b34801561050c57600080fd5b5061019861051b366004612a0c565b611166565b34801561052c57600080fd5b5061019861053b36600461274e565b6111b5565b34801561054c57600080fd5b5061022661271081565b34801561056257600080fd5b5061019861057136600461274e565b61122f565b34801561058257600080fd5b50610198610591366004612a80565b6112a5565b3480156105a257600080fd5b506102267f376bfbc394a7ba7fdf10f224572cef371358e3053e362f4554fcd2ad56329b3f81565b3480156105d657600080fd5b50610198611355565b6105e761138d565b6001600160a01b0381166106165760405162461bcd60e51b815260040161060d90612abb565b60405180910390fd5b60cd80546001600160a01b0319166001600160a01b0383169081179091556040517ff9a0f356a7ef079355de09d32ce45cc3cfabc8f118681c19a17501f005a376ac91610662916127df565b60405180910390a150565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036106b55760405162461bcd60e51b815260040161060d90612aeb565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166106e76113ec565b6001600160a01b03161461070d5760405162461bcd60e51b815260040161060d90612b37565b61071681611408565b6040805160008082526020820190925261073291839190611410565b50565b600254610100900460ff16158080156107555750600254600160ff909116105b8061077657506107643061157b565b158015610776575060025460ff166001145b6107d95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161060d565b6002805460ff1916600117905580156107fc576002805461ff0019166101001790555b61080461158a565b600160cb556040805160c0810182526016608082019081527553757065724368696566204d61726b6574706c61636560501b60a083015281528151808301835260038152620312e360ec1b602082810191909152820152908101889052306060820152610870906115b9565b60015560cc80546001600160a01b038089166001600160a01b03199283161790925560cd805488841690831617905560ce805487841690831617905560cf80549286169290911691909117905560d08290558015610908576002805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b61091961138d565b600060cb8190556040517f1cdde67b72a90f19919ac732a437ac2f7a10fc128d28c2a6e525d89ce5cd9d3a9190a1565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036109915760405162461bcd60e51b815260040161060d90612aeb565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166109c36113ec565b6001600160a01b0316146109e95760405162461bcd60e51b815260040161060d90612b37565b6109f282611408565b6109fe82826001611410565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610a9d5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c6044820152771b1959081d1a1c9bdd59da0819195b1959d85d1958d85b1b60421b606482015260840161060d565b5060008051602061355083398151915290565b33600090815260d260205260408120805460019290610ad0908490612b99565b909155505033600081815260d26020908152604091829020548251938452908301527fa82a649bbd060c9099cd7b7326e2b0dc9e9af0836480e0f849dc9eaa79710b3b910160405180910390a1565b610b2761138d565b60d08190556040518181527f7706177c541ba1b858371bfc568aa77450b4713bbdbba62c730d4484ab6c125190602001610662565b610b6461138d565b610b6e6000611656565b565b610b7861138d565b6001600160a01b038116610b9e5760405162461bcd60e51b815260040161060d90612abb565b60cf80546001600160a01b0319166001600160a01b0383169081179091556040517fb3eacd0e351fafdfefdec84e1cd19679b38dbcd63ea7c2c24da17fd2bc3b3c0e91610662916127df565b6035546001600160a01b031690565b600260005403610c4b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161060d565b600260005560cb54600114610c8b5760405162461bcd60e51b815260206004820152600660248201526510db1bdcd95960d21b604482015260640161060d565b6001610c978380612bc2565b610ca8906040810190602001612bfb565b6001811115610cb957610cb9612bac565b14610cc357600080fd5b6000610d14610cd28480612bc2565b60d26000610ce08780612bc2565b610cee90602081019061274e565b6001600160a01b03166001600160a01b03168152602001908152602001600020546116a8565b90506000610d25610cd28480612bc2565b9050610d3a610d348580612bc2565b836117e9565b610d845760405162461bcd60e51b815260206004820152601b60248201527a53656c6c2068617320696e76616c696420706172616d657465727360281b604482015260640161060d565b610d97610d918480612bc2565b826117e9565b610de05760405162461bcd60e51b815260206004820152601a6024820152794275792068617320696e76616c696420706172616d657465727360301b604482015260640161060d565b610dea8483611841565b610e325760405162461bcd60e51b815260206004820152601960248201527829b2b636103330b4b632b21030baba3437b934bd30ba34b7b760391b604482015260640161060d565b610e3c8382611841565b610e835760405162461bcd60e51b8152602060048201526018602482015277213abc903330b4b632b21030baba3437b934bd30ba34b7b760411b604482015260640161060d565b6000808080610ea4610e958980612bc2565b610e9f8980612bc2565b61198a565b60cd54939750919550935091506000906001600160a01b0316636ef91c72610ecc8b80612bc2565b610edd90608081019060600161274e565b610ee78c80612bc2565b60800135610ef58d80612bc2565b610f0490610140810190612c18565b6040518563ffffffff1660e01b8152600401610f239493929190612cd9565b600060405180830381865afa158015610f40573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f689190810190612d24565b9050610fbf610f778a80612bc2565b610f8590602081019061274e565b610f8f8a80612bc2565b610f9d90602081019061274e565b610fa78c80612bc2565b610fb89060e081019060c00161274e565b8489611c43565b611015610fcc8a80612bc2565b610fdd90608081019060600161274e565b610fe78b80612bc2565b610ff590602081019061274e565b610fff8b80612bc2565b61100d90602081019061274e565b878787611c81565b600087815260d160205260408082208054600160ff199182168117909255898452919092208054909116909117905561104e8880612bc2565b610100013561105d8a80612bc2565b610100013511611084576110718880612bc2565b61107f90602081019061274e565b61109c565b61108e8980612bc2565b61109c90602081019061274e565b6001600160a01b03166110af8980612bc2565b61010001356110be8b80612bc2565b610100013511156110e6576110d38980612bc2565b6110e190602081019061274e565b6110fe565b6110f08a80612bc2565b6110fe90602081019061274e565b6001600160a01b03167f61cbb2a3dee0b6064c2e681aadd61677fb4ef319f0b547508d495626f5a62f646111328c80612bc2565b8a61113d8d80612bc2565b8b60405161114e9493929190612fcf565b60405180910390a35050600160005550505050505050565b60005b60ff81168211156111b05761119e83838360ff1681811061118c5761118c61300c565b90506020028101906105919190612bc2565b806111a881613022565b915050611169565b505050565b6111bd61138d565b6001600160a01b0381166111e35760405162461bcd60e51b815260040161060d90612abb565b60ce80546001600160a01b0319166001600160a01b0383169081179091556040517fdbe18f3fd927cc2aefe380ffd2abfdb8e13f0239c0258ccfc84c3d8fdd8c041891610662916127df565b61123761138d565b6001600160a01b03811661129c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161060d565b61073281611656565b6112b2602082018261274e565b6001600160a01b0316336001600160a01b0316146112cf57600080fd5b60006112e58260d283610cee602084018461274e565b600081815260d1602052604090205490915060ff166109fe57600081815260d1602052604090819020805460ff19166001179055517f5152abf959f6564662358c2e52b702259b78bac5ee7842a0f01937e670efcc7d906113499083815260200190565b60405180910390a15050565b61135d61138d565b600160cb556040517fd1dcd00534373f20882b79e6ab6875a5c358c5bd576448757ed50e63069ab51890600090a1565b33611396610bea565b6001600160a01b031614610b6e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161060d565b600080516020613550833981519152546001600160a01b031690565b61073261138d565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611443576111b083611def565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561149d575060408051601f3d908101601f1916820190925261149a91810190613041565b60015b6115005760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b606482015260840161060d565b600080516020613550833981519152811461156f5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b606482015260840161060d565b506111b0838383611e89565b6001600160a01b03163b151590565b600254610100900460ff166115b15760405162461bcd60e51b815260040161060d9061305a565b610b6e611eb4565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f826000015180519060200120836020015180519060200120846040015185606001516040516020016116399594939291909485526020850193909352604084019190915260608301526001600160a01b0316608082015260a00190565b604051602081830303815290604052805190602001209050919050565b603580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60007f376bfbc394a7ba7fdf10f224572cef371358e3053e362f4554fcd2ad56329b3f6116d8602085018561274e565b6116e86040860160208701612bfb565b6116f8606087016040880161274e565b611708608088016060890161274e565b608088013560a089013561172260e08b0160c08c0161274e565b8a60e001358b61010001358c610120013561174c8e8061014001906117479190612c18565b611ee4565b8e61016001358f80610180019061176391906130a5565b6040516117719291906130eb565b6040519081900381206117939e9d9c9b9a9998979695949392916020016130fb565b60408051601f1981840301815282825260208301859052910160408051601f19818403018152908290526117ca929160200161318e565b6040516020818303038152906040528051906020012090505b92915050565b6000806117f9602085018561274e565b6001600160a01b03161415801561181f5750600082815260d1602052604090205460ff16155b801561183a575061183a836101000135846101200135611fb6565b9392505050565b60003361184e8480612bc2565b61185c90602081019061274e565b6001600160a01b031603611872575060016117e3565b6118ca826118808580612bc2565b61188e90602081019061274e565b61189e60408701602088016131ce565b604087013560608801356118b860c08a0160a08b01612bfb565b6118c560808b018b6130a5565b611fd2565b6118d6575060006117e3565b6118e08380612bc2565b61012001356000036119815760d0546118fd60c0850135436131e9565b1061194a5760405162461bcd60e51b815260206004820181905260248201527f5369676e656420626c6f636b206e756d626572206f7574206f662072616e6765604482015260640161060d565b6119758261195e60c0860160a08701612bfb565b61196b60808701876130a5565b8760c001356120e0565b611981575060006117e3565b50600192915050565b600080600080600085610100013587610100013511611acc5760ce546001600160a01b031663874516cd6119c460608a0160408b0161274e565b6040518263ffffffff1660e01b81526004016119e091906127df565b602060405180830381865afa1580156119fd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a21919061320c565b611a3d5760405162461bcd60e51b815260040161060d90613227565b611a4d606088016040890161274e565b6001600160a01b031663d5ec8c7788886040518363ffffffff1660e01b8152600401611a7a92919061325a565b60a060405180830381865afa158015611a97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611abb9190613288565b929850909650945092509050611bf1565b60ce546001600160a01b031663874516cd611aed6060890160408a0161274e565b6040518263ffffffff1660e01b8152600401611b0991906127df565b602060405180830381865afa158015611b26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b4a919061320c565b611b665760405162461bcd60e51b815260040161060d90613227565b611b76606087016040880161274e565b6001600160a01b0316630813a76687896040518363ffffffff1660e01b8152600401611ba392919061325a565b60a060405180830381865afa158015611bc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611be49190613288565b9298509096509450925090505b80611c395760405162461bcd60e51b815260206004820152601860248201527713dc99195c9cc818d85b9b9bdd081899481b585d18da195960421b604482015260640161060d565b5092959194509250565b6001600160a01b038316611c5d57803414611c5d57600080fd5b6000611c6b83858785612170565b9050611c798486888461228d565b505050505050565b853b611ccb5760405162461bcd60e51b815260206004820152601960248201527810dbdb1b1958dd1a5bdb88191bd95cc81b9bdd08195e1a5cdd603a1b604482015260640161060d565b6000816001811115611cdf57611cdf612bac565b03611d515760cd54604051633c4fc9fb60e11b81526001600160a01b039091169063789f93f690611d1a9089908990899089906004016132dc565b600060405180830381600087803b158015611d3457600080fd5b505af1158015611d48573d6000803e3d6000fd5b50505050611c79565b6001816001811115611d6557611d65612bac565b03611c795760cd54604051633a54a01760e11b81526001600160a01b038881166004830152878116602483015286811660448301526064820186905260848201859052909116906374a9402e9060a401600060405180830381600087803b158015611dcf57600080fd5b505af1158015611de3573d6000803e3d6000fd5b50505050505050505050565b611df88161157b565b611e5a5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840161060d565b60008051602061355083398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b611e92836123b0565b600082511180611e9f5750805b156111b057611eae83836123f0565b50505050565b600254610100900460ff16611edb5760405162461bcd60e51b815260040161060d9061305a565b610b6e33611656565b600080826001600160401b03811115611eff57611eff612863565b604051908082528060200260200182016040528015611f28578160200160208202803683370190505b50905060005b83811015611f8557611f56858583818110611f4b57611f4b61300c565b905060400201612415565b828281518110611f6857611f6861300c565b602090810291909101015280611f7d81613306565b915050611f2e565b5080604051602001611f97919061331f565b6040516020818303038152906040528051906020012091505092915050565b6000428310801561183a575081158061183a5750504210919050565b60008080856001811115611fe857611fe8612bac565b03611ffd57611ff68a612485565b90506120b2565b600185600181111561201157612011612bac565b036120b2576000612024848601866133bb565b9050600073__$ed053d8b3899615c4626b1ae19704d37b7$__639c7bf9388d846040518363ffffffff1660e01b81526004016120619291906133ef565b602060405180830381865af415801561207e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120a29190613041565b90506120ad8161249c565b925050505b886001600160a01b03166120c8828a8a8a6124fd565b6001600160a01b0316149a9950505050505050505050565b6000806120ed87846125bd565b9050600080808089600181111561210657612106612bac565b03612123576121178789018961343d565b91945092509050612158565b600189600181111561213757612137612bac565b03612158576000808061214c8a8c018c613470565b91985096509450505050505b60cf546001600160a01b03166120c8858585856124fd565b600080805b86518160ff16101561220e576000612710888360ff168151811061219b5761219b61300c565b60200260200101516000015161ffff16866121b691906134cc565b6121c091906134e3565b90506121ee87878a8560ff16815181106121dc576121dc61300c565b6020026020010151602001518461228d565b6121f88184612b99565b925050808061220690613022565b915050612175565b50828111156122745760405162461bcd60e51b815260206004820152602c60248201527f546f74616c20616d6f756e74206f66206665657320617265206d6f726520746860448201526b616e2074686520707269636560a01b606482015260840161060d565b600061228082856131e9565b925050505b949350505050565b8015611eae576001600160a01b0384166122dd576040516001600160a01b0383169082156108fc029083906000818181858888f193505050501580156122d7573d6000803e3d6000fd5b50611eae565b60cc546001600160a01b03908116908516036123705760cd5460cc5460405163368fa33960e21b81526001600160a01b039283169263da3e8ce49261232d929116908790879087906004016132dc565b6020604051808303816000875af115801561234c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122d7919061320c565b60405162461bcd60e51b815260206004820152601560248201527424b73b30b634b2103830bcb6b2b73a103a37b5b2b760591b604482015260640161060d565b6123b981611def565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b606061183a838360405180606001604052806027815260200161357060279139612625565b60007f05b43f730f67de334a342883f867101fc7ef3361dfdff4a29a7aa97e0920ef7a6124456020840184613505565b612455604085016020860161274e565b6040516020016116399392919092835261ffff9190911660208301526001600160a01b0316604082015260600190565b600060015482604051602001611639929190613522565b600154604080517f5bcf4b2eaff7fcdeb49f0bda53026b9ebdd93db566fe4c447125cb899e598c9060208201529081018390526000919060600160405160208183030381529060405280519060200120604051602001611639929190613522565b60008360ff16601b148061251457508360ff16601c145b6125565760405162461bcd60e51b815260206004820152601360248201527224b73b30b634b2103b103830b930b6b2ba32b960691b604482015260640161060d565b60408051600081526020810180835287905260ff861691810191909152606081018490526080810183905260019060a0016020604051602081039080840390855afa1580156125a9573d6000803e3d6000fd5b5050604051601f1901519695505050505050565b600154604080517fd71080023d2f293ed0723dc287d6b2d4e7d27d0b6c12928e300721b7c78c748560208201529081018490526060810183905260009190608001604051602081830303815290604052805190602001206040516020016117ca929190613522565b6060600080856001600160a01b031685604051612642919061353d565b600060405180830381855af49150503d806000811461267d576040519150601f19603f3d011682016040523d82523d6000602084013e612682565b606091505b50915091506126938683838761269d565b9695505050505050565b6060831561270a578251600003612703576126b78561157b565b6127035760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161060d565b5081612285565b612285838381511561271f5781518083602001fd5b8060405162461bcd60e51b815260040161060d919061278f565b6001600160a01b038116811461073257600080fd5b60006020828403121561276057600080fd5b813561183a81612739565b60005b8381101561278657818101518382015260200161276e565b50506000910152565b60208152600082518060208401526127ae81604085016020870161276b565b601f01601f19169190910160400192915050565b80356127cd81612739565b919050565b6001600160a01b03169052565b6001600160a01b0391909116815260200190565b60008060008060008060c0878903121561280c57600080fd5b86359550602087013561281e81612739565b9450604087013561282e81612739565b9350606087013561283e81612739565b9250608087013561284e81612739565b8092505060a087013590509295509295509295565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b038111828210171561289b5761289b612863565b60405290565b604051601f8201601f191681016001600160401b03811182821017156128c9576128c9612863565b604052919050565b600080604083850312156128e457600080fd5b82356128ef81612739565b91506020838101356001600160401b038082111561290c57600080fd5b818601915086601f83011261292057600080fd5b81358181111561293257612932612863565b612944601f8201601f191685016128a1565b9150808252878482850101111561295a57600080fd5b80848401858401376000848284010152508093505050509250929050565b60006020828403121561298a57600080fd5b5035919050565b600060e082840312156129a357600080fd5b50919050565b600080604083850312156129bc57600080fd5b82356001600160401b03808211156129d357600080fd5b6129df86838701612991565b935060208501359150808211156129f557600080fd5b50612a0285828601612991565b9150509250929050565b60008060208385031215612a1f57600080fd5b82356001600160401b0380821115612a3657600080fd5b818501915085601f830112612a4a57600080fd5b813581811115612a5957600080fd5b8660208260051b8501011115612a6e57600080fd5b60209290920196919550909350505050565b600060208284031215612a9257600080fd5b81356001600160401b03811115612aa857600080fd5b82016101a0818503121561183a57600080fd5b602080825260169082015275416464726573732063616e6e6f74206265207a65726f60501b604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b808201808211156117e3576117e3612b83565b634e487b7160e01b600052602160045260246000fd5b6000823561019e19833603018112612bd957600080fd5b9190910192915050565b6002811061073257600080fd5b80356127cd81612be3565b600060208284031215612c0d57600080fd5b813561183a81612be3565b6000808335601e19843603018112612c2f57600080fd5b8301803591506001600160401b03821115612c4957600080fd5b6020019150600681901b3603821315612c6157600080fd5b9250929050565b61ffff8116811461073257600080fd5b8183526000602080850194508260005b85811015612cce578135612c9b81612c68565b61ffff16875281830135612cae81612739565b6001600160a01b0316878401526040968701969190910190600101612c88565b509495945050505050565b60018060a01b0385168152836020820152606060408201526000612693606083018486612c78565b60006001600160401b03821115612d1a57612d1a612863565b5060051b60200190565b60006020808385031215612d3757600080fd5b82516001600160401b03811115612d4d57600080fd5b8301601f81018513612d5e57600080fd5b8051612d71612d6c82612d01565b6128a1565b81815260069190911b82018301908381019087831115612d9057600080fd5b928401925b82841015612de65760408489031215612dae5760008081fd5b612db6612879565b8451612dc181612c68565b815284860151612dd081612739565b8187015282526040939093019290840190612d95565b979650505050505050565b60028110612e0f57634e487b7160e01b600052602160045260246000fd5b9052565b6000808335601e19843603018112612e2a57600080fd5b83016020810192503590506001600160401b03811115612e4957600080fd5b8060061b3603821315612c6157600080fd5b6000808335601e19843603018112612e7257600080fd5b83016020810192503590506001600160401b03811115612e9157600080fd5b803603821315612c6157600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60006101a0612ee084612edb856127c2565b6127d2565b612eec60208401612bf0565b612ef96020860182612df1565b50612f06604084016127c2565b612f1360408601826127d2565b50612f20606084016127c2565b612f2d60608601826127d2565b506080830135608085015260a083013560a0850152612f4e60c084016127c2565b612f5b60c08601826127d2565b5060e0838101359085015261010080840135908501526101208084013590850152610140612f8b81850185612e13565b8383880152612f9d8488018284612c78565b9350505050610160808401358186015250610180612fbd81850185612e5b565b86840383880152612de6848284612ea0565b608081526000612fe26080830187612ec9565b8560208401528281036040840152612ffa8186612ec9565b91505082606083015295945050505050565b634e487b7160e01b600052603260045260246000fd5b600060ff821660ff810361303857613038612b83565b60010192915050565b60006020828403121561305357600080fd5b5051919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000808335601e198436030181126130bc57600080fd5b8301803591506001600160401b038211156130d657600080fd5b602001915036819003821315612c6157600080fd5b8183823760009101908152919050565b8e81526001600160a01b038e1660208201526101c0810161311f604083018f612df1565b6001600160a01b038d811660608401528c16608083015260a082018b905260c082018a905261315160e083018a6127d2565b8761010083015286610120830152856101408301528461016083015283610180830152826101a08301529f9e505050505050505050505050505050565b600083516131a081846020880161276b565b8351908301906131b481836020880161276b565b01949350505050565b803560ff811681146127cd57600080fd5b6000602082840312156131e057600080fd5b61183a826131bd565b818103818111156117e3576117e3612b83565b805180151581146127cd57600080fd5b60006020828403121561321e57600080fd5b61183a826131fc565b602080825260199082015278141bdb1a58de481a5cc81b9bdd081dda1a5d195b1a5cdd1959603a1b604082015260600190565b60408152600061326d6040830185612ec9565b828103602084015261327f8185612ec9565b95945050505050565b600080600080600060a086880312156132a057600080fd5b6132a9866131fc565b945060208601519350604086015192506060860151915060808601516132ce81612be3565b809150509295509295909350565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b60006001820161331857613318612b83565b5060010190565b815160009082906020808601845b838110156133495781518552938201939082019060010161332d565b50929695505050505050565b600082601f83011261336657600080fd5b81356020613376612d6c83612d01565b82815260059290921b8401810191818101908684111561339557600080fd5b8286015b848110156133b05780358352918301918301613399565b509695505050505050565b6000602082840312156133cd57600080fd5b81356001600160401b038111156133e357600080fd5b61228584828501613355565b6000604082018483526020604081850152818551808452606086019150828701935060005b8181101561343057845183529383019391830191600101613414565b5090979650505050505050565b60008060006060848603121561345257600080fd5b61345b846131bd565b95602085013595506040909401359392505050565b6000806000806080858703121561348657600080fd5b84356001600160401b0381111561349c57600080fd5b6134a887828801613355565b9450506134b7602086016131bd565b93969395505050506040820135916060013590565b80820281158282048414176117e3576117e3612b83565b60008261350057634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561351757600080fd5b813561183a81612c68565b61190160f01b81526002810192909252602282015260420190565b60008251612bd981846020870161276b56fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a164736f6c6343000813000a",
  "libraries": {
    "MerkleVerifier": "0x75176B164941B463B46E619BE08083b1bE672270"
  },
  "devdoc": {
    "details": "Core marketplace contract",
    "events": {
      "AdminChanged(address,address)": {
        "details": "Emitted when the admin account has changed."
      },
      "BeaconUpgraded(address)": {
        "details": "Emitted when the beacon is changed."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "cancelOrder((address,uint8,address,address,uint256,uint256,address,uint256,uint256,uint256,(uint16,address)[],uint256,bytes))": {
        "details": "Cancel an order, preventing it from being matched. Must be called by the trader of the order",
        "params": {
          "order": "Order to cancel"
        }
      },
      "cancelOrders((address,uint8,address,address,uint256,uint256,address,uint256,uint256,uint256,(uint16,address)[],uint256,bytes)[])": {
        "details": "Cancel multiple orders",
        "params": {
          "orders": "Orders to cancel"
        }
      },
      "execute(((address,uint8,address,address,uint256,uint256,address,uint256,uint256,uint256,(uint16,address)[],uint256,bytes),uint8,bytes32,bytes32,bytes,uint8,uint256),((address,uint8,address,address,uint256,uint256,address,uint256,uint256,uint256,(uint16,address)[],uint256,bytes),uint8,bytes32,bytes32,bytes,uint8,uint256))": {
        "details": "Match two orders, ensuring validity of the match, and execute all associated state transitions. Protected against reentrancy by a contract-global lock.",
        "params": {
          "buy": "Buy input",
          "sell": "Sell input"
        }
      },
      "incrementNonce()": {
        "details": "Cancel all current orders for a user, preventing them from being matched. Must be called by the trader of the order"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeTo(address)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "title": "Marketplace",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14913,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 14562,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "DOMAIN_SEPARATOR",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 503,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "_initialized",
        "offset": 0,
        "slot": "2",
        "type": "t_uint8"
      },
      {
        "astId": 506,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "_initializing",
        "offset": 1,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 1172,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "__gap",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "_owner",
        "offset": 0,
        "slot": "53",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "__gap",
        "offset": 0,
        "slot": "54",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 485,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "__gap",
        "offset": 0,
        "slot": "103",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 800,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "__gap",
        "offset": 0,
        "slot": "153",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10260,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "isOpen",
        "offset": 0,
        "slot": "203",
        "type": "t_uint256"
      },
      {
        "astId": 10321,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "weth",
        "offset": 0,
        "slot": "204",
        "type": "t_address"
      },
      {
        "astId": 10324,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "executionDelegate",
        "offset": 0,
        "slot": "205",
        "type": "t_contract(IExecutionDelegate)14353"
      },
      {
        "astId": 10327,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "policyManager",
        "offset": 0,
        "slot": "206",
        "type": "t_contract(IPolicyManager)14520"
      },
      {
        "astId": 10329,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "oracle",
        "offset": 0,
        "slot": "207",
        "type": "t_address"
      },
      {
        "astId": 10331,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "blockRange",
        "offset": 0,
        "slot": "208",
        "type": "t_uint256"
      },
      {
        "astId": 10335,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "cancelledOrFilled",
        "offset": 0,
        "slot": "209",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 10339,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "nonces",
        "offset": 0,
        "slot": "210",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IExecutionDelegate)14353": {
        "encoding": "inplace",
        "label": "contract IExecutionDelegate",
        "numberOfBytes": "20"
      },
      "t_contract(IPolicyManager)14520": {
        "encoding": "inplace",
        "label": "contract IPolicyManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}