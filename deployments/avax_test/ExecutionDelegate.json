{
  "address": "0x0407445e15bABDD04046d26fC5894A5B5eaaDBB9",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_contract",
          "type": "address"
        }
      ],
      "name": "ApproveContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_contract",
          "type": "address"
        }
      ],
      "name": "DenyContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "GrantApproval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "rate",
              "type": "uint16"
            },
            {
              "internalType": "address payable",
              "name": "recipient",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct Fee[]",
          "name": "fees",
          "type": "tuple[]"
        }
      ],
      "name": "NewBaseFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "RevokeApproval",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "rate",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            }
          ],
          "internalType": "struct Sig",
          "name": "sig",
          "type": "tuple"
        }
      ],
      "name": "addBaseFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contract",
          "type": "address"
        }
      ],
      "name": "approveContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "baseFee",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "rate",
          "type": "uint16"
        },
        {
          "internalType": "address payable",
          "name": "recipient",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "rate",
              "type": "uint16"
            },
            {
              "internalType": "address payable",
              "name": "recipient",
              "type": "address"
            }
          ],
          "internalType": "struct Fee[]",
          "name": "_fees",
          "type": "tuple[]"
        }
      ],
      "name": "calcuateFee",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "rate",
              "type": "uint16"
            },
            {
              "internalType": "address payable",
              "name": "recipient",
              "type": "address"
            }
          ],
          "internalType": "struct Fee[]",
          "name": "fees",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "contracts",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contract",
          "type": "address"
        }
      ],
      "name": "denyContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "grantApproval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revokeApproval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "revokedApproval",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferERC1155",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferERC20",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferERC721",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferERC721Unsafe",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "rate",
              "type": "uint16"
            },
            {
              "internalType": "address payable",
              "name": "recipient",
              "type": "address"
            }
          ],
          "internalType": "struct Fee[]",
          "name": "fees",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            }
          ],
          "internalType": "struct Sig",
          "name": "sig",
          "type": "tuple"
        }
      ],
      "name": "updateBaseFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x63292a38c3ba4f9f1fac4c248e58a57c62d261d7b9fd2610cb9cd4226ba84a84",
  "receipt": {
    "to": null,
    "from": "0xf5CA36c9873d61Bc28C117BD470981Ef6647A685",
    "contractAddress": "0x0407445e15bABDD04046d26fC5894A5B5eaaDBB9",
    "transactionIndex": 1,
    "gasUsed": "1310748",
    "logsBloom": "0x
    "blockHash": "0xa6c813ddd07de09111068d8b9a3a83deae6f0e89cb7976024f603d3068c97992",
    "transactionHash": "0x63292a38c3ba4f9f1fac4c248e58a57c62d261d7b9fd2610cb9cd4226ba84a84",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 24949631,
        "transactionHash": "0x63292a38c3ba4f9f1fac4c248e58a57c62d261d7b9fd2610cb9cd4226ba84a84",
        "address": "0x0407445e15bABDD04046d26fC5894A5B5eaaDBB9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f5ca36c9873d61bc28c117bd470981ef6647a685"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0xa6c813ddd07de09111068d8b9a3a83deae6f0e89cb7976024f603d3068c97992"
      }
    ],
    "blockNumber": 24949631,
    "cumulativeGasUsed": "1435545",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "a8021123419fce83584341f7ad830edc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"ApproveContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"DenyContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"GrantApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"rate\",\"type\":\"uint16\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct Fee[]\",\"name\":\"fees\",\"type\":\"tuple[]\"}],\"name\":\"NewBaseFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"RevokeApproval\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"rate\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"internalType\":\"struct Sig\",\"name\":\"sig\",\"type\":\"tuple\"}],\"name\":\"addBaseFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"approveContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"baseFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"rate\",\"type\":\"uint16\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"rate\",\"type\":\"uint16\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct Fee[]\",\"name\":\"_fees\",\"type\":\"tuple[]\"}],\"name\":\"calcuateFee\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"rate\",\"type\":\"uint16\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct Fee[]\",\"name\":\"fees\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"contracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"denyContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"grantApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revokeApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"revokedApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferERC20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferERC721Unsafe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"rate\",\"type\":\"uint16\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct Fee[]\",\"name\":\"fees\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"internalType\":\"struct Sig\",\"name\":\"sig\",\"type\":\"tuple\"}],\"name\":\"updateBaseFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Proxy contract to manage user token approvals\",\"kind\":\"dev\",\"methods\":{\"addBaseFee(uint16,address,(bytes32,bytes32,uint8))\":{\"details\":\"update base fees\",\"params\":{\"rate\":\"fees rate to add\",\"receiver\":\"receiver of fee to add\"}},\"approveContract(address)\":{\"details\":\"Approve contract to call transfer functions\",\"params\":{\"_contract\":\"address of contract to approve\"}},\"calcuateFee(address,uint256,(uint16,address)[])\":{\"details\":\"caculates fee\",\"params\":{\"_collection\":\"collection address\",\"_fees\":\"requesting fee\",\"_tokenId\":\"id of token\"},\"returns\":{\"fees\":\"cauculated fee\"}},\"denyContract(address)\":{\"details\":\"Revoke approval of contract to call transfer functions\",\"params\":{\"_contract\":\"address of contract to revoke approval\"}},\"grantApproval()\":{\"details\":\"Allow contract to make transfers on-behalf of a specific user\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"revokeApproval()\":{\"details\":\"Block contract from making transfers on-behalf of a specific user\"},\"transferERC1155(address,address,address,uint256,uint256)\":{\"details\":\"Transfer ERC1155 token using `safeTransferFrom`\",\"params\":{\"amount\":\"amount\",\"collection\":\"address of the collection\",\"from\":\"address of the sender\",\"to\":\"address of the recipient\",\"tokenId\":\"tokenId\"}},\"transferERC20(address,address,address,uint256)\":{\"details\":\"Transfer ERC20 token\",\"params\":{\"amount\":\"amount\",\"from\":\"address of the sender\",\"to\":\"address of the recipient\",\"token\":\"address of the token\"}},\"transferERC721(address,address,address,uint256)\":{\"details\":\"Transfer ERC721 token using `safeTransferFrom`\",\"params\":{\"collection\":\"address of the collection\",\"from\":\"address of the sender\",\"to\":\"address of the recipient\",\"tokenId\":\"tokenId\"}},\"transferERC721Unsafe(address,address,address,uint256)\":{\"details\":\"Transfer ERC721 token using `transferFrom`\",\"params\":{\"collection\":\"address of the collection\",\"from\":\"address of the sender\",\"to\":\"address of the recipient\",\"tokenId\":\"tokenId\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateBaseFee((uint16,address)[],(bytes32,bytes32,uint8))\":{\"details\":\"update base fees\",\"params\":{\"fees\":\"fees to update\"}}},\"title\":\"ExecutionDelegate\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ExecutionDelegate.sol\":\"ExecutionDelegate\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x3976825a61df20457730b79ad0ac9c8908e3c7978ed9bf090c67137c91256b5c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcab667ddad478ff0d39c2053ca77fac778af8483c18ab07d810277b4216fd582\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/ExecutionDelegate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\nimport {IERC2981} from \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\n\\nimport {IExecutionDelegate} from \\\"./interfaces/IExecutionDelegate.sol\\\";\\nimport {Fee, Sig} from \\\"./libraries/Structs.sol\\\";\\n\\n/**\\n * @title ExecutionDelegate\\n * @dev Proxy contract to manage user token approvals\\n */\\ncontract ExecutionDelegate is IExecutionDelegate, Ownable {\\n  mapping(address => bool) public contracts;\\n  mapping(address => bool) public revokedApproval;\\n  mapping(address => uint256) public nonce;\\n  Fee[] public baseFee;\\n\\n  modifier approvedContract() {\\n    require(contracts[msg.sender], \\\"Contract is not approved to make transfers\\\");\\n    _;\\n  }\\n\\n  event ApproveContract(address indexed _contract);\\n  event DenyContract(address indexed _contract);\\n\\n  event RevokeApproval(address indexed user);\\n  event GrantApproval(address indexed user);\\n  event NewBaseFee(Fee[] fees);\\n\\n  modifier onlySuperAdmin(Sig calldata sig) {\\n    require(_validateSign(sig), \\\"Owner sign is invalide\\\");\\n    nonce[_msgSender()]++;\\n    _;\\n  }\\n\\n  /**\\n   * @dev Approve contract to call transfer functions\\n   * @param _contract address of contract to approve\\n   */\\n  function approveContract(address _contract) external onlyOwner {\\n    contracts[_contract] = true;\\n    emit ApproveContract(_contract);\\n  }\\n\\n  /**\\n   * @dev Revoke approval of contract to call transfer functions\\n   * @param _contract address of contract to revoke approval\\n   */\\n  function denyContract(address _contract) external onlyOwner {\\n    contracts[_contract] = false;\\n    emit DenyContract(_contract);\\n  }\\n\\n  /**\\n   * @dev Block contract from making transfers on-behalf of a specific user\\n   */\\n  function revokeApproval() external {\\n    revokedApproval[msg.sender] = true;\\n    emit RevokeApproval(msg.sender);\\n  }\\n\\n  /**\\n   * @dev Allow contract to make transfers on-behalf of a specific user\\n   */\\n  function grantApproval() external {\\n    revokedApproval[msg.sender] = false;\\n    emit GrantApproval(msg.sender);\\n  }\\n\\n  /**\\n   * @dev Transfer ERC721 token using `transferFrom`\\n   * @param collection address of the collection\\n   * @param from address of the sender\\n   * @param to address of the recipient\\n   * @param tokenId tokenId\\n   */\\n  function transferERC721Unsafe(\\n    address collection,\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) external approvedContract {\\n    require(revokedApproval[from] == false, \\\"User has revoked approval\\\");\\n    IERC721(collection).transferFrom(from, to, tokenId);\\n  }\\n\\n  /**\\n   * @dev Transfer ERC721 token using `safeTransferFrom`\\n   * @param collection address of the collection\\n   * @param from address of the sender\\n   * @param to address of the recipient\\n   * @param tokenId tokenId\\n   */\\n  function transferERC721(\\n    address collection,\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) external approvedContract {\\n    require(revokedApproval[from] == false, \\\"User has revoked approval\\\");\\n    IERC721(collection).safeTransferFrom(from, to, tokenId);\\n  }\\n\\n  /**\\n   * @dev Transfer ERC1155 token using `safeTransferFrom`\\n   * @param collection address of the collection\\n   * @param from address of the sender\\n   * @param to address of the recipient\\n   * @param tokenId tokenId\\n   * @param amount amount\\n   */\\n  function transferERC1155(\\n    address collection,\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    uint256 amount\\n  ) external approvedContract {\\n    require(revokedApproval[from] == false, \\\"User has revoked approval\\\");\\n    IERC1155(collection).safeTransferFrom(from, to, tokenId, amount, \\\"\\\");\\n  }\\n\\n  /**\\n   * @dev Transfer ERC20 token\\n   * @param token address of the token\\n   * @param from address of the sender\\n   * @param to address of the recipient\\n   * @param amount amount\\n   */\\n  function transferERC20(\\n    address token,\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external approvedContract returns (bool) {\\n    require(revokedApproval[from] == false, \\\"User has revoked approval\\\");\\n    return IERC20(token).transferFrom(from, to, amount);\\n  }\\n\\n  //////////////////\\n  // fee calculator logic\\n  /**\\n   * @dev caculates fee\\n   * @param _collection collection address\\n   * @param _fees requesting fee\\n   * @param _tokenId id of token\\n   * @return fees cauculated fee\\n   */\\n  function calcuateFee(\\n    address _collection,\\n    uint256 _tokenId,\\n    Fee[] calldata _fees\\n  ) external view returns (Fee[] memory fees) {\\n    fees = new Fee[](0);\\n    if (IERC165(_collection).supportsInterface(type(IERC2981).interfaceId)) {\\n      fees = new Fee[](_fees.length + baseFee.length + 1);\\n      (address receiver, uint256 royaltyAmount) = IERC2981(_collection).royaltyInfo(\\n        _tokenId,\\n        10000\\n      );\\n      fees[0] = Fee({recipient: payable(receiver), rate: uint16(royaltyAmount)});\\n      for (uint256 i = 0; i < _fees.length; i++) {\\n        fees[i + 1] = _fees[i];\\n      }\\n      for (uint256 i = 0; i < baseFee.length; i++) {\\n        fees[i + _fees.length + 1] = baseFee[i];\\n      }\\n    } else {\\n      fees = new Fee[](_fees.length + baseFee.length + 1);\\n      for (uint256 i = 0; i < _fees.length; i++) {\\n        fees[i] = _fees[i];\\n      }\\n      for (uint256 i = 0; i < baseFee.length; i++) {\\n        fees[i + _fees.length] = baseFee[i];\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev update base fees\\n   * @param fees fees to update\\n   */\\n  function updateBaseFee(Fee[] calldata fees, Sig calldata sig) external onlySuperAdmin(sig) {\\n    delete baseFee;\\n    for (uint256 i = 0; i < fees.length; i++) {\\n      baseFee.push(fees[i]);\\n    }\\n\\n    emit NewBaseFee(fees);\\n  }\\n\\n  /**\\n   * @dev update base fees\\n   * @param rate fees rate to add\\n   * @param receiver receiver of fee to add\\n   */\\n  function addBaseFee(\\n    uint16 rate,\\n    address receiver,\\n    Sig calldata sig\\n  ) external onlySuperAdmin(sig) {\\n    Fee memory newFee = Fee({recipient: payable(receiver), rate: rate});\\n    baseFee.push(newFee);\\n\\n    emit NewBaseFee(baseFee);\\n  }\\n\\n  /**\\n   * @dev validate signature of contract owner\\n   * @param sig sign of owner\\n   */\\n  function _validateSign(Sig calldata sig) private view returns (bool) {\\n    bytes32 messageHash = keccak256(abi.encodePacked(_msgSender(), nonce[_msgSender()]));\\n\\n    bytes32 ethSignedMessageHash = keccak256(\\n      abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", messageHash)\\n    );\\n\\n    return owner() == ecrecover(ethSignedMessageHash, sig.v, sig.r, sig.s);\\n  }\\n}\\n\",\"keccak256\":\"0xb204e44ea9daca9317ce5e8a76822ef5c2435fdfd0a9287f4b9c96d558023fb0\",\"license\":\"MIT\"},\"contracts/interfaces/IExecutionDelegate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Fee} from \\\"../libraries/Structs.sol\\\";\\n\\ninterface IExecutionDelegate {\\n  function contracts(address to) external view returns (bool);\\n\\n  function approveContract(address _contract) external;\\n\\n  function denyContract(address _contract) external;\\n\\n  function revokeApproval() external;\\n\\n  function grantApproval() external;\\n\\n  function transferERC721Unsafe(\\n    address collection,\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) external;\\n\\n  function transferERC721(address collection, address from, address to, uint256 tokenId) external;\\n\\n  function transferERC1155(\\n    address collection,\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    uint256 amount\\n  ) external;\\n\\n  function transferERC20(\\n    address token,\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  function calcuateFee(\\n    address _collection,\\n    uint256 _tokenId,\\n    Fee[] memory _fees\\n  ) external view returns (Fee[] memory fees);\\n}\\n\",\"keccak256\":\"0xa838c2ee545545e0962429def9882a01766e65e5854d0ddb4b000c5915b64883\",\"license\":\"MIT\"},\"contracts/libraries/Structs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nenum Side {\\n  Buy,\\n  Sell\\n}\\n\\nenum SignatureVersion {\\n  Single,\\n  Bulk\\n}\\n\\nenum AssetType {\\n  ERC721,\\n  ERC1155\\n}\\n\\nstruct Fee {\\n  uint16 rate;\\n  address payable recipient;\\n}\\n\\nstruct Order {\\n  address trader;\\n  Side side;\\n  address matchingPolicy;\\n  address collection;\\n  uint256 tokenId;\\n  uint256 amount;\\n  address paymentToken;\\n  uint256 price;\\n  uint256 listingTime;\\n  /* Order expiration timestamp - 0 for oracle cancellations. */\\n  uint256 expirationTime;\\n  Fee[] fees;\\n  uint256 salt;\\n  bytes extraParams;\\n}\\n\\nstruct Input {\\n  Order order;\\n  uint8 v;\\n  bytes32 r;\\n  bytes32 s;\\n  bytes extraSignature;\\n  SignatureVersion signatureVersion;\\n  uint256 blockNumber;\\n}\\n\\nstruct Auction {\\n  AssetType assetType;\\n  address collection;\\n  uint256 tokenId;\\n  address paymentToken;\\n  uint256 minPrice;\\n  address lastBidder;\\n  uint256 bidPrice;\\n  uint256 startTime;\\n  uint256 endTime;\\n  uint256 amount;\\n  address owner;\\n  Fee[] fees;\\n}\\n\\nstruct Sig {\\n  bytes32 r;\\n  bytes32 s;\\n  uint8 v;\\n}\\n\",\"keccak256\":\"0x24b612a27f49e9d14e13a993ad2a5afc34e9cf7a2818717f4e1c72005b1dd3e7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61164b8061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100e65760003560e01c806307f7aafb146100eb5780632a312fe3146101005780634a3e3a1f1461013a5780634e59053f1461016d5780636452e20a1461018057806369dc9ff3146101935780636ef91c72146101b657806370ae92d2146101d6578063715018a61461020457806374a9402e1461020c578063789f93f61461021f5780638da5cb5b1461023257806390d02b3c14610252578063a8034df11461025a578063b7e2077e14610262578063ca72da8e14610275578063da3e8ce414610288578063f2fde38b1461029b575b600080fd5b6100fe6100f9366004611066565b6102ae565b005b61011361010e36600461108a565b610305565b6040805161ffff90931683526001600160a01b039091166020830152015b60405180910390f35b61015d610148366004611066565b60026020526000908152604090205460ff1681565b6040519015158152602001610131565b6100fe61017b366004611106565b61033a565b6100fe61018e36600461116a565b610436565b61015d6101a1366004611066565b60016020526000908152604090205460ff1681565b6101c96101c43660046111a9565b610534565b6040516101319190611204565b6101f66101e4366004611066565b60036020526000908152604090205481565b604051908152602001610131565b6100fe61097a565b6100fe61021a366004611260565b61098e565b6100fe61022d3660046112bb565b610a7c565b61023a610b4c565b6040516001600160a01b039091168152602001610131565b6100fe610b5b565b6100fe610b9d565b6100fe610270366004611066565b610bdc565b6100fe6102833660046112bb565b610c2d565b61015d6102963660046112bb565b610cc5565b6100fe6102a9366004611066565b610da9565b6102b6610e22565b6001600160a01b0381166000818152600160208190526040808320805460ff1916909217909155517f283ffe02a14663588cf87ba17adbc21c9ce0d0cdb15655926bf2b987af3075fe9190a250565b6004818154811061031557600080fd5b60009182526020909120015461ffff811691506201000090046001600160a01b031682565b8061034481610e81565b6103695760405162461bcd60e51b81526004016103609061130c565b60405180910390fd5b33600090815260036020526040812080549161038483611352565b90915550610396905060046000610ff9565b60005b838110156103f65760048585838181106103b5576103b561136b565b835460018101855560009485526020909420604090910292909201929190910190506103e18282611381565b505080806103ee90611352565b915050610399565b507f3a08e273a52ce6fad29142988478aaf1351afec0a4e1f2ff42382ad0872713bf84846040516104289291906113d4565b60405180910390a150505050565b8061044081610e81565b61045c5760405162461bcd60e51b81526004016103609061130c565b33600090815260036020526040812080549161047783611352565b909155505060408051808201825261ffff80871682526001600160a01b038087166020840190815260048054600181018255600082905285517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b9091018054935190941662010000026001600160b01b0319909316941693909317179055915190917f3a08e273a52ce6fad29142988478aaf1351afec0a4e1f2ff42382ad0872713bf91610525919061143a565b60405180910390a15050505050565b60408051600080825260208201909252606091610567565b610554611017565b81526020019060019003908161054c5790505b506040516301ffc9a760e01b815263152a902d60e11b60048201529091506001600160a01b038616906301ffc9a790602401602060405180830381865afa1580156105b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105da91906114a5565b15610813576004546105ec90836114c7565b6105f79060016114c7565b6001600160401b0381111561060e5761060e61148f565b60405190808252806020026020018201604052801561064757816020015b610634611017565b81526020019060019003908161062c5790505b5060405163152a902d60e11b815260048101869052612710602482015290915060009081906001600160a01b03881690632a55205a906044016040805180830381865afa15801561069c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c091906114e0565b9150915060405180604001604052808261ffff168152602001836001600160a01b0316815250836000815181106106f9576106f961136b565b602002602001018190525060005b84811015610771578585828181106107215761072161136b565b905060400201803603810190610737919061150e565b846107438360016114c7565b815181106107535761075361136b565b6020026020010181905250808061076990611352565b915050610707565b5060005b60045481101561080b57600481815481106107925761079261136b565b60009182526020918290206040805180820190915291015461ffff811682526201000090046001600160a01b031691810191909152846107d287846114c7565b6107dd9060016114c7565b815181106107ed576107ed61136b565b6020026020010181905250808061080390611352565b915050610775565b505050610972565b60045461082090836114c7565b61082b9060016114c7565b6001600160401b038111156108425761084261148f565b60405190808252806020026020018201604052801561087b57816020015b610868611017565b8152602001906001900390816108605790505b50905060005b828110156108e15783838281811061089b5761089b61136b565b9050604002018036038101906108b1919061150e565b8282815181106108c3576108c361136b565b602002602001018190525080806108d990611352565b915050610881565b5060005b60045481101561097057600481815481106109025761090261136b565b60009182526020918290206040805180820190915291015461ffff811682526201000090046001600160a01b0316918101919091528261094285846114c7565b815181106109525761095261136b565b6020026020010181905250808061096890611352565b9150506108e5565b505b949350505050565b610982610e22565b61098c6000610fa9565b565b3360009081526001602052604090205460ff166109bd5760405162461bcd60e51b81526004016103609061157a565b6001600160a01b03841660009081526002602052604090205460ff16156109f65760405162461bcd60e51b8152600401610360906115c4565b604051637921219560e11b81526001600160a01b0385811660048301528481166024830152604482018490526064820183905260a06084830152600060a483015286169063f242432a9060c401600060405180830381600087803b158015610a5d57600080fd5b505af1158015610a71573d6000803e3d6000fd5b505050505050505050565b3360009081526001602052604090205460ff16610aab5760405162461bcd60e51b81526004016103609061157a565b6001600160a01b03831660009081526002602052604090205460ff1615610ae45760405162461bcd60e51b8152600401610360906115c4565b604051632142170760e11b81526001600160a01b038516906342842e0e90610b14908690869086906004016115f7565b600060405180830381600087803b158015610b2e57600080fd5b505af1158015610b42573d6000803e3d6000fd5b5050505050505050565b6000546001600160a01b031690565b33600081815260026020526040808220805460ff19166001179055517fdddeac663983b1e35153215a4578fecbb5921d12e660b3c4259aa7d9dbb9709f9190a2565b33600081815260026020526040808220805460ff19169055517f120d91a0121c2d5a7ce9638fce4bd262d4b443568fce40f681f50dca814a629a9190a2565b610be4610e22565b6001600160a01b038116600081815260016020526040808220805460ff19169055517f2b35b0a030b4f4cef0a9e8d01828235bb82a11ec4e37c11bd6d8770d9aafb17c9190a250565b3360009081526001602052604090205460ff16610c5c5760405162461bcd60e51b81526004016103609061157a565b6001600160a01b03831660009081526002602052604090205460ff1615610c955760405162461bcd60e51b8152600401610360906115c4565b6040516323b872dd60e01b81526001600160a01b038516906323b872dd90610b14908690869086906004016115f7565b3360009081526001602052604081205460ff16610cf45760405162461bcd60e51b81526004016103609061157a565b6001600160a01b03841660009081526002602052604090205460ff1615610d2d5760405162461bcd60e51b8152600401610360906115c4565b6040516323b872dd60e01b81526001600160a01b038616906323b872dd90610d5d908790879087906004016115f7565b6020604051808303816000875af1158015610d7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da091906114a5565b95945050505050565b610db1610e22565b6001600160a01b038116610e165760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610360565b610e1f81610fa9565b50565b33610e2b610b4c565b6001600160a01b03161461098c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610360565b33600081815260036020908152604080832054815160609590951b6001600160601b03191685840152603480860191909152815180860390910181526054850190915280519101207b0ca2ba3432b932bab69029b4b3b732b21026b2b9b9b0b3b29d05199960211b6074840152609083018190529091829060b001604051602081830303815290604052805190602001209050600181856040016020810190610f2a919061161b565b604080516000815260208181018084529490945260ff909216908201528635606082015290860135608082015260a0016020604051602081039080840390855afa158015610f7c573d6000803e3d6000fd5b505050602060405103516001600160a01b0316610f97610b4c565b6001600160a01b031614949350505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b5080546000825590600052602060002090810190610e1f919061102e565b604080518082019091526000808252602082015290565b5b8082111561104d5780546001600160b01b031916815560010161102f565b5090565b6001600160a01b0381168114610e1f57600080fd5b60006020828403121561107857600080fd5b813561108381611051565b9392505050565b60006020828403121561109c57600080fd5b5035919050565b60008083601f8401126110b557600080fd5b5081356001600160401b038111156110cc57600080fd5b6020830191508360208260061b85010111156110e757600080fd5b9250929050565b60006060828403121561110057600080fd5b50919050565b60008060006080848603121561111b57600080fd5b83356001600160401b0381111561113157600080fd5b61113d868287016110a3565b9094509250611151905085602086016110ee565b90509250925092565b61ffff81168114610e1f57600080fd5b600080600060a0848603121561117f57600080fd5b833561118a8161115a565b9250602084013561119a81611051565b915061115185604086016110ee565b600080600080606085870312156111bf57600080fd5b84356111ca81611051565b93506020850135925060408501356001600160401b038111156111ec57600080fd5b6111f8878288016110a3565b95989497509550505050565b602080825282518282018190526000919060409081850190868401855b82811015611253578151805161ffff1685528601516001600160a01b0316868501529284019290850190600101611221565b5091979650505050505050565b600080600080600060a0868803121561127857600080fd5b853561128381611051565b9450602086013561129381611051565b935060408601356112a381611051565b94979396509394606081013594506080013592915050565b600080600080608085870312156112d157600080fd5b84356112dc81611051565b935060208501356112ec81611051565b925060408501356112fc81611051565b9396929550929360600135925050565b6020808252601690820152754f776e6572207369676e20697320696e76616c69646560501b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000600182016113645761136461133c565b5060010190565b634e487b7160e01b600052603260045260246000fd5b813561138c8161115a565b61ffff8116905081548161ffff19821617835560208401356113ad81611051565b6001600160b01b03199190911690911760109190911b62010000600160b01b031617905550565b6020808252818101839052600090604080840186845b8781101561142d5781356113fd8161115a565b61ffff1683528185013561141081611051565b6001600160a01b03168386015291830191908301906001016113ea565b5090979650505050505050565b60006020808301818452808554808352604092508286019150866000528360002060005b8281101561125357815461ffff8116855260101c6001600160a01b031686850152928401926001918201910161145e565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156114b757600080fd5b8151801515811461108357600080fd5b808201808211156114da576114da61133c565b92915050565b600080604083850312156114f357600080fd5b82516114fe81611051565b6020939093015192949293505050565b60006040828403121561152057600080fd5b604051604081018181106001600160401b038211171561155057634e487b7160e01b600052604160045260246000fd5b604052823561155e8161115a565b8152602083013561156e81611051565b60208201529392505050565b6020808252602a908201527f436f6e7472616374206973206e6f7420617070726f76656420746f206d616b65604082015269207472616e736665727360b01b606082015260800190565b602080825260199082015278155cd95c881a185cc81c995d9bdad95908185c1c1c9bdd985b603a1b604082015260600190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006020828403121561162d57600080fd5b813560ff8116811461108357600080fdfea164736f6c6343000813000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100e65760003560e01c806307f7aafb146100eb5780632a312fe3146101005780634a3e3a1f1461013a5780634e59053f1461016d5780636452e20a1461018057806369dc9ff3146101935780636ef91c72146101b657806370ae92d2146101d6578063715018a61461020457806374a9402e1461020c578063789f93f61461021f5780638da5cb5b1461023257806390d02b3c14610252578063a8034df11461025a578063b7e2077e14610262578063ca72da8e14610275578063da3e8ce414610288578063f2fde38b1461029b575b600080fd5b6100fe6100f9366004611066565b6102ae565b005b61011361010e36600461108a565b610305565b6040805161ffff90931683526001600160a01b039091166020830152015b60405180910390f35b61015d610148366004611066565b60026020526000908152604090205460ff1681565b6040519015158152602001610131565b6100fe61017b366004611106565b61033a565b6100fe61018e36600461116a565b610436565b61015d6101a1366004611066565b60016020526000908152604090205460ff1681565b6101c96101c43660046111a9565b610534565b6040516101319190611204565b6101f66101e4366004611066565b60036020526000908152604090205481565b604051908152602001610131565b6100fe61097a565b6100fe61021a366004611260565b61098e565b6100fe61022d3660046112bb565b610a7c565b61023a610b4c565b6040516001600160a01b039091168152602001610131565b6100fe610b5b565b6100fe610b9d565b6100fe610270366004611066565b610bdc565b6100fe6102833660046112bb565b610c2d565b61015d6102963660046112bb565b610cc5565b6100fe6102a9366004611066565b610da9565b6102b6610e22565b6001600160a01b0381166000818152600160208190526040808320805460ff1916909217909155517f283ffe02a14663588cf87ba17adbc21c9ce0d0cdb15655926bf2b987af3075fe9190a250565b6004818154811061031557600080fd5b60009182526020909120015461ffff811691506201000090046001600160a01b031682565b8061034481610e81565b6103695760405162461bcd60e51b81526004016103609061130c565b60405180910390fd5b33600090815260036020526040812080549161038483611352565b90915550610396905060046000610ff9565b60005b838110156103f65760048585838181106103b5576103b561136b565b835460018101855560009485526020909420604090910292909201929190910190506103e18282611381565b505080806103ee90611352565b915050610399565b507f3a08e273a52ce6fad29142988478aaf1351afec0a4e1f2ff42382ad0872713bf84846040516104289291906113d4565b60405180910390a150505050565b8061044081610e81565b61045c5760405162461bcd60e51b81526004016103609061130c565b33600090815260036020526040812080549161047783611352565b909155505060408051808201825261ffff80871682526001600160a01b038087166020840190815260048054600181018255600082905285517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b9091018054935190941662010000026001600160b01b0319909316941693909317179055915190917f3a08e273a52ce6fad29142988478aaf1351afec0a4e1f2ff42382ad0872713bf91610525919061143a565b60405180910390a15050505050565b60408051600080825260208201909252606091610567565b610554611017565b81526020019060019003908161054c5790505b506040516301ffc9a760e01b815263152a902d60e11b60048201529091506001600160a01b038616906301ffc9a790602401602060405180830381865afa1580156105b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105da91906114a5565b15610813576004546105ec90836114c7565b6105f79060016114c7565b6001600160401b0381111561060e5761060e61148f565b60405190808252806020026020018201604052801561064757816020015b610634611017565b81526020019060019003908161062c5790505b5060405163152a902d60e11b815260048101869052612710602482015290915060009081906001600160a01b03881690632a55205a906044016040805180830381865afa15801561069c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c091906114e0565b9150915060405180604001604052808261ffff168152602001836001600160a01b0316815250836000815181106106f9576106f961136b565b602002602001018190525060005b84811015610771578585828181106107215761072161136b565b905060400201803603810190610737919061150e565b846107438360016114c7565b815181106107535761075361136b565b6020026020010181905250808061076990611352565b915050610707565b5060005b60045481101561080b57600481815481106107925761079261136b565b60009182526020918290206040805180820190915291015461ffff811682526201000090046001600160a01b031691810191909152846107d287846114c7565b6107dd9060016114c7565b815181106107ed576107ed61136b565b6020026020010181905250808061080390611352565b915050610775565b505050610972565b60045461082090836114c7565b61082b9060016114c7565b6001600160401b038111156108425761084261148f565b60405190808252806020026020018201604052801561087b57816020015b610868611017565b8152602001906001900390816108605790505b50905060005b828110156108e15783838281811061089b5761089b61136b565b9050604002018036038101906108b1919061150e565b8282815181106108c3576108c361136b565b602002602001018190525080806108d990611352565b915050610881565b5060005b60045481101561097057600481815481106109025761090261136b565b60009182526020918290206040805180820190915291015461ffff811682526201000090046001600160a01b0316918101919091528261094285846114c7565b815181106109525761095261136b565b6020026020010181905250808061096890611352565b9150506108e5565b505b949350505050565b610982610e22565b61098c6000610fa9565b565b3360009081526001602052604090205460ff166109bd5760405162461bcd60e51b81526004016103609061157a565b6001600160a01b03841660009081526002602052604090205460ff16156109f65760405162461bcd60e51b8152600401610360906115c4565b604051637921219560e11b81526001600160a01b0385811660048301528481166024830152604482018490526064820183905260a06084830152600060a483015286169063f242432a9060c401600060405180830381600087803b158015610a5d57600080fd5b505af1158015610a71573d6000803e3d6000fd5b505050505050505050565b3360009081526001602052604090205460ff16610aab5760405162461bcd60e51b81526004016103609061157a565b6001600160a01b03831660009081526002602052604090205460ff1615610ae45760405162461bcd60e51b8152600401610360906115c4565b604051632142170760e11b81526001600160a01b038516906342842e0e90610b14908690869086906004016115f7565b600060405180830381600087803b158015610b2e57600080fd5b505af1158015610b42573d6000803e3d6000fd5b5050505050505050565b6000546001600160a01b031690565b33600081815260026020526040808220805460ff19166001179055517fdddeac663983b1e35153215a4578fecbb5921d12e660b3c4259aa7d9dbb9709f9190a2565b33600081815260026020526040808220805460ff19169055517f120d91a0121c2d5a7ce9638fce4bd262d4b443568fce40f681f50dca814a629a9190a2565b610be4610e22565b6001600160a01b038116600081815260016020526040808220805460ff19169055517f2b35b0a030b4f4cef0a9e8d01828235bb82a11ec4e37c11bd6d8770d9aafb17c9190a250565b3360009081526001602052604090205460ff16610c5c5760405162461bcd60e51b81526004016103609061157a565b6001600160a01b03831660009081526002602052604090205460ff1615610c955760405162461bcd60e51b8152600401610360906115c4565b6040516323b872dd60e01b81526001600160a01b038516906323b872dd90610b14908690869086906004016115f7565b3360009081526001602052604081205460ff16610cf45760405162461bcd60e51b81526004016103609061157a565b6001600160a01b03841660009081526002602052604090205460ff1615610d2d5760405162461bcd60e51b8152600401610360906115c4565b6040516323b872dd60e01b81526001600160a01b038616906323b872dd90610d5d908790879087906004016115f7565b6020604051808303816000875af1158015610d7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da091906114a5565b95945050505050565b610db1610e22565b6001600160a01b038116610e165760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610360565b610e1f81610fa9565b50565b33610e2b610b4c565b6001600160a01b03161461098c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610360565b33600081815260036020908152604080832054815160609590951b6001600160601b03191685840152603480860191909152815180860390910181526054850190915280519101207b0ca2ba3432b932bab69029b4b3b732b21026b2b9b9b0b3b29d05199960211b6074840152609083018190529091829060b001604051602081830303815290604052805190602001209050600181856040016020810190610f2a919061161b565b604080516000815260208181018084529490945260ff909216908201528635606082015290860135608082015260a0016020604051602081039080840390855afa158015610f7c573d6000803e3d6000fd5b505050602060405103516001600160a01b0316610f97610b4c565b6001600160a01b031614949350505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b5080546000825590600052602060002090810190610e1f919061102e565b604080518082019091526000808252602082015290565b5b8082111561104d5780546001600160b01b031916815560010161102f565b5090565b6001600160a01b0381168114610e1f57600080fd5b60006020828403121561107857600080fd5b813561108381611051565b9392505050565b60006020828403121561109c57600080fd5b5035919050565b60008083601f8401126110b557600080fd5b5081356001600160401b038111156110cc57600080fd5b6020830191508360208260061b85010111156110e757600080fd5b9250929050565b60006060828403121561110057600080fd5b50919050565b60008060006080848603121561111b57600080fd5b83356001600160401b0381111561113157600080fd5b61113d868287016110a3565b9094509250611151905085602086016110ee565b90509250925092565b61ffff81168114610e1f57600080fd5b600080600060a0848603121561117f57600080fd5b833561118a8161115a565b9250602084013561119a81611051565b915061115185604086016110ee565b600080600080606085870312156111bf57600080fd5b84356111ca81611051565b93506020850135925060408501356001600160401b038111156111ec57600080fd5b6111f8878288016110a3565b95989497509550505050565b602080825282518282018190526000919060409081850190868401855b82811015611253578151805161ffff1685528601516001600160a01b0316868501529284019290850190600101611221565b5091979650505050505050565b600080600080600060a0868803121561127857600080fd5b853561128381611051565b9450602086013561129381611051565b935060408601356112a381611051565b94979396509394606081013594506080013592915050565b600080600080608085870312156112d157600080fd5b84356112dc81611051565b935060208501356112ec81611051565b925060408501356112fc81611051565b9396929550929360600135925050565b6020808252601690820152754f776e6572207369676e20697320696e76616c69646560501b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000600182016113645761136461133c565b5060010190565b634e487b7160e01b600052603260045260246000fd5b813561138c8161115a565b61ffff8116905081548161ffff19821617835560208401356113ad81611051565b6001600160b01b03199190911690911760109190911b62010000600160b01b031617905550565b6020808252818101839052600090604080840186845b8781101561142d5781356113fd8161115a565b61ffff1683528185013561141081611051565b6001600160a01b03168386015291830191908301906001016113ea565b5090979650505050505050565b60006020808301818452808554808352604092508286019150866000528360002060005b8281101561125357815461ffff8116855260101c6001600160a01b031686850152928401926001918201910161145e565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156114b757600080fd5b8151801515811461108357600080fd5b808201808211156114da576114da61133c565b92915050565b600080604083850312156114f357600080fd5b82516114fe81611051565b6020939093015192949293505050565b60006040828403121561152057600080fd5b604051604081018181106001600160401b038211171561155057634e487b7160e01b600052604160045260246000fd5b604052823561155e8161115a565b8152602083013561156e81611051565b60208201529392505050565b6020808252602a908201527f436f6e7472616374206973206e6f7420617070726f76656420746f206d616b65604082015269207472616e736665727360b01b606082015260800190565b602080825260199082015278155cd95c881a185cc81c995d9bdad95908185c1c1c9bdd985b603a1b604082015260600190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006020828403121561162d57600080fd5b813560ff8116811461108357600080fdfea164736f6c6343000813000a",
  "devdoc": {
    "details": "Proxy contract to manage user token approvals",
    "kind": "dev",
    "methods": {
      "addBaseFee(uint16,address,(bytes32,bytes32,uint8))": {
        "details": "update base fees",
        "params": {
          "rate": "fees rate to add",
          "receiver": "receiver of fee to add"
        }
      },
      "approveContract(address)": {
        "details": "Approve contract to call transfer functions",
        "params": {
          "_contract": "address of contract to approve"
        }
      },
      "calcuateFee(address,uint256,(uint16,address)[])": {
        "details": "caculates fee",
        "params": {
          "_collection": "collection address",
          "_fees": "requesting fee",
          "_tokenId": "id of token"
        },
        "returns": {
          "fees": "cauculated fee"
        }
      },
      "denyContract(address)": {
        "details": "Revoke approval of contract to call transfer functions",
        "params": {
          "_contract": "address of contract to revoke approval"
        }
      },
      "grantApproval()": {
        "details": "Allow contract to make transfers on-behalf of a specific user"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "revokeApproval()": {
        "details": "Block contract from making transfers on-behalf of a specific user"
      },
      "transferERC1155(address,address,address,uint256,uint256)": {
        "details": "Transfer ERC1155 token using `safeTransferFrom`",
        "params": {
          "amount": "amount",
          "collection": "address of the collection",
          "from": "address of the sender",
          "to": "address of the recipient",
          "tokenId": "tokenId"
        }
      },
      "transferERC20(address,address,address,uint256)": {
        "details": "Transfer ERC20 token",
        "params": {
          "amount": "amount",
          "from": "address of the sender",
          "to": "address of the recipient",
          "token": "address of the token"
        }
      },
      "transferERC721(address,address,address,uint256)": {
        "details": "Transfer ERC721 token using `safeTransferFrom`",
        "params": {
          "collection": "address of the collection",
          "from": "address of the sender",
          "to": "address of the recipient",
          "tokenId": "tokenId"
        }
      },
      "transferERC721Unsafe(address,address,address,uint256)": {
        "details": "Transfer ERC721 token using `transferFrom`",
        "params": {
          "collection": "address of the collection",
          "from": "address of the sender",
          "to": "address of the recipient",
          "tokenId": "tokenId"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateBaseFee((uint16,address)[],(bytes32,bytes32,uint8))": {
        "details": "update base fees",
        "params": {
          "fees": "fees to update"
        }
      }
    },
    "title": "ExecutionDelegate",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1291,
        "contract": "contracts/ExecutionDelegate.sol:ExecutionDelegate",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9688,
        "contract": "contracts/ExecutionDelegate.sol:ExecutionDelegate",
        "label": "contracts",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 9692,
        "contract": "contracts/ExecutionDelegate.sol:ExecutionDelegate",
        "label": "revokedApproval",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 9696,
        "contract": "contracts/ExecutionDelegate.sol:ExecutionDelegate",
        "label": "nonce",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9700,
        "contract": "contracts/ExecutionDelegate.sol:ExecutionDelegate",
        "label": "baseFee",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_struct(Fee)15024_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Fee)15024_storage)dyn_storage": {
        "base": "t_struct(Fee)15024_storage",
        "encoding": "dynamic_array",
        "label": "struct Fee[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Fee)15024_storage": {
        "encoding": "inplace",
        "label": "struct Fee",
        "members": [
          {
            "astId": 15021,
            "contract": "contracts/ExecutionDelegate.sol:ExecutionDelegate",
            "label": "rate",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 15023,
            "contract": "contracts/ExecutionDelegate.sol:ExecutionDelegate",
            "label": "recipient",
            "offset": 2,
            "slot": "0",
            "type": "t_address_payable"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}