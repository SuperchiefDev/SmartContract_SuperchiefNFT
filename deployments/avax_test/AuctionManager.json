{
  "address": "0x619Ab1Ca46DA71c25b494FD7b9A83006c27a7e9d",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "paymentToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "name": "AuctionStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "bidPrice",
          "type": "uint256"
        }
      ],
      "name": "Finished",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "bidPrice",
          "type": "uint256"
        }
      ],
      "name": "NewBid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "auctions",
      "outputs": [
        {
          "internalType": "enum AssetType",
          "name": "assetType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "paymentToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minPrice",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "lastBidder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "bidPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "bid",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_paymentToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        }
      ],
      "name": "createAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        }
      ],
      "name": "finish",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5d8b5078488756ff7adad7729a1c68adaaa970457bc937f7eadf36159e3f1885",
  "receipt": {
    "to": null,
    "from": "0xf5CA36c9873d61Bc28C117BD470981Ef6647A685",
    "contractAddress": "0x619Ab1Ca46DA71c25b494FD7b9A83006c27a7e9d",
    "transactionIndex": 2,
    "gasUsed": "1462625",
    "logsBloom": "0x
    "blockHash": "0xfad41521ee433dce2ec4ac036c053c6a45ce9bc810966a437f729942fa113e40",
    "transactionHash": "0x5d8b5078488756ff7adad7729a1c68adaaa970457bc937f7eadf36159e3f1885",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 23878804,
        "transactionHash": "0x5d8b5078488756ff7adad7729a1c68adaaa970457bc937f7eadf36159e3f1885",
        "address": "0x619Ab1Ca46DA71c25b494FD7b9A83006c27a7e9d",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f5ca36c9873d61bc28c117bd470981ef6647a685"
        ],
        "data": "0x",
        "logIndex": 10,
        "blockHash": "0xfad41521ee433dce2ec4ac036c053c6a45ce9bc810966a437f729942fa113e40"
      }
    ],
    "blockNumber": 23878804,
    "cumulativeGasUsed": "1819647",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d1c30057282ca9ca9aefbe616d5a5505",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"AuctionStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bidPrice\",\"type\":\"uint256\"}],\"name\":\"Finished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bidPrice\",\"type\":\"uint256\"}],\"name\":\"NewBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"auctions\",\"outputs\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lastBidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bidPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"createAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"finish\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"AuctionStarted(bytes32,address,address,uint256,uint256,uint256,uint256)\":{\"details\":\"emit this event when auction started\"},\"Finished(bytes32,address,uint256)\":{\"details\":\"emit this event when auction finished\"},\"NewBid(bytes32,address,uint256)\":{\"details\":\"emit this event when new bid added\"}},\"kind\":\"dev\",\"methods\":{\"bid(bytes32,uint256)\":{\"details\":\"This functions changes last bid params, and release last bidder's token      and locks new bidder's token\",\"params\":{\"_id\":\"id of auction\",\"_price\":\"new bidding price\"}},\"createAuction(address,uint256,address,uint256,uint256)\":{\"params\":{\"_collection\":\"address of collection\",\"_duration\":\"duration of auction\",\"_minPrice\":\"minimum price of bidF\",\"_paymentToken\":\"address of bid token\",\"_tokenId\":\"token id of nft\"}},\"finish(bytes32)\":{\"details\":\"This function finishs auction.      Sends asset to winner and sends bid token to owner.\",\"params\":{\"_id\":\"id of auction\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"auctions\":{\"details\":\"acutions\"}},\"title\":\"English Auction Manager Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"bid(bytes32,uint256)\":{\"notice\":\"make a new bid\"},\"createAuction(address,uint256,address,uint256,uint256)\":{\"notice\":\"create auction\"},\"finish(bytes32)\":{\"notice\":\"finish auction\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AuctionManage.sol\":\"AuctionManager\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcab667ddad478ff0d39c2053ca77fac778af8483c18ab07d810277b4216fd582\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x2e024ca51ce5abe16c0d34e6992a1104f356e2244eb4ccbec970435e8b3405e3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3dd5e1a66a56f30302108a1da97d677a42b1daa60e503696b2bcbbf3e4c95bcb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x67ef46fef257faae47adb630aad49694dda0334e5f7a7c5fb386243b974886b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/AuctionManage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity ^0.8.9;\\n\\nimport {IERC721, IERC165} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {ERC721Holder} from \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport {ERC1155Holder} from \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\nimport {SafeERC20, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport {ReentrancyGuard} from \\\"./libraries/ReentrancyGuard.sol\\\";\\nimport {AssetType, Auction} from \\\"./libraries/Structs.sol\\\";\\n\\n/**\\n * @title English Auction Manager Contract\\n */\\ncontract AuctionManager is ReentrancyGuard, ERC721Holder, ERC1155Holder, Ownable {\\n  using SafeERC20 for IERC20;\\n\\n  /// @dev acutions\\n  mapping(bytes32 => Auction) public auctions;\\n\\n  /// @dev emit this event when auction started\\n  event AuctionStarted(\\n    bytes32 indexed id,\\n    address indexed collection,\\n    address paymentToken,\\n    uint256 tokenId,\\n    uint256 minPrice,\\n    uint256 startTime,\\n    uint256 endTime\\n  );\\n  /// @dev emit this event when new bid added\\n  event NewBid(bytes32 indexed id, address indexed bidder, uint256 indexed bidPrice);\\n  /// @dev emit this event when auction finished\\n  event Finished(bytes32 indexed id, address indexed winner, uint256 indexed bidPrice);\\n\\n  constructor() {}\\n\\n  /**\\n   * @notice create auction\\n   * @param _collection address of collection\\n   * @param _tokenId token id of nft\\n   * @param _paymentToken address of bid token\\n   * @param _minPrice minimum price of bidF\\n   * @param _duration duration of auction\\n   */\\n  function createAuction(\\n    address _collection,\\n    uint256 _tokenId,\\n    address _paymentToken,\\n    uint256 _minPrice,\\n    uint256 _duration\\n  ) external {\\n    AssetType assetType;\\n    if (IERC165(_collection).supportsInterface(type(IERC721).interfaceId)) {\\n      assetType = AssetType.ERC721;\\n    } else if (IERC165(_collection).supportsInterface(type(IERC1155).interfaceId)) {\\n      assetType = AssetType.ERC1155;\\n    } else {\\n      revert(\\\"invalid collection address\\\");\\n    }\\n\\n    // calculate id of auction\\n    bytes32 id = _calculateHash(_collection, _tokenId, _paymentToken, _minPrice);\\n\\n    auctions[id] = Auction(\\n      assetType,\\n      _collection,\\n      _tokenId,\\n      _paymentToken,\\n      _minPrice,\\n      address(0),\\n      0,\\n      block.timestamp,\\n      block.timestamp + _duration,\\n      msg.sender\\n    );\\n\\n    // lock asset to auction contract\\n    if (assetType == AssetType.ERC721) {\\n      IERC721(_collection).safeTransferFrom(msg.sender, address(this), _tokenId, \\\"\\\");\\n    } else {\\n      IERC1155(_collection).safeTransferFrom(msg.sender, address(this), _tokenId, 1, \\\"\\\");\\n    }\\n\\n    emit AuctionStarted(\\n      id,\\n      _collection,\\n      _paymentToken,\\n      _tokenId,\\n      _minPrice,\\n      block.timestamp,\\n      block.timestamp + _duration\\n    );\\n  }\\n\\n  /**\\n   * @notice make a new bid\\n   * @dev This functions changes last bid params, and release last bidder's token\\n   *      and locks new bidder's token\\n   * @param _id id of auction\\n   * @param _price new bidding price\\n   */\\n  function bid(bytes32 _id, uint256 _price) external payable nonReentrant {\\n    require(block.timestamp < auctions[_id].endTime, \\\"Auction: This auction already finished\\\");\\n    require(_price >= auctions[_id].minPrice, \\\"Auction: bid price is low than minimum price\\\");\\n    require(_price > auctions[_id].bidPrice, \\\"Auction: bid price is low than last one\\\");\\n\\n    Auction memory auction = auctions[_id];\\n\\n    address previousBidder = auction.lastBidder;\\n    uint256 previousPrice = auction.bidPrice;\\n\\n    auction.lastBidder = msg.sender;\\n    auction.bidPrice = _price;\\n    auctions[_id] = auction;\\n\\n    if (previousBidder != address(0)) {\\n      // release last bidder's token\\n      if (auction.paymentToken == address(0)) {\\n        payable(previousBidder).transfer(previousPrice);\\n      }\\n      IERC20(auction.paymentToken).safeTransfer(previousBidder, previousPrice);\\n    }\\n\\n    // lock new bidder's token\\n    if (auction.paymentToken == address(0)) {\\n      require(_price == msg.value, \\\"Auction: invalid eth amount\\\");\\n    } else {\\n      IERC20(auction.paymentToken).safeTransferFrom(msg.sender, address(this), _price);\\n    }\\n\\n    emit NewBid(_id, msg.sender, _price);\\n  }\\n\\n  /**\\n   * @notice finish auction\\n   * @dev This function finishs auction.\\n   *      Sends asset to winner and sends bid token to owner.\\n   * @param _id id of auction\\n   */\\n  function finish(bytes32 _id) external {\\n    require(block.timestamp > auctions[_id].endTime, \\\"Auction: auction not finished\\\");\\n    require(\\n      auctions[_id].owner == msg.sender || auctions[_id].lastBidder == msg.sender,\\n      \\\"Auction: don't have permission to finish\\\"\\n    );\\n\\n    // get asset receiver\\n    address assetReceiver;\\n    if (auctions[_id].lastBidder == address(0)) {\\n      assetReceiver = owner();\\n    } else {\\n      assetReceiver = auctions[_id].lastBidder;\\n    }\\n\\n    // sends asset to receiver\\n    if (auctions[_id].assetType == AssetType.ERC721) {\\n      IERC721(auctions[_id].collection).safeTransferFrom(\\n        address(this),\\n        assetReceiver,\\n        auctions[_id].tokenId\\n      );\\n    } else if (auctions[_id].assetType == AssetType.ERC1155) {\\n      IERC1155(auctions[_id].collection).safeTransferFrom(\\n        address(this),\\n        assetReceiver,\\n        auctions[_id].tokenId,\\n        1,\\n        \\\"\\\"\\n      );\\n    }\\n\\n    // sends bid token to owner\\n    if (auctions[_id].paymentToken == address(0)) {\\n      payable(auctions[_id].owner).transfer(auctions[_id].bidPrice);\\n    } else {\\n      IERC20(auctions[_id].paymentToken).safeTransfer(auctions[_id].owner, auctions[_id].bidPrice);\\n    }\\n\\n    emit Finished(_id, assetReceiver, auctions[_id].bidPrice);\\n  }\\n\\n  function _calculateHash(\\n    address _collection,\\n    uint256 _tokenId,\\n    address _paymentToken,\\n    uint256 _minPrice\\n  ) private view returns (bytes32) {\\n    return\\n      keccak256(\\n        abi.encodePacked(msg.sender, _collection, _tokenId, _paymentToken, _minPrice, block.number)\\n      );\\n  }\\n}\\n\",\"keccak256\":\"0x1c8377ef1269f3a574c63f816bbce9ff28b27a4b27afbcf2feafb8479cd31e35\",\"license\":\"GPL-3.0-only\"},\"contracts/libraries/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n  // Booleans are more expensive than uint256 or any type that takes up a full\\n  // word because each write operation emits an extra SLOAD to first read the\\n  // slot's contents, replace the bits taken up by the boolean, and then write\\n  // back. This is the compiler's defense against contract upgrades and\\n  // pointer aliasing, and it cannot be disabled.\\n\\n  // The values being non-zero value makes deployment a bit more expensive,\\n  // but in exchange the refund on every call to nonReentrant will be lower in\\n  // amount. Since refunds are capped to a percentage of the total\\n  // transaction's gas, it is best to keep them low in cases like this one, to\\n  // increase the likelihood of the full refund coming into effect.\\n  uint256 private constant _NOT_ENTERED = 1;\\n  uint256 private constant _ENTERED = 2;\\n\\n  uint256 private _status;\\n\\n  constructor() {\\n    _status = _NOT_ENTERED;\\n  }\\n\\n  /**\\n   * @dev Prevents a contract from calling itself, directly or indirectly.\\n   * Calling a `nonReentrant` function from another `nonReentrant`\\n   * function is not supported. It is possible to prevent this from happening\\n   * by making the `nonReentrant` function external, and make it call a\\n   * `private` function that does the actual work.\\n   */\\n  modifier nonReentrant() {\\n    // On the first call to nonReentrant, _notEntered will be true\\n    require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n    // Any calls to nonReentrant after this point will fail\\n    _status = _ENTERED;\\n\\n    _;\\n\\n    // By storing the original value once again, a refund is triggered (see\\n    // https://eips.ethereum.org/EIPS/eip-2200)\\n    _status = _NOT_ENTERED;\\n  }\\n}\\n\",\"keccak256\":\"0xf41fd84920d5cabbb768943e381d562baa1cd99d604d58aa2011b69bac284065\",\"license\":\"MIT\"},\"contracts/libraries/Structs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nenum Side {\\n  Buy,\\n  Sell\\n}\\n\\nenum SignatureVersion {\\n  Single,\\n  Bulk\\n}\\n\\nenum AssetType {\\n  ERC721,\\n  ERC1155\\n}\\n\\nstruct Fee {\\n  uint16 rate;\\n  address payable recipient;\\n}\\n\\nstruct Order {\\n  address trader;\\n  Side side;\\n  address matchingPolicy;\\n  address collection;\\n  uint256 tokenId;\\n  uint256 amount;\\n  address paymentToken;\\n  uint256 price;\\n  uint256 listingTime;\\n  /* Order expiration timestamp - 0 for oracle cancellations. */\\n  uint256 expirationTime;\\n  Fee[] fees;\\n  uint256 salt;\\n  bytes extraParams;\\n}\\n\\nstruct Input {\\n  Order order;\\n  uint8 v;\\n  bytes32 r;\\n  bytes32 s;\\n  bytes extraSignature;\\n  SignatureVersion signatureVersion;\\n  uint256 blockNumber;\\n}\\n\\nstruct Auction {\\n  AssetType assetType;\\n  address collection;\\n  uint256 tokenId;\\n  address paymentToken;\\n  uint256 minPrice;\\n  address lastBidder;\\n  uint256 bidPrice;\\n  uint256 startTime;\\n  uint256 endTime;\\n  address owner;\\n}\",\"keccak256\":\"0xe49cf828e9e4191be48e4d86718bd49f94b5e010ac5afd1048d0359fed2877d6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600160005561001f33610024565b610076565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6118a4806100856000396000f3fe60806040526004361061008c5760003560e01c806301ffc9a714610091578063150b7a02146100c65780631edbc5be146100f3578063715018a6146101835780638da5cb5b1461019a578063bc197c81146101c7578063cd772f5c146101f3578063f23a6e6114610206578063f2df504714610232578063f2fde38b14610252578063fde6305614610272575b600080fd5b34801561009d57600080fd5b506100b16100ac366004611359565b610292565b60405190151581526020015b60405180910390f35b3480156100d257600080fd5b506100e66100e136600461145b565b6102c9565b6040516100bd91906114c2565b3480156100ff57600080fd5b5061016d61010e3660046114d7565b600260208190526000918252604090912080546001820154928201546003830154600484015460058501546006860154600787015460089097015460ff8716986101009097046001600160a01b0390811698968116969481169491168a565b6040516100bd9a99989796959493929190611506565b34801561018f57600080fd5b506101986102da565b005b3480156101a657600080fd5b506101af6102ee565b6040516001600160a01b0390911681526020016100bd565b3480156101d357600080fd5b506100e66101e23660046115ed565b63bc197c8160e01b95945050505050565b610198610201366004611696565b6102fd565b34801561021257600080fd5b506100e66102213660046116b8565b63f23a6e6160e01b95945050505050565b34801561023e57600080fd5b5061019861024d36600461171c565b610796565b34801561025e57600080fd5b5061019861026d36600461176a565b610c15565b34801561027e57600080fd5b5061019861028d3660046114d7565b610c8e565b60006001600160e01b03198216630271189760e51b14806102c357506301ffc9a760e01b6001600160e01b03198316145b92915050565b630a85bd0160e11b5b949350505050565b6102e2611021565b6102ec6000611080565b565b6001546001600160a01b031690565b6002600054036103545760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b60026000818155838152602091909152604090206007015442106103c95760405162461bcd60e51b815260206004820152602660248201527f41756374696f6e3a20546869732061756374696f6e20616c72656164792066696044820152651b9a5cda195960d21b606482015260840161034b565b60008281526002602052604090206003015481101561043f5760405162461bcd60e51b815260206004820152602c60248201527f41756374696f6e3a20626964207072696365206973206c6f77207468616e206d60448201526b696e696d756d20707269636560a01b606482015260840161034b565b60008281526002602052604090206005015481116104af5760405162461bcd60e51b815260206004820152602760248201527f41756374696f6e3a20626964207072696365206973206c6f77207468616e206c604482015266617374206f6e6560c81b606482015260840161034b565b600082815260026020526040808220815161014081019092528054829060ff1660018111156104e0576104e06114f0565b60018111156104f1576104f16114f0565b815281546001600160a01b0361010091829004811660208085019190915260018086015460408087019190915260028088015485166060880152600388015460808801526004880154851660a080890191909152600589015460c0808a019190915260068a015460e08a015260078a01549789019790975260089098015490941661012090960195909552948601805193870180513390925289905260008a81529290915292902084518154959650919492938693919291839160ff19919091169083818111156105c4576105c46114f0565b021790555060208201518154610100600160a81b0319166101006001600160a01b0392831681029190911783556040840151600184015560608401516002840180546001600160a01b03199081169285169290921790556080850151600385015560a0850151600485018054831691851691909117905560c0850151600585015560e085015160068501559084015160078401556101209093015160089092018054909316918116919091179091558216156106dd5760608301516001600160a01b03166106c4576040516001600160a01b0383169082156108fc029083906000818181858888f193505050501580156106c2573d6000803e3d6000fd5b505b60608301516106dd906001600160a01b031683836110d2565b60608301516001600160a01b03166107415734841461073c5760405162461bcd60e51b815260206004820152601b60248201527a105d58dd1a5bdb8e881a5b9d985b1a5908195d1a08185b5bdd5b9d602a1b604482015260640161034b565b61075b565b606083015161075b906001600160a01b031633308761113a565b6040518490339087907fb556ff269c1b6714f432c36431e2041d28436a73b6c3f19c021827bbdc6bfc2990600090a450506001600055505050565b6040516301ffc9a760e01b81526000906001600160a01b038716906301ffc9a7906107cc906380ac58cd60e01b906004016114c2565b602060405180830381865afa1580156107e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080d9190611785565b1561081a575060006108e0565b6040516301ffc9a760e01b81526001600160a01b038716906301ffc9a79061084d90636cdb3d1360e11b906004016114c2565b602060405180830381865afa15801561086a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088e9190611785565b1561089b575060016108e0565b60405162461bcd60e51b815260206004820152601a602482015279696e76616c696420636f6c6c656374696f6e206164647265737360301b604482015260640161034b565b600061094f878787876040516001600160601b031933606090811b8216602084015286811b821660348401526048830186905284901b166068820152607c810182905243609c82015260009060bc01604051602081830303815290604052805190602001209050949350505050565b905060405180610140016040528083600181111561096f5761096f6114f0565b8152602001886001600160a01b03168152602001878152602001866001600160a01b0316815260200185815260200160006001600160a01b031681526020016000815260200142815260200184426109c791906117a7565b815233602091820152600083815260029091526040902081518154829060ff1916600183818111156109fb576109fb6114f0565b021790555060208201518154610100600160a81b0319166101006001600160a01b0392831681029190911783556040840151600184015560608401516002840180546001600160a01b03199081169285169290921790556080850151600385015560a0850151600485018054831691851691909117905560c0850151600585015560e08501516006850155908401516007840155610120909301516008909201805490931691161790556000826001811115610ab957610ab96114f0565b03610b3757604051635c46a7ef60e11b81523360048201523060248201526044810187905260806064820152600060848201526001600160a01b0388169063b88d4fde9060a401600060405180830381600087803b158015610b1a57600080fd5b505af1158015610b2e573d6000803e3d6000fd5b50505050610b9d565b604051637921219560e11b81526001600160a01b0388169063f242432a90610b6a90339030908b906001906004016117c8565b600060405180830381600087803b158015610b8457600080fd5b505af1158015610b98573d6000803e3d6000fd5b505050505b6001600160a01b038716817f5642063a4aff4f5b5f94dbc72fda70e5bcfd2fa7474b2c87213561cfd852ef8987898842610bd78a826117a7565b604080516001600160a01b0390961686526020860194909452928401919091526060830152608082015260a00160405180910390a350505050505050565b610c1d611021565b6001600160a01b038116610c825760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161034b565b610c8b81611080565b50565b6000818152600260205260409020600701544211610cee5760405162461bcd60e51b815260206004820152601d60248201527f41756374696f6e3a2061756374696f6e206e6f742066696e6973686564000000604482015260640161034b565b6000818152600260205260409020600801546001600160a01b0316331480610d2f57506000818152600260205260409020600401546001600160a01b031633145b610d8c5760405162461bcd60e51b815260206004820152602860248201527f41756374696f6e3a20646f6e27742068617665207065726d697373696f6e20746044820152670de40ccd2dcd2e6d60c31b606482015260840161034b565b6000818152600260205260408120600401546001600160a01b0316610dba57610db36102ee565b9050610dd7565b506000818152600260205260409020600401546001600160a01b03165b60008281526002602052604081205460ff166001811115610dfa57610dfa6114f0565b03610e81576000828152600260205260409081902080546001909101549151632142170760e11b81526101009091046001600160a01b0316916342842e0e91610e4a913091869190600401611800565b600060405180830381600087803b158015610e6457600080fd5b505af1158015610e78573d6000803e3d6000fd5b50505050610f2a565b600160008381526002602052604090205460ff166001811115610ea657610ea66114f0565b03610f2a576000828152600260205260409081902080546001918201549251637921219560e11b81526101009091046001600160a01b03169263f242432a92610ef7923092879290916004016117c8565b600060405180830381600087803b158015610f1157600080fd5b505af1158015610f25573d6000803e3d6000fd5b505050505b600082815260026020819052604090912001546001600160a01b0316610f9e57600082815260026020526040808220600881015460059091015491516001600160a01b039091169282156108fc02929190818181858888f19350505050158015610f98573d6000803e3d6000fd5b50610fd6565b6000828152600260208190526040909120600881015460058201549190920154610fd6926001600160a01b03918216929116906110d2565b60008281526002602052604080822060050154905190916001600160a01b0384169185917fd698efed43caa57c551ea82d130cb267e986a6575baa1093173ab63a6dd28d3e91a45050565b3361102a6102ee565b6001600160a01b0316146102ec5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161034b565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160a01b03831660248201526044810182905261113590849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611161565b505050565b61115b846323b872dd60e01b8585856040516024016110fe93929190611800565b50505050565b60006111b6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166112369092919063ffffffff16565b90508051600014806111d75750808060200190518101906111d79190611785565b6111355760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161034b565b60606102d2848460008585600080866001600160a01b0316858760405161125d9190611848565b60006040518083038185875af1925050503d806000811461129a576040519150601f19603f3d011682016040523d82523d6000602084013e61129f565b606091505b50915091506112b0878383876112bb565b979650505050505050565b6060831561132a578251600003611323576001600160a01b0385163b6113235760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161034b565b50816102d2565b6102d2838381511561133f5781518083602001fd5b8060405162461bcd60e51b815260040161034b9190611864565b60006020828403121561136b57600080fd5b81356001600160e01b03198116811461138357600080fd5b9392505050565b80356001600160a01b03811681146113a157600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156113e4576113e46113a6565b604052919050565b600082601f8301126113fd57600080fd5b81356001600160401b03811115611416576114166113a6565b611429601f8201601f19166020016113bc565b81815284602083860101111561143e57600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000806080858703121561147157600080fd5b61147a8561138a565b93506114886020860161138a565b92506040850135915060608501356001600160401b038111156114aa57600080fd5b6114b6878288016113ec565b91505092959194509250565b6001600160e01b031991909116815260200190565b6000602082840312156114e957600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b610140810160028c1061152957634e487b7160e01b600052602160045260246000fd5b9a81526001600160a01b03998a16602082015260408101989098529588166060880152608087019490945291861660a086015260c085015260e08401526101008301529091166101209091015290565b600082601f83011261158a57600080fd5b813560206001600160401b038211156115a5576115a56113a6565b8160051b6115b48282016113bc565b92835284810182019282810190878511156115ce57600080fd5b83870192505b848310156112b0578235825291830191908301906115d4565b600080600080600060a0868803121561160557600080fd5b61160e8661138a565b945061161c6020870161138a565b935060408601356001600160401b038082111561163857600080fd5b61164489838a01611579565b9450606088013591508082111561165a57600080fd5b61166689838a01611579565b9350608088013591508082111561167c57600080fd5b50611689888289016113ec565b9150509295509295909350565b600080604083850312156116a957600080fd5b50508035926020909101359150565b600080600080600060a086880312156116d057600080fd5b6116d98661138a565b94506116e76020870161138a565b9350604086013592506060860135915060808601356001600160401b0381111561171057600080fd5b611689888289016113ec565b600080600080600060a0868803121561173457600080fd5b61173d8661138a565b9450602086013593506117526040870161138a565b94979396509394606081013594506080013592915050565b60006020828403121561177c57600080fd5b6113838261138a565b60006020828403121561179757600080fd5b8151801515811461138357600080fd5b808201808211156102c357634e487b7160e01b600052601160045260246000fd5b6001600160a01b0394851681529290931660208301526040820152606081019190915260a06080820181905260009082015260c00190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60005b8381101561183f578181015183820152602001611827565b50506000910152565b6000825161185a818460208701611824565b9190910192915050565b6020815260008251806020840152611883816040850160208701611824565b601f01601f1916919091016040019291505056fea164736f6c6343000813000a",
  "deployedBytecode": "0x60806040526004361061008c5760003560e01c806301ffc9a714610091578063150b7a02146100c65780631edbc5be146100f3578063715018a6146101835780638da5cb5b1461019a578063bc197c81146101c7578063cd772f5c146101f3578063f23a6e6114610206578063f2df504714610232578063f2fde38b14610252578063fde6305614610272575b600080fd5b34801561009d57600080fd5b506100b16100ac366004611359565b610292565b60405190151581526020015b60405180910390f35b3480156100d257600080fd5b506100e66100e136600461145b565b6102c9565b6040516100bd91906114c2565b3480156100ff57600080fd5b5061016d61010e3660046114d7565b600260208190526000918252604090912080546001820154928201546003830154600484015460058501546006860154600787015460089097015460ff8716986101009097046001600160a01b0390811698968116969481169491168a565b6040516100bd9a99989796959493929190611506565b34801561018f57600080fd5b506101986102da565b005b3480156101a657600080fd5b506101af6102ee565b6040516001600160a01b0390911681526020016100bd565b3480156101d357600080fd5b506100e66101e23660046115ed565b63bc197c8160e01b95945050505050565b610198610201366004611696565b6102fd565b34801561021257600080fd5b506100e66102213660046116b8565b63f23a6e6160e01b95945050505050565b34801561023e57600080fd5b5061019861024d36600461171c565b610796565b34801561025e57600080fd5b5061019861026d36600461176a565b610c15565b34801561027e57600080fd5b5061019861028d3660046114d7565b610c8e565b60006001600160e01b03198216630271189760e51b14806102c357506301ffc9a760e01b6001600160e01b03198316145b92915050565b630a85bd0160e11b5b949350505050565b6102e2611021565b6102ec6000611080565b565b6001546001600160a01b031690565b6002600054036103545760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b60026000818155838152602091909152604090206007015442106103c95760405162461bcd60e51b815260206004820152602660248201527f41756374696f6e3a20546869732061756374696f6e20616c72656164792066696044820152651b9a5cda195960d21b606482015260840161034b565b60008281526002602052604090206003015481101561043f5760405162461bcd60e51b815260206004820152602c60248201527f41756374696f6e3a20626964207072696365206973206c6f77207468616e206d60448201526b696e696d756d20707269636560a01b606482015260840161034b565b60008281526002602052604090206005015481116104af5760405162461bcd60e51b815260206004820152602760248201527f41756374696f6e3a20626964207072696365206973206c6f77207468616e206c604482015266617374206f6e6560c81b606482015260840161034b565b600082815260026020526040808220815161014081019092528054829060ff1660018111156104e0576104e06114f0565b60018111156104f1576104f16114f0565b815281546001600160a01b0361010091829004811660208085019190915260018086015460408087019190915260028088015485166060880152600388015460808801526004880154851660a080890191909152600589015460c0808a019190915260068a015460e08a015260078a01549789019790975260089098015490941661012090960195909552948601805193870180513390925289905260008a81529290915292902084518154959650919492938693919291839160ff19919091169083818111156105c4576105c46114f0565b021790555060208201518154610100600160a81b0319166101006001600160a01b0392831681029190911783556040840151600184015560608401516002840180546001600160a01b03199081169285169290921790556080850151600385015560a0850151600485018054831691851691909117905560c0850151600585015560e085015160068501559084015160078401556101209093015160089092018054909316918116919091179091558216156106dd5760608301516001600160a01b03166106c4576040516001600160a01b0383169082156108fc029083906000818181858888f193505050501580156106c2573d6000803e3d6000fd5b505b60608301516106dd906001600160a01b031683836110d2565b60608301516001600160a01b03166107415734841461073c5760405162461bcd60e51b815260206004820152601b60248201527a105d58dd1a5bdb8e881a5b9d985b1a5908195d1a08185b5bdd5b9d602a1b604482015260640161034b565b61075b565b606083015161075b906001600160a01b031633308761113a565b6040518490339087907fb556ff269c1b6714f432c36431e2041d28436a73b6c3f19c021827bbdc6bfc2990600090a450506001600055505050565b6040516301ffc9a760e01b81526000906001600160a01b038716906301ffc9a7906107cc906380ac58cd60e01b906004016114c2565b602060405180830381865afa1580156107e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080d9190611785565b1561081a575060006108e0565b6040516301ffc9a760e01b81526001600160a01b038716906301ffc9a79061084d90636cdb3d1360e11b906004016114c2565b602060405180830381865afa15801561086a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088e9190611785565b1561089b575060016108e0565b60405162461bcd60e51b815260206004820152601a602482015279696e76616c696420636f6c6c656374696f6e206164647265737360301b604482015260640161034b565b600061094f878787876040516001600160601b031933606090811b8216602084015286811b821660348401526048830186905284901b166068820152607c810182905243609c82015260009060bc01604051602081830303815290604052805190602001209050949350505050565b905060405180610140016040528083600181111561096f5761096f6114f0565b8152602001886001600160a01b03168152602001878152602001866001600160a01b0316815260200185815260200160006001600160a01b031681526020016000815260200142815260200184426109c791906117a7565b815233602091820152600083815260029091526040902081518154829060ff1916600183818111156109fb576109fb6114f0565b021790555060208201518154610100600160a81b0319166101006001600160a01b0392831681029190911783556040840151600184015560608401516002840180546001600160a01b03199081169285169290921790556080850151600385015560a0850151600485018054831691851691909117905560c0850151600585015560e08501516006850155908401516007840155610120909301516008909201805490931691161790556000826001811115610ab957610ab96114f0565b03610b3757604051635c46a7ef60e11b81523360048201523060248201526044810187905260806064820152600060848201526001600160a01b0388169063b88d4fde9060a401600060405180830381600087803b158015610b1a57600080fd5b505af1158015610b2e573d6000803e3d6000fd5b50505050610b9d565b604051637921219560e11b81526001600160a01b0388169063f242432a90610b6a90339030908b906001906004016117c8565b600060405180830381600087803b158015610b8457600080fd5b505af1158015610b98573d6000803e3d6000fd5b505050505b6001600160a01b038716817f5642063a4aff4f5b5f94dbc72fda70e5bcfd2fa7474b2c87213561cfd852ef8987898842610bd78a826117a7565b604080516001600160a01b0390961686526020860194909452928401919091526060830152608082015260a00160405180910390a350505050505050565b610c1d611021565b6001600160a01b038116610c825760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161034b565b610c8b81611080565b50565b6000818152600260205260409020600701544211610cee5760405162461bcd60e51b815260206004820152601d60248201527f41756374696f6e3a2061756374696f6e206e6f742066696e6973686564000000604482015260640161034b565b6000818152600260205260409020600801546001600160a01b0316331480610d2f57506000818152600260205260409020600401546001600160a01b031633145b610d8c5760405162461bcd60e51b815260206004820152602860248201527f41756374696f6e3a20646f6e27742068617665207065726d697373696f6e20746044820152670de40ccd2dcd2e6d60c31b606482015260840161034b565b6000818152600260205260408120600401546001600160a01b0316610dba57610db36102ee565b9050610dd7565b506000818152600260205260409020600401546001600160a01b03165b60008281526002602052604081205460ff166001811115610dfa57610dfa6114f0565b03610e81576000828152600260205260409081902080546001909101549151632142170760e11b81526101009091046001600160a01b0316916342842e0e91610e4a913091869190600401611800565b600060405180830381600087803b158015610e6457600080fd5b505af1158015610e78573d6000803e3d6000fd5b50505050610f2a565b600160008381526002602052604090205460ff166001811115610ea657610ea66114f0565b03610f2a576000828152600260205260409081902080546001918201549251637921219560e11b81526101009091046001600160a01b03169263f242432a92610ef7923092879290916004016117c8565b600060405180830381600087803b158015610f1157600080fd5b505af1158015610f25573d6000803e3d6000fd5b505050505b600082815260026020819052604090912001546001600160a01b0316610f9e57600082815260026020526040808220600881015460059091015491516001600160a01b039091169282156108fc02929190818181858888f19350505050158015610f98573d6000803e3d6000fd5b50610fd6565b6000828152600260208190526040909120600881015460058201549190920154610fd6926001600160a01b03918216929116906110d2565b60008281526002602052604080822060050154905190916001600160a01b0384169185917fd698efed43caa57c551ea82d130cb267e986a6575baa1093173ab63a6dd28d3e91a45050565b3361102a6102ee565b6001600160a01b0316146102ec5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161034b565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160a01b03831660248201526044810182905261113590849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611161565b505050565b61115b846323b872dd60e01b8585856040516024016110fe93929190611800565b50505050565b60006111b6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166112369092919063ffffffff16565b90508051600014806111d75750808060200190518101906111d79190611785565b6111355760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161034b565b60606102d2848460008585600080866001600160a01b0316858760405161125d9190611848565b60006040518083038185875af1925050503d806000811461129a576040519150601f19603f3d011682016040523d82523d6000602084013e61129f565b606091505b50915091506112b0878383876112bb565b979650505050505050565b6060831561132a578251600003611323576001600160a01b0385163b6113235760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161034b565b50816102d2565b6102d2838381511561133f5781518083602001fd5b8060405162461bcd60e51b815260040161034b9190611864565b60006020828403121561136b57600080fd5b81356001600160e01b03198116811461138357600080fd5b9392505050565b80356001600160a01b03811681146113a157600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156113e4576113e46113a6565b604052919050565b600082601f8301126113fd57600080fd5b81356001600160401b03811115611416576114166113a6565b611429601f8201601f19166020016113bc565b81815284602083860101111561143e57600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000806080858703121561147157600080fd5b61147a8561138a565b93506114886020860161138a565b92506040850135915060608501356001600160401b038111156114aa57600080fd5b6114b6878288016113ec565b91505092959194509250565b6001600160e01b031991909116815260200190565b6000602082840312156114e957600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b610140810160028c1061152957634e487b7160e01b600052602160045260246000fd5b9a81526001600160a01b03998a16602082015260408101989098529588166060880152608087019490945291861660a086015260c085015260e08401526101008301529091166101209091015290565b600082601f83011261158a57600080fd5b813560206001600160401b038211156115a5576115a56113a6565b8160051b6115b48282016113bc565b92835284810182019282810190878511156115ce57600080fd5b83870192505b848310156112b0578235825291830191908301906115d4565b600080600080600060a0868803121561160557600080fd5b61160e8661138a565b945061161c6020870161138a565b935060408601356001600160401b038082111561163857600080fd5b61164489838a01611579565b9450606088013591508082111561165a57600080fd5b61166689838a01611579565b9350608088013591508082111561167c57600080fd5b50611689888289016113ec565b9150509295509295909350565b600080604083850312156116a957600080fd5b50508035926020909101359150565b600080600080600060a086880312156116d057600080fd5b6116d98661138a565b94506116e76020870161138a565b9350604086013592506060860135915060808601356001600160401b0381111561171057600080fd5b611689888289016113ec565b600080600080600060a0868803121561173457600080fd5b61173d8661138a565b9450602086013593506117526040870161138a565b94979396509394606081013594506080013592915050565b60006020828403121561177c57600080fd5b6113838261138a565b60006020828403121561179757600080fd5b8151801515811461138357600080fd5b808201808211156102c357634e487b7160e01b600052601160045260246000fd5b6001600160a01b0394851681529290931660208301526040820152606081019190915260a06080820181905260009082015260c00190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60005b8381101561183f578181015183820152602001611827565b50506000910152565b6000825161185a818460208701611824565b9190910192915050565b6020815260008251806020840152611883816040850160208701611824565b601f01601f1916919091016040019291505056fea164736f6c6343000813000a",
  "devdoc": {
    "events": {
      "AuctionStarted(bytes32,address,address,uint256,uint256,uint256,uint256)": {
        "details": "emit this event when auction started"
      },
      "Finished(bytes32,address,uint256)": {
        "details": "emit this event when auction finished"
      },
      "NewBid(bytes32,address,uint256)": {
        "details": "emit this event when new bid added"
      }
    },
    "kind": "dev",
    "methods": {
      "bid(bytes32,uint256)": {
        "details": "This functions changes last bid params, and release last bidder's token      and locks new bidder's token",
        "params": {
          "_id": "id of auction",
          "_price": "new bidding price"
        }
      },
      "createAuction(address,uint256,address,uint256,uint256)": {
        "params": {
          "_collection": "address of collection",
          "_duration": "duration of auction",
          "_minPrice": "minimum price of bidF",
          "_paymentToken": "address of bid token",
          "_tokenId": "token id of nft"
        }
      },
      "finish(bytes32)": {
        "details": "This function finishs auction.      Sends asset to winner and sends bid token to owner.",
        "params": {
          "_id": "id of auction"
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "auctions": {
        "details": "acutions"
      }
    },
    "title": "English Auction Manager Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "bid(bytes32,uint256)": {
        "notice": "make a new bid"
      },
      "createAuction(address,uint256,address,uint256,uint256)": {
        "notice": "create auction"
      },
      "finish(bytes32)": {
        "notice": "finish auction"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13338,
        "contract": "contracts/AuctionManage.sol:AuctionManager",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1291,
        "contract": "contracts/AuctionManage.sol:AuctionManager",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 8574,
        "contract": "contracts/AuctionManage.sol:AuctionManager",
        "label": "auctions",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_struct(Auction)13452_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(AssetType)13378": {
        "encoding": "inplace",
        "label": "enum AssetType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_bytes32,t_struct(Auction)13452_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Auction)",
        "numberOfBytes": "32",
        "value": "t_struct(Auction)13452_storage"
      },
      "t_struct(Auction)13452_storage": {
        "encoding": "inplace",
        "label": "struct Auction",
        "members": [
          {
            "astId": 13433,
            "contract": "contracts/AuctionManage.sol:AuctionManager",
            "label": "assetType",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(AssetType)13378"
          },
          {
            "astId": 13435,
            "contract": "contracts/AuctionManage.sol:AuctionManager",
            "label": "collection",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 13437,
            "contract": "contracts/AuctionManage.sol:AuctionManager",
            "label": "tokenId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 13439,
            "contract": "contracts/AuctionManage.sol:AuctionManager",
            "label": "paymentToken",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 13441,
            "contract": "contracts/AuctionManage.sol:AuctionManager",
            "label": "minPrice",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 13443,
            "contract": "contracts/AuctionManage.sol:AuctionManager",
            "label": "lastBidder",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 13445,
            "contract": "contracts/AuctionManage.sol:AuctionManager",
            "label": "bidPrice",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 13447,
            "contract": "contracts/AuctionManage.sol:AuctionManager",
            "label": "startTime",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 13449,
            "contract": "contracts/AuctionManage.sol:AuctionManager",
            "label": "endTime",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 13451,
            "contract": "contracts/AuctionManage.sol:AuctionManager",
            "label": "owner",
            "offset": 0,
            "slot": "8",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}