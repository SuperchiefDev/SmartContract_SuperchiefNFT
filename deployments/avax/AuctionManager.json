{
  "address": "0x386CF6bC5D0E32bc7080eB4a04bDC4FD0F592d74",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "AuctionCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "bidPrice",
          "type": "uint256"
        }
      ],
      "name": "AuctionFinished",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "name": "AuctionStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "name": "AuctionTimeExtended",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "paymentToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "rate",
              "type": "uint16"
            },
            {
              "internalType": "address payable",
              "name": "recipient",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct Fee[]",
          "name": "fees",
          "type": "tuple[]"
        }
      ],
      "name": "NewAuction",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "bidPrice",
          "type": "uint256"
        }
      ],
      "name": "NewBid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IExecutionDelegate",
          "name": "executionDelegate",
          "type": "address"
        }
      ],
      "name": "NewExecutionDelegate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "INVERSE_BASIS_POINT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "auctions",
      "outputs": [
        {
          "internalType": "enum AssetType",
          "name": "assetType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "paymentToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minWinPercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lastBidder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "bidPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "bid",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        }
      ],
      "name": "cancel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "paymentToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "minPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minWinPercent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint16",
                  "name": "rate",
                  "type": "uint16"
                },
                {
                  "internalType": "address payable",
                  "name": "recipient",
                  "type": "address"
                }
              ],
              "internalType": "struct Fee[]",
              "name": "fees",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct AuctionCreateParam",
          "name": "_param",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            }
          ],
          "internalType": "struct Sig",
          "name": "_sig",
          "type": "tuple"
        }
      ],
      "name": "createAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "executionDelegate",
      "outputs": [
        {
          "internalType": "contract IExecutionDelegate",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        }
      ],
      "name": "finish",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IExecutionDelegate",
          "name": "_executionDelegate",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IExecutionDelegate",
          "name": "_executionDelegate",
          "type": "address"
        }
      ],
      "name": "setExecutionDelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x48f8953bad034a4ebaa4666d16df96bc0b20a03a3dd7bd1d1e4ee965f7c283ab",
  "receipt": {
    "to": null,
    "from": "0x2A7c489047DEF7CB99b14B2295766fF964B6c8E3",
    "contractAddress": "0x386CF6bC5D0E32bc7080eB4a04bDC4FD0F592d74",
    "transactionIndex": 10,
    "gasUsed": "2646916",
    "logsBloom": "0x
    "blockHash": "0x1927951d9477e81d8ff8cda72176c97285e8cc3ee1acbea9090c3da77ee2a6b2",
    "transactionHash": "0x48f8953bad034a4ebaa4666d16df96bc0b20a03a3dd7bd1d1e4ee965f7c283ab",
    "logs": [],
    "blockNumber": 35171186,
    "cumulativeGasUsed": "4730921",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "cb2a084bf3eb2f9f6f4b1a79b789cef9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"AuctionCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bidPrice\",\"type\":\"uint256\"}],\"name\":\"AuctionFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"AuctionStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"AuctionTimeExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"rate\",\"type\":\"uint16\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct Fee[]\",\"name\":\"fees\",\"type\":\"tuple[]\"}],\"name\":\"NewAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bidPrice\",\"type\":\"uint256\"}],\"name\":\"NewBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IExecutionDelegate\",\"name\":\"executionDelegate\",\"type\":\"address\"}],\"name\":\"NewExecutionDelegate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INVERSE_BASIS_POINT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"auctions\",\"outputs\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minWinPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lastBidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bidPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minWinPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"rate\",\"type\":\"uint16\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct Fee[]\",\"name\":\"fees\",\"type\":\"tuple[]\"}],\"internalType\":\"struct AuctionCreateParam\",\"name\":\"_param\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"internalType\":\"struct Sig\",\"name\":\"_sig\",\"type\":\"tuple\"}],\"name\":\"createAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executionDelegate\",\"outputs\":[{\"internalType\":\"contract IExecutionDelegate\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"finish\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IExecutionDelegate\",\"name\":\"_executionDelegate\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IExecutionDelegate\",\"name\":\"_executionDelegate\",\"type\":\"address\"}],\"name\":\"setExecutionDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"AuctionCanceled(bytes32)\":{\"details\":\"emit this event when auction canceled\"},\"AuctionFinished(bytes32,address,uint256)\":{\"details\":\"emit this event when auction finished\"},\"AuctionStarted(bytes32,uint256,uint256)\":{\"details\":\"emit this event when auction started\"},\"AuctionTimeExtended(bytes32,uint256)\":{\"details\":\"emit this event when bid makes in 15 minutes from endTime\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"NewAuction(bytes32,address,address,uint256,uint256,uint256,uint256,uint256,(uint16,address)[])\":{\"details\":\"emit this event when auction added\"},\"NewBid(bytes32,address,uint256)\":{\"details\":\"emit this event when new bid added\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"bid(bytes32,uint256)\":{\"details\":\"This functions changes last bid params, and release last bidder's token      and locks new bidder's token\",\"params\":{\"_id\":\"id of auction\",\"_price\":\"new bidding price\"}},\"cancel(bytes32)\":{\"details\":\"This function cancels auction.      Sends asset to owner.\",\"params\":{\"_id\":\"id of auction\"}},\"createAuction((address,uint256,uint256,address,uint256,uint256,uint256,uint256,(uint16,address)[]),(bytes32,bytes32,uint8))\":{\"params\":{\"_param\":\"auction params\",\"_sig\":\"backend signature to validate fee\"}},\"finish(bytes32)\":{\"details\":\"This function finishs auction.      Sends asset to winner and sends bid token to owner.\",\"params\":{\"_id\":\"id of auction\"}},\"initialize(address)\":{\"params\":{\"_executionDelegate\":\"execution delegate address\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"auctions\":{\"details\":\"acutions\"},\"executionDelegate\":{\"details\":\"execution delegate\"}},\"title\":\"English Auction Manager Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"bid(bytes32,uint256)\":{\"notice\":\"make a new bid\"},\"cancel(bytes32)\":{\"notice\":\"cancel auction\"},\"createAuction((address,uint256,uint256,address,uint256,uint256,uint256,uint256,(uint16,address)[]),(bytes32,bytes32,uint8))\":{\"notice\":\"create auction\"},\"finish(bytes32)\":{\"notice\":\"finish auction\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AuctionManage.sol\":\"AuctionManager\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x584ebdf9c1118a7c773f98788e3f3ede01982bdf8932aa06f5acc7d54876e161\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb607cb94c27e89750f5ae2ccebcb94e654e926f6125f4fd4c6262c89875118ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcab667ddad478ff0d39c2053ca77fac778af8483c18ab07d810277b4216fd582\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x2e024ca51ce5abe16c0d34e6992a1104f356e2244eb4ccbec970435e8b3405e3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3dd5e1a66a56f30302108a1da97d677a42b1daa60e503696b2bcbbf3e4c95bcb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x67ef46fef257faae47adb630aad49694dda0334e5f7a7c5fb386243b974886b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/AuctionManage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport {IERC721, IERC165} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {ERC721Holder} from \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport {ERC1155Holder} from \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\nimport {SafeERC20, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\nimport {IExecutionDelegate} from \\\"./interfaces/IExecutionDelegate.sol\\\";\\nimport {ReentrancyGuard} from \\\"./libraries/ReentrancyGuard.sol\\\";\\nimport {AssetType, Auction, AuctionCreateParam, Fee, Sig} from \\\"./libraries/Structs.sol\\\";\\n\\n/**\\n * @title English Auction Manager Contract\\n */\\ncontract AuctionManager is\\n  ReentrancyGuard,\\n  ERC721Holder,\\n  ERC1155Holder,\\n  OwnableUpgradeable,\\n  UUPSUpgradeable\\n{\\n  using SafeERC20 for IERC20;\\n\\n  uint256 public constant INVERSE_BASIS_POINT = 10000;\\n\\n  /// @dev acutions\\n  mapping(bytes32 => Auction) public auctions;\\n  /// @dev execution delegate\\n  IExecutionDelegate public executionDelegate;\\n\\n  /// @dev emit this event when auction added\\n  event NewAuction(\\n    bytes32 indexed id,\\n    address indexed collection,\\n    address paymentToken,\\n    uint256 tokenId,\\n    uint256 amount,\\n    uint256 minPrice,\\n    uint256 startTime,\\n    uint256 duration,\\n    Fee[] fees\\n  );\\n\\n  /// @dev emit this event when auction started\\n  event AuctionStarted(bytes32 indexed id, uint256 startTime, uint256 endTime);\\n  /// @dev emit this event when new bid added\\n  event NewBid(bytes32 indexed id, address indexed bidder, uint256 indexed bidPrice);\\n  /// @dev emit this event when auction finished\\n  event AuctionFinished(bytes32 indexed id, address indexed winner, uint256 indexed bidPrice);\\n  /// @dev emit this event when auction canceled\\n  event AuctionCanceled(bytes32 indexed id);\\n  /// @dev emit this event when bid makes in 15 minutes from endTime\\n  event AuctionTimeExtended(bytes32 indexed id, uint256 endTime);\\n  event NewExecutionDelegate(IExecutionDelegate executionDelegate);\\n\\n  constructor() {}\\n\\n  /* Constructor (for ERC1967) */\\n  /**\\n   * @param _executionDelegate execution delegate address\\n   */\\n  function initialize(IExecutionDelegate _executionDelegate) public initializer {\\n    __Ownable_init();\\n\\n    executionDelegate = _executionDelegate;\\n  }\\n\\n  // required by the OZ UUPS module\\n  function _authorizeUpgrade(address) internal override onlyOwner {}\\n\\n  /**\\n   * @dev validate signature of contract owner\\n   * @param sender address of sender\\n   * @param sig sign of owner\\n   */\\n  function validateCreateSign(\\n    address sender,\\n    address collection,\\n    uint256 tokenId,\\n    uint256 amount,\\n    Fee[] memory fees,\\n    Sig calldata sig\\n  ) internal view returns (bool) {\\n    bytes32 messageHash = keccak256(abi.encodePacked(sender, collection, tokenId, amount));\\n    for (uint256 i = 0; i < fees.length; i++) {\\n      messageHash = keccak256((abi.encodePacked(messageHash, fees[i].rate, fees[i].recipient)));\\n    }\\n\\n    bytes32 ethSignedMessageHash = keccak256(\\n      abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", messageHash)\\n    );\\n\\n    return executionDelegate.signer() == ecrecover(ethSignedMessageHash, sig.v, sig.r, sig.s);\\n  }\\n\\n  /**\\n   * @notice create auction\\n   * @param _param auction params\\n   * @param _sig backend signature to validate fee\\n   */\\n  function createAuction(AuctionCreateParam memory _param, Sig calldata _sig) external {\\n    require(\\n      validateCreateSign(\\n        msg.sender,\\n        _param.collection,\\n        _param.tokenId,\\n        _param.amount,\\n        _param.fees,\\n        _sig\\n      ),\\n      \\\"Acution: invalid signature\\\"\\n    );\\n    AssetType assetType;\\n    if (IERC165(_param.collection).supportsInterface(type(IERC721).interfaceId)) {\\n      require(_param.amount == 1, \\\"Auction: invalid token amount\\\");\\n      assetType = AssetType.ERC721;\\n    } else if (IERC165(_param.collection).supportsInterface(type(IERC1155).interfaceId)) {\\n      assetType = AssetType.ERC1155;\\n    } else {\\n      revert(\\\"Auction: invalid collection address\\\");\\n    }\\n\\n    // calculate id of auction\\n    bytes32 id = _calculateHash(\\n      _param.collection,\\n      _param.tokenId,\\n      _param.paymentToken,\\n      _param.minPrice\\n    );\\n\\n    Auction storage auction = auctions[id];\\n    auction.assetType = assetType;\\n    auction.collection = _param.collection;\\n    auction.tokenId = _param.tokenId;\\n    auction.paymentToken = _param.paymentToken;\\n    auction.minPrice = _param.minPrice;\\n    auction.startTime = _param.startTime;\\n    auction.duration = _param.duration;\\n    auction.minWinPercent = _param.minWinPercent;\\n    auction.amount = _param.amount;\\n    auction.owner = msg.sender;\\n\\n    for (uint256 i = 0; i < _param.fees.length; i++) {\\n      auction.fees.push(_param.fees[i]);\\n    }\\n\\n    // lock asset to auction contract\\n    if (assetType == AssetType.ERC721) {\\n      IERC721(_param.collection).safeTransferFrom(msg.sender, address(this), _param.tokenId);\\n    } else {\\n      IERC1155(_param.collection).safeTransferFrom(\\n        msg.sender,\\n        address(this),\\n        _param.tokenId,\\n        _param.amount,\\n        \\\"\\\"\\n      );\\n    }\\n\\n    emit NewAuction(\\n      id,\\n      _param.collection,\\n      _param.paymentToken,\\n      _param.tokenId,\\n      _param.amount,\\n      _param.minPrice,\\n      _param.startTime,\\n      _param.duration,\\n      auction.fees\\n    );\\n  }\\n\\n  /**\\n   * @notice make a new bid\\n   * @dev This functions changes last bid params, and release last bidder's token\\n   *      and locks new bidder's token\\n   * @param _id id of auction\\n   * @param _price new bidding price\\n   */\\n  function bid(bytes32 _id, uint256 _price) external payable nonReentrant {\\n    require(block.timestamp > auctions[_id].startTime, \\\"Auction: Wait until the start time comes\\\");\\n    require(\\n      block.timestamp < auctions[_id].endTime || auctions[_id].endTime == 0,\\n      \\\"Auction: This auction already finished\\\"\\n    );\\n    require(_price >= auctions[_id].minPrice, \\\"Auction: bid price is low than minimum price\\\");\\n    require(\\n      _price >= (auctions[_id].bidPrice * auctions[_id].minWinPercent) / 100 ||\\n        auctions[_id].lastBidder == address(0),\\n      \\\"Auction: bid price is low than minimum win price\\\"\\n    );\\n\\n    Auction storage auction = auctions[_id];\\n\\n    if (auction.endTime == 0) {\\n      auction.startTime = block.timestamp;\\n      auction.endTime = block.timestamp + auction.duration;\\n\\n      emit AuctionStarted(_id, auction.startTime, auction.endTime);\\n    }\\n\\n    address previousBidder = auction.lastBidder;\\n    uint256 previousPrice = auction.bidPrice;\\n\\n    auction.lastBidder = msg.sender;\\n    auction.bidPrice = _price;\\n\\n    if (block.timestamp + 900 > auction.endTime) {\\n      // Any bids made within the last 15 minutes of auction deadline Extends Auction 15 minutes\\n      auction.endTime += 900;\\n\\n      emit AuctionTimeExtended(_id, auction.endTime);\\n    }\\n\\n    if (previousBidder != address(0)) {\\n      // release last bidder's token\\n      if (auction.paymentToken == address(0)) {\\n        payable(previousBidder).transfer(previousPrice);\\n      } else {\\n        IERC20(auction.paymentToken).safeTransfer(previousBidder, previousPrice);\\n      }\\n    }\\n\\n    // lock new bidder's token\\n    if (auction.paymentToken == address(0)) {\\n      require(_price == msg.value, \\\"Auction: invalid eth amount\\\");\\n    } else {\\n      IERC20(auction.paymentToken).safeTransferFrom(msg.sender, address(this), _price);\\n    }\\n\\n    emit NewBid(_id, msg.sender, _price);\\n  }\\n\\n  /**\\n   * @notice finish auction\\n   * @dev This function finishs auction.\\n   *      Sends asset to winner and sends bid token to owner.\\n   * @param _id id of auction\\n   */\\n  function finish(bytes32 _id) external {\\n    require(auctions[_id].endTime > 0, \\\"Auction: auction not started yet\\\");\\n    require(block.timestamp > auctions[_id].endTime, \\\"Auction: auction not finished\\\");\\n    require(\\n      auctions[_id].owner == msg.sender || auctions[_id].lastBidder == msg.sender,\\n      \\\"Auction: don't have permission to finish\\\"\\n    );\\n\\n    Fee[] memory fees = executionDelegate.calcuateFee(\\n      auctions[_id].collection,\\n      auctions[_id].tokenId,\\n      auctions[_id].fees\\n    );\\n\\n    _executeFundsTransfer(\\n      auctions[_id].owner,\\n      auctions[_id].paymentToken,\\n      fees,\\n      auctions[_id].bidPrice\\n    );\\n    _executeTokenTransfer(\\n      auctions[_id].collection,\\n      auctions[_id].lastBidder,\\n      auctions[_id].tokenId,\\n      auctions[_id].amount,\\n      auctions[_id].assetType\\n    );\\n\\n    emit AuctionFinished(_id, auctions[_id].lastBidder, auctions[_id].bidPrice);\\n  }\\n\\n  /**\\n   * @notice cancel auction\\n   * @dev This function cancels auction.\\n   *      Sends asset to owner.\\n   * @param _id id of auction\\n   */\\n  function cancel(bytes32 _id) external {\\n    require(auctions[_id].endTime == 0, \\\"Auction: auction already started\\\");\\n    require(auctions[_id].owner == msg.sender, \\\"Auction: not owner\\\");\\n\\n    _executeTokenTransfer(\\n      auctions[_id].collection,\\n      auctions[_id].owner,\\n      auctions[_id].tokenId,\\n      auctions[_id].amount,\\n      auctions[_id].assetType\\n    );\\n\\n    emit AuctionCanceled(_id);\\n  }\\n\\n  /* Setters */\\n  function setExecutionDelegate(IExecutionDelegate _executionDelegate) external onlyOwner {\\n    require(address(_executionDelegate) != address(0), \\\"Address cannot be zero\\\");\\n    executionDelegate = _executionDelegate;\\n    emit NewExecutionDelegate(executionDelegate);\\n  }\\n\\n  /* Internal functions */\\n\\n  function _calculateHash(\\n    address _collection,\\n    uint256 _tokenId,\\n    address _paymentToken,\\n    uint256 _minPrice\\n  ) private view returns (bytes32) {\\n    return\\n      keccak256(\\n        abi.encodePacked(msg.sender, _collection, _tokenId, _paymentToken, _minPrice, block.number)\\n      );\\n  }\\n\\n  /**\\n   * @dev Execute all ERC20 token / ETH transfers associated with an order match (fees and buyer => seller transfer)\\n   * @param to destination address\\n   * @param paymentToken payment token\\n   * @param fees fees\\n   * @param price price\\n   */\\n  function _executeFundsTransfer(\\n    address to,\\n    address paymentToken,\\n    Fee[] memory fees,\\n    uint256 price\\n  ) internal {\\n    /* Take fee. */\\n    uint256 receiveAmount = _transferFees(fees, paymentToken, price);\\n\\n    /* Transfer remainder to seller. */\\n    _transferTo(paymentToken, to, receiveAmount);\\n  }\\n\\n  /**\\n   * @dev Charge a fee in ETH or WETH\\n   * @param fees fees to distribute\\n   * @param paymentToken address of token to pay in\\n   * @param price price of token\\n   */\\n  function _transferFees(\\n    Fee[] memory fees,\\n    address paymentToken,\\n    uint256 price\\n  ) internal returns (uint256) {\\n    uint256 totalFee = 0;\\n    for (uint8 i = 0; i < fees.length; i++) {\\n      uint256 fee = (price * fees[i].rate) / INVERSE_BASIS_POINT;\\n      _transferTo(paymentToken, fees[i].recipient, fee);\\n      totalFee += fee;\\n    }\\n\\n    require(totalFee <= price, \\\"Total amount of fees are more than the price\\\");\\n\\n    /* Amount that will be received by seller. */\\n    uint256 receiveAmount = price - totalFee;\\n    return (receiveAmount);\\n  }\\n\\n  /**\\n   * @dev Transfer amount in ETH or WETH\\n   * @param paymentToken address of token to pay in\\n   * @param to token recipient\\n   * @param amount amount to transfer\\n   */\\n  function _transferTo(address paymentToken, address to, uint256 amount) internal {\\n    if (amount == 0) {\\n      return;\\n    }\\n\\n    if (paymentToken == address(0)) {\\n      /* Transfer funds in ETH. */\\n      payable(to).transfer(amount);\\n    } else {\\n      /* Transfer funds in WETH. */\\n      IERC20(paymentToken).safeTransfer(to, amount);\\n    }\\n  }\\n\\n  /**\\n   * @dev Execute call through delegate proxy\\n   * @param collection collection contract address\\n   * @param to buyer address\\n   * @param tokenId tokenId\\n   * @param assetType asset type of the token\\n   */\\n  function _executeTokenTransfer(\\n    address collection,\\n    address to,\\n    uint256 tokenId,\\n    uint256 amount,\\n    AssetType assetType\\n  ) internal {\\n    /* Assert collection exists. */\\n    require(_exists(collection), \\\"Collection does not exist\\\");\\n\\n    /* Call execution delegate. */\\n    if (assetType == AssetType.ERC721) {\\n      IERC721(collection).safeTransferFrom(address(this), to, tokenId);\\n    } else if (assetType == AssetType.ERC1155) {\\n      IERC1155(collection).safeTransferFrom(address(this), to, tokenId, amount, \\\"\\\");\\n    }\\n  }\\n\\n  /**\\n   * @dev Determine if the given address exists\\n   * @param what address to check\\n   */\\n  function _exists(address what) internal view returns (bool) {\\n    uint size;\\n    assembly {\\n      size := extcodesize(what)\\n    }\\n    return size > 0;\\n  }\\n}\\n\",\"keccak256\":\"0xeab730007489e7a52548baf16d4c2861773c1bd1eb954b182b5d70cb18f08112\",\"license\":\"MIT\"},\"contracts/interfaces/IExecutionDelegate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Fee, Sig} from \\\"../libraries/Structs.sol\\\";\\n\\ninterface IExecutionDelegate {\\n  function signer() external view returns (address);\\n\\n  function contracts(address to) external view returns (bool);\\n\\n  function blacklisted(address to) external view returns (bool);\\n\\n  function approveContract(address _contract) external;\\n\\n  function denyContract(address _contract) external;\\n\\n  function revokeApproval() external;\\n\\n  function grantApproval() external;\\n\\n  function transferERC721Unsafe(\\n    address collection,\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) external;\\n\\n  function transferERC721(address collection, address from, address to, uint256 tokenId) external;\\n\\n  function transferERC1155(\\n    address collection,\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    uint256 amount\\n  ) external;\\n\\n  function transferERC20(\\n    address token,\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  function calcuateFee(\\n    address _collection,\\n    uint256 _tokenId,\\n    Fee[] memory _fees\\n  ) external view returns (Fee[] memory fees);\\n\\n  function checkSuperAdmin(address sender, Sig calldata sig) external returns (bool);\\n}\\n\",\"keccak256\":\"0xb99871550fd6ff57b48ffff710485c7688d5789272add76aaac4c02226be03fa\",\"license\":\"MIT\"},\"contracts/libraries/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n  // Booleans are more expensive than uint256 or any type that takes up a full\\n  // word because each write operation emits an extra SLOAD to first read the\\n  // slot's contents, replace the bits taken up by the boolean, and then write\\n  // back. This is the compiler's defense against contract upgrades and\\n  // pointer aliasing, and it cannot be disabled.\\n\\n  // The values being non-zero value makes deployment a bit more expensive,\\n  // but in exchange the refund on every call to nonReentrant will be lower in\\n  // amount. Since refunds are capped to a percentage of the total\\n  // transaction's gas, it is best to keep them low in cases like this one, to\\n  // increase the likelihood of the full refund coming into effect.\\n  uint256 private constant _NOT_ENTERED = 1;\\n  uint256 private constant _ENTERED = 2;\\n\\n  uint256 private _status;\\n\\n  constructor() {\\n    _status = _NOT_ENTERED;\\n  }\\n\\n  /**\\n   * @dev Prevents a contract from calling itself, directly or indirectly.\\n   * Calling a `nonReentrant` function from another `nonReentrant`\\n   * function is not supported. It is possible to prevent this from happening\\n   * by making the `nonReentrant` function external, and make it call a\\n   * `private` function that does the actual work.\\n   */\\n  modifier nonReentrant() {\\n    // On the first call to nonReentrant, _notEntered will be true\\n    require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n    // Any calls to nonReentrant after this point will fail\\n    _status = _ENTERED;\\n\\n    _;\\n\\n    // By storing the original value once again, a refund is triggered (see\\n    // https://eips.ethereum.org/EIPS/eip-2200)\\n    _status = _NOT_ENTERED;\\n  }\\n}\\n\",\"keccak256\":\"0xf41fd84920d5cabbb768943e381d562baa1cd99d604d58aa2011b69bac284065\",\"license\":\"MIT\"},\"contracts/libraries/Structs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nenum Side {\\n  Buy,\\n  Sell\\n}\\n\\nenum SignatureVersion {\\n  Single,\\n  Bulk\\n}\\n\\nenum AssetType {\\n  ERC721,\\n  ERC1155\\n}\\n\\nstruct Fee {\\n  uint16 rate;\\n  address payable recipient;\\n}\\n\\nstruct Order {\\n  address trader;\\n  Side side;\\n  address matchingPolicy;\\n  address collection;\\n  uint256 tokenId;\\n  uint256 amount;\\n  address paymentToken;\\n  uint256 price;\\n  uint256 listingTime;\\n  /* Order expiration timestamp - 0 for oracle cancellations. */\\n  uint256 expirationTime;\\n  Fee[] fees;\\n  uint256 salt;\\n  bytes extraParams;\\n}\\n\\nstruct Input {\\n  Order order;\\n  uint8 v;\\n  bytes32 r;\\n  bytes32 s;\\n  bytes extraSignature;\\n  SignatureVersion signatureVersion;\\n  uint256 blockNumber;\\n}\\n\\nstruct Auction {\\n  AssetType assetType;\\n  address collection;\\n  uint256 tokenId;\\n  uint256 amount;\\n  address paymentToken;\\n  uint256 minPrice;\\n  uint256 minWinPercent;\\n  uint256 startTime;\\n  uint256 endTime;\\n  uint256 duration;\\n  address owner;\\n  address lastBidder;\\n  uint256 bidPrice;\\n  Fee[] fees;\\n}\\n\\nstruct AuctionCreateParam {\\n  address collection;\\n  uint256 tokenId;\\n  uint256 amount;\\n  address paymentToken;\\n  uint256 minPrice;\\n  uint256 minWinPercent;\\n  uint256 startTime;\\n  uint256 duration;\\n  Fee[] fees;\\n}\\n\\nstruct Sig {\\n  bytes32 r;\\n  bytes32 s;\\n  uint8 v;\\n}\\n\",\"keccak256\":\"0xbc99ca7cdf2b1cf72a542857f798b263168192e171a640cc80011b783e3857ff\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523060805234801561001457600080fd5b506001600055608051612e88610051600039600081816104df0152818161051f015281816105a7015281816105e701526106630152612e886000f3fe6080604052600436106100e45760003560e01c806301ffc9a7146100e9578063037c9be21461011e578063150b7a02146101405780631edbc5be1461016d5780633659cfe61461020c5780634f1ef2861461022c57806352d1902d1461023f578063715018a6146102625780638da5cb5b14610277578063986c9b2014610299578063b88c827c146102b9578063bc197c81146102d9578063c4d252f514610305578063c4d66de814610325578063cae6047f14610345578063cd772f5c1461035b578063f23a6e611461036e578063f2fde38b1461039a578063fde63056146103ba575b600080fd5b3480156100f557600080fd5b50610109610104366004612329565b6103da565b60405190151581526020015b60405180910390f35b34801561012a57600080fd5b5061013e610139366004612368565b610411565b005b34801561014c57600080fd5b5061016061015b366004612495565b6104c4565b6040516101159190612500565b34801561017957600080fd5b506101f3610188366004612515565b60ca60205260009081526040902080546001820154600283015460038401546004850154600586015460068701546007880154600889015460098a0154600a8b0154600b909b015460ff8b169b6001600160a01b03610100909c048c169b988916989283169216908d565b6040516101159d9c9b9a99989796959493929190612551565b34801561021857600080fd5b5061013e610227366004612368565b6104d5565b61013e61023a3660046125f2565b61059d565b34801561024b57600080fd5b50610254610656565b604051908152602001610115565b34801561026e57600080fd5b5061013e610704565b34801561028357600080fd5b5061028c610718565b6040516101159190612641565b3480156102a557600080fd5b5060cb5461028c906001600160a01b031681565b3480156102c557600080fd5b5061013e6102d4366004612741565b610727565b3480156102e557600080fd5b506101606102f436600461287d565b63bc197c8160e01b95945050505050565b34801561031157600080fd5b5061013e610320366004612515565b610c62565b34801561033157600080fd5b5061013e610340366004612368565b610d8f565b34801561035157600080fd5b5061025461271081565b61013e61036936600461292a565b610ebc565b34801561037a57600080fd5b5061016061038936600461294c565b63f23a6e6160e01b95945050505050565b3480156103a657600080fd5b5061013e6103b5366004612368565b61137e565b3480156103c657600080fd5b5061013e6103d5366004612515565b6113f4565b60006001600160e01b03198216630271189760e51b148061040b57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6104196116ba565b6001600160a01b03811661046d5760405162461bcd60e51b8152602060048201526016602482015275416464726573732063616e6e6f74206265207a65726f60501b60448201526064015b60405180910390fd5b60cb80546001600160a01b0319166001600160a01b0383169081179091556040517ff9a0f356a7ef079355de09d32ce45cc3cfabc8f118681c19a17501f005a376ac916104b991612641565b60405180910390a150565b630a85bd0160e11b5b949350505050565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361051d5760405162461bcd60e51b8152600401610464906129b4565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661054f611719565b6001600160a01b0316146105755760405162461bcd60e51b815260040161046490612a00565b61057e81611735565b6040805160008082526020820190925261059a9183919061173d565b50565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036105e55760405162461bcd60e51b8152600401610464906129b4565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610617611719565b6001600160a01b03161461063d5760405162461bcd60e51b815260040161046490612a00565b61064682611735565b6106528282600161173d565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146106f15760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c6044820152771b1959081d1a1c9bdd59da0819195b1959d85d1958d85b1b60421b6064820152608401610464565b50600080516020612e3583398151915290565b61070c6116ba565b61071660006118ad565b565b6034546001600160a01b031690565b61074633836000015184602001518560400151866101000151866118ff565b61078f5760405162461bcd60e51b815260206004820152601a60248201527941637574696f6e3a20696e76616c6964207369676e617475726560301b6044820152606401610464565b81516040516301ffc9a760e01b81526000916001600160a01b0316906301ffc9a7906107c6906380ac58cd60e01b90600401612500565b602060405180830381865afa1580156107e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108079190612a4c565b156108685782604001516001146108605760405162461bcd60e51b815260206004820152601d60248201527f41756374696f6e3a20696e76616c696420746f6b656e20616d6f756e740000006044820152606401610464565b506000610940565b82516040516301ffc9a760e01b81526001600160a01b03909116906301ffc9a79061089e90636cdb3d1360e11b90600401612500565b602060405180830381865afa1580156108bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108df9190612a4c565b156108ec57506001610940565b60405162461bcd60e51b815260206004820152602360248201527f41756374696f6e3a20696e76616c696420636f6c6c656374696f6e206164647260448201526265737360e81b6064820152608401610464565b82516020808501516060808701516080880151604080516001600160601b031933861b81168289015297851b8816603482015260488101959095529190921b9094166068830152607c82015243609c808301919091528351808303909101815260bc9091018352805190820120600081815260ca90925291902080548390829060ff1916600183818111156109d7576109d761252e565b0217905550845181546001600160a01b0391821661010002610100600160a81b0319909116178255602086015160018301556060860151600383018054919092166001600160a01b0319918216179091556080860151600483015560c0860151600683015560e0860151600883015560a08601516005830155604086015160028301556009820180549091163317905560005b85610100015151811015610af75781600c018661010001518281518110610a9357610a93612a6e565b602090810291909101810151825460018101845560009384529282902081519301805491909201516001600160a01b031662010000026001600160b01b031990911661ffff9093169290921791909117905580610aef81612a9a565b915050610a6a565b506000836001811115610b0c57610b0c61252e565b03610b7e5784516020860151604051632142170760e11b81526001600160a01b03909216916342842e0e91610b479133913091600401612ab3565b600060405180830381600087803b158015610b6157600080fd5b505af1158015610b75573d6000803e3d6000fd5b50505050610bee565b845160208601516040808801519051637921219560e11b81526001600160a01b039093169263f242432a92610bbb92339230929190600401612ad7565b600060405180830381600087803b158015610bd557600080fd5b505af1158015610be9573d6000803e3d6000fd5b505050505b84600001516001600160a01b0316827f4dc515037e9e7da169401a3b437c9f2b1279015c6fac9b27d550a428aea0f69b8760600151886020015189604001518a608001518b60c001518c60e0015189600c01604051610c539796959493929190612b66565b60405180910390a35050505050565b600081815260ca602052604090206007015415610cc15760405162461bcd60e51b815260206004820181905260248201527f41756374696f6e3a2061756374696f6e20616c726561647920737461727465646044820152606401610464565b600081815260ca60205260409020600901546001600160a01b03163314610d1f5760405162461bcd60e51b815260206004820152601260248201527120bab1ba34b7b71d103737ba1037bbb732b960711b6044820152606401610464565b600081815260ca60205260409020805460098201546001830154600290930154610d61936001600160a01b03610100850481169493169290919060ff16611b56565b60405181907f5f8f216fd2e5bdc47deb48c822665830695f90b549772ae028d6fc3c4832c5b190600090a250565b600154610100900460ff1615808015610dac57506001805460ff16105b80610dcc5750610dbb30611ca5565b158015610dcc57506001805460ff16145b610e2f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610464565b6001805460ff1916811790558015610e51576001805461ff0019166101001790555b610e59611cb4565b60cb80546001600160a01b0319166001600160a01b0384161790558015610652576001805461ff00191681556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b600260005403610f0e5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610464565b6002600090815582815260ca60205260409020600601544211610f845760405162461bcd60e51b815260206004820152602860248201527f41756374696f6e3a205761697420756e74696c207468652073746172742074696044820152676d6520636f6d657360c01b6064820152608401610464565b600082815260ca6020526040902060070154421080610fb25750600082815260ca6020526040902060070154155b61100d5760405162461bcd60e51b815260206004820152602660248201527f41756374696f6e3a20546869732061756374696f6e20616c72656164792066696044820152651b9a5cda195960d21b6064820152608401610464565b600082815260ca60205260409020600401548110156110835760405162461bcd60e51b815260206004820152602c60248201527f41756374696f6e3a20626964207072696365206973206c6f77207468616e206d60448201526b696e696d756d20707269636560a01b6064820152608401610464565b600082815260ca602052604090206005810154600b909101546064916110a891612bb2565b6110b29190612bc9565b811015806110d85750600082815260ca60205260409020600a01546001600160a01b0316155b61113d5760405162461bcd60e51b815260206004820152603060248201527f41756374696f6e3a20626964207072696365206973206c6f77207468616e206d60448201526f696e696d756d2077696e20707269636560801b6064820152608401610464565b600082815260ca6020526040812060078101549091036111b6574260068201819055600882015461116d91612beb565b60078201819055600682015460408051918252602082019290925284917f0ce217feb50009b9d23ac12d250c75804a524a88961e29fed41999b5681e00a8910160405180910390a25b600a81018054600b830180546001600160a01b03198316331790935584905560078301546001600160a01b0390911691906111f342610384612beb565b111561124f5761038483600701600082825461120f9190612beb565b9091555050600783015460405190815285907f0268ffa9ab9e25f14e7f0a1c5fcfd253e78d8258af9dbc5a6cd3f4c9c64650a49060200160405180910390a25b6001600160a01b038216156112c55760038301546001600160a01b03166112ac576040516001600160a01b0383169082156108fc029083906000818181858888f193505050501580156112a6573d6000803e3d6000fd5b506112c5565b60038301546112c5906001600160a01b03168383611ce3565b60038301546001600160a01b0316611329573484146113245760405162461bcd60e51b815260206004820152601b60248201527a105d58dd1a5bdb8e881a5b9d985b1a5908195d1a08185b5bdd5b9d602a1b6044820152606401610464565b611343565b6003830154611343906001600160a01b0316333087611d46565b6040518490339087907fb556ff269c1b6714f432c36431e2041d28436a73b6c3f19c021827bbdc6bfc2990600090a450506001600055505050565b6113866116ba565b6001600160a01b0381166113eb5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610464565b61059a816118ad565b600081815260ca60205260409020600701546114525760405162461bcd60e51b815260206004820181905260248201527f41756374696f6e3a2061756374696f6e206e6f742073746172746564207965746044820152606401610464565b600081815260ca602052604090206007015442116114b25760405162461bcd60e51b815260206004820152601d60248201527f41756374696f6e3a2061756374696f6e206e6f742066696e69736865640000006044820152606401610464565b600081815260ca60205260409020600901546001600160a01b03163314806114f35750600081815260ca60205260409020600a01546001600160a01b031633145b6115505760405162461bcd60e51b815260206004820152602860248201527f41756374696f6e3a20646f6e27742068617665207065726d697373696f6e20746044820152670de40ccd2dcd2e6d60c31b6064820152608401610464565b60cb54600082815260ca602052604080822080546001820154925163377c8e3960e11b815293946001600160a01b0390811694636ef91c72946115a39461010090940490921692600c0190600401612bfe565b600060405180830381865afa1580156115c0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115e89190810190612c2e565b600083815260ca6020526040902060098101546003820154600b90920154929350611624926001600160a01b0391821692909116908490611d6d565b600082815260ca602052604090208054600a8201546001830154600290930154611666936001600160a01b03610100850481169493169290919060ff16611b56565b600082815260ca6020526040808220600b810154600a90910154915190926001600160a01b039092169185917fd1c3886a6c6fefde38bdaa54849c80a66e27da63a47829a4a201c9eaf818ba899190a45050565b336116c3610718565b6001600160a01b0316146107165760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610464565b600080516020612e35833981519152546001600160a01b031690565b61059a6116ba565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156117755761177083611d87565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156117cf575060408051601f3d908101601f191682019092526117cc91810190612ceb565b60015b6118325760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610464565b600080516020612e3583398151915281146118a15760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610464565b50611770838383611e21565b603480546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160601b0319606088811b8216602084015287901b1660348201526048810185905260688101849052600090819060880160405160208183030381529060405280519060200120905060005b84518110156119ff578185828151811061196d5761196d612a6e565b60200260200101516000015186838151811061198b5761198b612a6e565b6020026020010151602001516040516020016119d49392919092835260f09190911b6001600160f01b031916602083015260601b6001600160601b031916602282015260360190565b60405160208183030381529060405280519060200120915080806119f790612a9a565b915050611951565b506040517b0ca2ba3432b932bab69029b4b3b732b21026b2b9b9b0b3b29d05199960211b6020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050600181856040016020810190611a639190612d04565b604080516000815260208181018084529490945260ff909216908201528635606082015290860135608082015260a0016020604051602081039080840390855afa158015611ab5573d6000803e3d6000fd5b505050602060405103516001600160a01b031660cb60009054906101000a90046001600160a01b03166001600160a01b031663238ac9336040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3f9190612d27565b6001600160a01b0316149998505050505050505050565b843b611ba05760405162461bcd60e51b815260206004820152601960248201527810dbdb1b1958dd1a5bdb88191bd95cc81b9bdd08195e1a5cdd603a1b6044820152606401610464565b6000816001811115611bb457611bb461252e565b03611c2057604051632142170760e11b81526001600160a01b038616906342842e0e90611be990309088908890600401612ab3565b600060405180830381600087803b158015611c0357600080fd5b505af1158015611c17573d6000803e3d6000fd5b50505050611c9e565b6001816001811115611c3457611c3461252e565b03611c9e57604051637921219560e11b81526001600160a01b0386169063f242432a90611c6b903090889088908890600401612ad7565b600060405180830381600087803b158015611c8557600080fd5b505af1158015611c99573d6000803e3d6000fd5b505050505b5050505050565b6001600160a01b03163b151590565b600154610100900460ff16611cdb5760405162461bcd60e51b815260040161046490612d44565b610716611e46565b6040516001600160a01b03831660248201526044810182905261177090849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611e76565b611d67846323b872dd60e01b858585604051602401611d0f93929190612ab3565b50505050565b6000611d7a838584611f4b565b9050611c9e848683612064565b611d9081611ca5565b611df25760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610464565b600080516020612e3583398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b611e2a836120c9565b600082511180611e375750805b1561177057611d678383612109565b600154610100900460ff16611e6d5760405162461bcd60e51b815260040161046490612d44565b610716336118ad565b6000611ecb826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166121359092919063ffffffff16565b9050805160001480611eec575080806020019051810190611eec9190612a4c565b6117705760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610464565b600080805b85518160ff161015611fe8576000612710878360ff1681518110611f7657611f76612a6e565b60200260200101516000015161ffff1686611f919190612bb2565b611f9b9190612bc9565b9050611fc886888460ff1681518110611fb657611fb6612a6e565b60200260200101516020015183612064565b611fd28184612beb565b9250508080611fe090612d8f565b915050611f50565b508281111561204e5760405162461bcd60e51b815260206004820152602c60248201527f546f74616c20616d6f756e74206f66206665657320617265206d6f726520746860448201526b616e2074686520707269636560a01b6064820152608401610464565b600061205a8285612dae565b9695505050505050565b8060000361207157505050565b6001600160a01b0383166120b5576040516001600160a01b0383169082156108fc029083906000818181858888f19350505050158015611d67573d6000803e3d6000fd5b6117706001600160a01b0384168383611ce3565b6120d281611d87565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b606061212e8383604051806060016040528060278152602001612e5560279139612144565b9392505050565b60606104cd84846000856121b2565b6060600080856001600160a01b0316856040516121619190612de5565b600060405180830381855af49150503d806000811461219c576040519150601f19603f3d011682016040523d82523d6000602084013e6121a1565b606091505b509150915061205a8683838761228d565b6060824710156122135760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610464565b600080866001600160a01b0316858760405161222f9190612de5565b60006040518083038185875af1925050503d806000811461226c576040519150601f19603f3d011682016040523d82523d6000602084013e612271565b606091505b50915091506122828783838761228d565b979650505050505050565b606083156122fa5782516000036122f3576122a785611ca5565b6122f35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610464565b50816104cd565b6104cd838381511561230f5781518083602001fd5b8060405162461bcd60e51b81526004016104649190612e01565b60006020828403121561233b57600080fd5b81356001600160e01b03198116811461212e57600080fd5b6001600160a01b038116811461059a57600080fd5b60006020828403121561237a57600080fd5b813561212e81612353565b803561239081612353565b919050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b03811182821017156123cd576123cd612395565b60405290565b60405161012081016001600160401b03811182821017156123cd576123cd612395565b604051601f8201601f191681016001600160401b038111828210171561241e5761241e612395565b604052919050565b600082601f83011261243757600080fd5b81356001600160401b0381111561245057612450612395565b612463601f8201601f19166020016123f6565b81815284602083860101111561247857600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080608085870312156124ab57600080fd5b84356124b681612353565b935060208501356124c681612353565b92506040850135915060608501356001600160401b038111156124e857600080fd5b6124f487828801612426565b91505092959194509250565b6001600160e01b031991909116815260200190565b60006020828403121561252757600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b03169052565b6101a0810160028f1061257457634e487b7160e01b600052602160045260246000fd5b8e8252612584602083018f612544565b8c60408301528b606083015261259d608083018c612544565b8960a08301528860c08301528760e083015286610100830152856101208301526125cb610140830186612544565b6125d9610160830185612544565b826101808301529e9d5050505050505050505050505050565b6000806040838503121561260557600080fd5b823561261081612353565b915060208301356001600160401b0381111561262b57600080fd5b61263785828601612426565b9150509250929050565b6001600160a01b0391909116815260200190565b60006001600160401b0382111561266e5761266e612395565b5060051b60200190565b61ffff8116811461059a57600080fd5b600082601f83011261269957600080fd5b813560206126ae6126a983612655565b6123f6565b82815260069290921b840181019181810190868411156126cd57600080fd5b8286015b8481101561271e57604081890312156126ea5760008081fd5b6126f26123ab565b81356126fd81612678565b81528185013561270c81612353565b818601528352918301916040016126d1565b509695505050505050565b60006060828403121561273b57600080fd5b50919050565b6000806080838503121561275457600080fd5b82356001600160401b038082111561276b57600080fd5b90840190610120828703121561278057600080fd5b6127886123d3565b61279183612385565b815260208301356020820152604083013560408201526127b360608401612385565b60608201526080830135608082015260a083013560a082015260c083013560c082015260e083013560e082015261010080840135838111156127f457600080fd5b61280089828701612688565b8284015250508094505050506128198460208501612729565b90509250929050565b600082601f83011261283357600080fd5b813560206128436126a983612655565b82815260059290921b8401810191818101908684111561286257600080fd5b8286015b8481101561271e5780358352918301918301612866565b600080600080600060a0868803121561289557600080fd5b85356128a081612353565b945060208601356128b081612353565b935060408601356001600160401b03808211156128cc57600080fd5b6128d889838a01612822565b945060608801359150808211156128ee57600080fd5b6128fa89838a01612822565b9350608088013591508082111561291057600080fd5b5061291d88828901612426565b9150509295509295909350565b6000806040838503121561293d57600080fd5b50508035926020909101359150565b600080600080600060a0868803121561296457600080fd5b853561296f81612353565b9450602086013561297f81612353565b9350604086013592506060860135915060808601356001600160401b038111156129a857600080fd5b61291d88828901612426565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b600060208284031215612a5e57600080fd5b8151801515811461212e57600080fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201612aac57612aac612a84565b5060010190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a06080820181905260009082015260c00190565b6000815480845260208085019450836000528060002060005b83811015612b5b57815461ffff8116885260101c6001600160a01b03168388015260409096019560019182019101612b28565b509495945050505050565b60018060a01b03881681528660208201528560408201528460608201528360808201528260a082015260e060c08201526000612ba560e0830184612b0f565b9998505050505050505050565b808202811582820484141761040b5761040b612a84565b600082612be657634e487b7160e01b600052601260045260246000fd5b500490565b8082018082111561040b5761040b612a84565b60018060a01b0384168152826020820152606060408201526000612c256060830184612b0f565b95945050505050565b60006020808385031215612c4157600080fd5b82516001600160401b03811115612c5757600080fd5b8301601f81018513612c6857600080fd5b8051612c766126a982612655565b81815260069190911b82018301908381019087831115612c9557600080fd5b928401925b828410156122825760408489031215612cb35760008081fd5b612cbb6123ab565b8451612cc681612678565b815284860151612cd581612353565b8187015282526040939093019290840190612c9a565b600060208284031215612cfd57600080fd5b5051919050565b600060208284031215612d1657600080fd5b813560ff8116811461212e57600080fd5b600060208284031215612d3957600080fd5b815161212e81612353565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600060ff821660ff8103612da557612da5612a84565b60010192915050565b8181038181111561040b5761040b612a84565b60005b83811015612ddc578181015183820152602001612dc4565b50506000910152565b60008251612df7818460208701612dc1565b9190910192915050565b6020815260008251806020840152612e20816040850160208701612dc1565b601f01601f1916919091016040019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a164736f6c6343000813000a",
  "deployedBytecode": "0x6080604052600436106100e45760003560e01c806301ffc9a7146100e9578063037c9be21461011e578063150b7a02146101405780631edbc5be1461016d5780633659cfe61461020c5780634f1ef2861461022c57806352d1902d1461023f578063715018a6146102625780638da5cb5b14610277578063986c9b2014610299578063b88c827c146102b9578063bc197c81146102d9578063c4d252f514610305578063c4d66de814610325578063cae6047f14610345578063cd772f5c1461035b578063f23a6e611461036e578063f2fde38b1461039a578063fde63056146103ba575b600080fd5b3480156100f557600080fd5b50610109610104366004612329565b6103da565b60405190151581526020015b60405180910390f35b34801561012a57600080fd5b5061013e610139366004612368565b610411565b005b34801561014c57600080fd5b5061016061015b366004612495565b6104c4565b6040516101159190612500565b34801561017957600080fd5b506101f3610188366004612515565b60ca60205260009081526040902080546001820154600283015460038401546004850154600586015460068701546007880154600889015460098a0154600a8b0154600b909b015460ff8b169b6001600160a01b03610100909c048c169b988916989283169216908d565b6040516101159d9c9b9a99989796959493929190612551565b34801561021857600080fd5b5061013e610227366004612368565b6104d5565b61013e61023a3660046125f2565b61059d565b34801561024b57600080fd5b50610254610656565b604051908152602001610115565b34801561026e57600080fd5b5061013e610704565b34801561028357600080fd5b5061028c610718565b6040516101159190612641565b3480156102a557600080fd5b5060cb5461028c906001600160a01b031681565b3480156102c557600080fd5b5061013e6102d4366004612741565b610727565b3480156102e557600080fd5b506101606102f436600461287d565b63bc197c8160e01b95945050505050565b34801561031157600080fd5b5061013e610320366004612515565b610c62565b34801561033157600080fd5b5061013e610340366004612368565b610d8f565b34801561035157600080fd5b5061025461271081565b61013e61036936600461292a565b610ebc565b34801561037a57600080fd5b5061016061038936600461294c565b63f23a6e6160e01b95945050505050565b3480156103a657600080fd5b5061013e6103b5366004612368565b61137e565b3480156103c657600080fd5b5061013e6103d5366004612515565b6113f4565b60006001600160e01b03198216630271189760e51b148061040b57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6104196116ba565b6001600160a01b03811661046d5760405162461bcd60e51b8152602060048201526016602482015275416464726573732063616e6e6f74206265207a65726f60501b60448201526064015b60405180910390fd5b60cb80546001600160a01b0319166001600160a01b0383169081179091556040517ff9a0f356a7ef079355de09d32ce45cc3cfabc8f118681c19a17501f005a376ac916104b991612641565b60405180910390a150565b630a85bd0160e11b5b949350505050565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361051d5760405162461bcd60e51b8152600401610464906129b4565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661054f611719565b6001600160a01b0316146105755760405162461bcd60e51b815260040161046490612a00565b61057e81611735565b6040805160008082526020820190925261059a9183919061173d565b50565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036105e55760405162461bcd60e51b8152600401610464906129b4565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610617611719565b6001600160a01b03161461063d5760405162461bcd60e51b815260040161046490612a00565b61064682611735565b6106528282600161173d565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146106f15760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c6044820152771b1959081d1a1c9bdd59da0819195b1959d85d1958d85b1b60421b6064820152608401610464565b50600080516020612e3583398151915290565b61070c6116ba565b61071660006118ad565b565b6034546001600160a01b031690565b61074633836000015184602001518560400151866101000151866118ff565b61078f5760405162461bcd60e51b815260206004820152601a60248201527941637574696f6e3a20696e76616c6964207369676e617475726560301b6044820152606401610464565b81516040516301ffc9a760e01b81526000916001600160a01b0316906301ffc9a7906107c6906380ac58cd60e01b90600401612500565b602060405180830381865afa1580156107e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108079190612a4c565b156108685782604001516001146108605760405162461bcd60e51b815260206004820152601d60248201527f41756374696f6e3a20696e76616c696420746f6b656e20616d6f756e740000006044820152606401610464565b506000610940565b82516040516301ffc9a760e01b81526001600160a01b03909116906301ffc9a79061089e90636cdb3d1360e11b90600401612500565b602060405180830381865afa1580156108bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108df9190612a4c565b156108ec57506001610940565b60405162461bcd60e51b815260206004820152602360248201527f41756374696f6e3a20696e76616c696420636f6c6c656374696f6e206164647260448201526265737360e81b6064820152608401610464565b82516020808501516060808701516080880151604080516001600160601b031933861b81168289015297851b8816603482015260488101959095529190921b9094166068830152607c82015243609c808301919091528351808303909101815260bc9091018352805190820120600081815260ca90925291902080548390829060ff1916600183818111156109d7576109d761252e565b0217905550845181546001600160a01b0391821661010002610100600160a81b0319909116178255602086015160018301556060860151600383018054919092166001600160a01b0319918216179091556080860151600483015560c0860151600683015560e0860151600883015560a08601516005830155604086015160028301556009820180549091163317905560005b85610100015151811015610af75781600c018661010001518281518110610a9357610a93612a6e565b602090810291909101810151825460018101845560009384529282902081519301805491909201516001600160a01b031662010000026001600160b01b031990911661ffff9093169290921791909117905580610aef81612a9a565b915050610a6a565b506000836001811115610b0c57610b0c61252e565b03610b7e5784516020860151604051632142170760e11b81526001600160a01b03909216916342842e0e91610b479133913091600401612ab3565b600060405180830381600087803b158015610b6157600080fd5b505af1158015610b75573d6000803e3d6000fd5b50505050610bee565b845160208601516040808801519051637921219560e11b81526001600160a01b039093169263f242432a92610bbb92339230929190600401612ad7565b600060405180830381600087803b158015610bd557600080fd5b505af1158015610be9573d6000803e3d6000fd5b505050505b84600001516001600160a01b0316827f4dc515037e9e7da169401a3b437c9f2b1279015c6fac9b27d550a428aea0f69b8760600151886020015189604001518a608001518b60c001518c60e0015189600c01604051610c539796959493929190612b66565b60405180910390a35050505050565b600081815260ca602052604090206007015415610cc15760405162461bcd60e51b815260206004820181905260248201527f41756374696f6e3a2061756374696f6e20616c726561647920737461727465646044820152606401610464565b600081815260ca60205260409020600901546001600160a01b03163314610d1f5760405162461bcd60e51b815260206004820152601260248201527120bab1ba34b7b71d103737ba1037bbb732b960711b6044820152606401610464565b600081815260ca60205260409020805460098201546001830154600290930154610d61936001600160a01b03610100850481169493169290919060ff16611b56565b60405181907f5f8f216fd2e5bdc47deb48c822665830695f90b549772ae028d6fc3c4832c5b190600090a250565b600154610100900460ff1615808015610dac57506001805460ff16105b80610dcc5750610dbb30611ca5565b158015610dcc57506001805460ff16145b610e2f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610464565b6001805460ff1916811790558015610e51576001805461ff0019166101001790555b610e59611cb4565b60cb80546001600160a01b0319166001600160a01b0384161790558015610652576001805461ff00191681556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b600260005403610f0e5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610464565b6002600090815582815260ca60205260409020600601544211610f845760405162461bcd60e51b815260206004820152602860248201527f41756374696f6e3a205761697420756e74696c207468652073746172742074696044820152676d6520636f6d657360c01b6064820152608401610464565b600082815260ca6020526040902060070154421080610fb25750600082815260ca6020526040902060070154155b61100d5760405162461bcd60e51b815260206004820152602660248201527f41756374696f6e3a20546869732061756374696f6e20616c72656164792066696044820152651b9a5cda195960d21b6064820152608401610464565b600082815260ca60205260409020600401548110156110835760405162461bcd60e51b815260206004820152602c60248201527f41756374696f6e3a20626964207072696365206973206c6f77207468616e206d60448201526b696e696d756d20707269636560a01b6064820152608401610464565b600082815260ca602052604090206005810154600b909101546064916110a891612bb2565b6110b29190612bc9565b811015806110d85750600082815260ca60205260409020600a01546001600160a01b0316155b61113d5760405162461bcd60e51b815260206004820152603060248201527f41756374696f6e3a20626964207072696365206973206c6f77207468616e206d60448201526f696e696d756d2077696e20707269636560801b6064820152608401610464565b600082815260ca6020526040812060078101549091036111b6574260068201819055600882015461116d91612beb565b60078201819055600682015460408051918252602082019290925284917f0ce217feb50009b9d23ac12d250c75804a524a88961e29fed41999b5681e00a8910160405180910390a25b600a81018054600b830180546001600160a01b03198316331790935584905560078301546001600160a01b0390911691906111f342610384612beb565b111561124f5761038483600701600082825461120f9190612beb565b9091555050600783015460405190815285907f0268ffa9ab9e25f14e7f0a1c5fcfd253e78d8258af9dbc5a6cd3f4c9c64650a49060200160405180910390a25b6001600160a01b038216156112c55760038301546001600160a01b03166112ac576040516001600160a01b0383169082156108fc029083906000818181858888f193505050501580156112a6573d6000803e3d6000fd5b506112c5565b60038301546112c5906001600160a01b03168383611ce3565b60038301546001600160a01b0316611329573484146113245760405162461bcd60e51b815260206004820152601b60248201527a105d58dd1a5bdb8e881a5b9d985b1a5908195d1a08185b5bdd5b9d602a1b6044820152606401610464565b611343565b6003830154611343906001600160a01b0316333087611d46565b6040518490339087907fb556ff269c1b6714f432c36431e2041d28436a73b6c3f19c021827bbdc6bfc2990600090a450506001600055505050565b6113866116ba565b6001600160a01b0381166113eb5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610464565b61059a816118ad565b600081815260ca60205260409020600701546114525760405162461bcd60e51b815260206004820181905260248201527f41756374696f6e3a2061756374696f6e206e6f742073746172746564207965746044820152606401610464565b600081815260ca602052604090206007015442116114b25760405162461bcd60e51b815260206004820152601d60248201527f41756374696f6e3a2061756374696f6e206e6f742066696e69736865640000006044820152606401610464565b600081815260ca60205260409020600901546001600160a01b03163314806114f35750600081815260ca60205260409020600a01546001600160a01b031633145b6115505760405162461bcd60e51b815260206004820152602860248201527f41756374696f6e3a20646f6e27742068617665207065726d697373696f6e20746044820152670de40ccd2dcd2e6d60c31b6064820152608401610464565b60cb54600082815260ca602052604080822080546001820154925163377c8e3960e11b815293946001600160a01b0390811694636ef91c72946115a39461010090940490921692600c0190600401612bfe565b600060405180830381865afa1580156115c0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115e89190810190612c2e565b600083815260ca6020526040902060098101546003820154600b90920154929350611624926001600160a01b0391821692909116908490611d6d565b600082815260ca602052604090208054600a8201546001830154600290930154611666936001600160a01b03610100850481169493169290919060ff16611b56565b600082815260ca6020526040808220600b810154600a90910154915190926001600160a01b039092169185917fd1c3886a6c6fefde38bdaa54849c80a66e27da63a47829a4a201c9eaf818ba899190a45050565b336116c3610718565b6001600160a01b0316146107165760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610464565b600080516020612e35833981519152546001600160a01b031690565b61059a6116ba565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156117755761177083611d87565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156117cf575060408051601f3d908101601f191682019092526117cc91810190612ceb565b60015b6118325760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610464565b600080516020612e3583398151915281146118a15760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610464565b50611770838383611e21565b603480546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160601b0319606088811b8216602084015287901b1660348201526048810185905260688101849052600090819060880160405160208183030381529060405280519060200120905060005b84518110156119ff578185828151811061196d5761196d612a6e565b60200260200101516000015186838151811061198b5761198b612a6e565b6020026020010151602001516040516020016119d49392919092835260f09190911b6001600160f01b031916602083015260601b6001600160601b031916602282015260360190565b60405160208183030381529060405280519060200120915080806119f790612a9a565b915050611951565b506040517b0ca2ba3432b932bab69029b4b3b732b21026b2b9b9b0b3b29d05199960211b6020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050600181856040016020810190611a639190612d04565b604080516000815260208181018084529490945260ff909216908201528635606082015290860135608082015260a0016020604051602081039080840390855afa158015611ab5573d6000803e3d6000fd5b505050602060405103516001600160a01b031660cb60009054906101000a90046001600160a01b03166001600160a01b031663238ac9336040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3f9190612d27565b6001600160a01b0316149998505050505050505050565b843b611ba05760405162461bcd60e51b815260206004820152601960248201527810dbdb1b1958dd1a5bdb88191bd95cc81b9bdd08195e1a5cdd603a1b6044820152606401610464565b6000816001811115611bb457611bb461252e565b03611c2057604051632142170760e11b81526001600160a01b038616906342842e0e90611be990309088908890600401612ab3565b600060405180830381600087803b158015611c0357600080fd5b505af1158015611c17573d6000803e3d6000fd5b50505050611c9e565b6001816001811115611c3457611c3461252e565b03611c9e57604051637921219560e11b81526001600160a01b0386169063f242432a90611c6b903090889088908890600401612ad7565b600060405180830381600087803b158015611c8557600080fd5b505af1158015611c99573d6000803e3d6000fd5b505050505b5050505050565b6001600160a01b03163b151590565b600154610100900460ff16611cdb5760405162461bcd60e51b815260040161046490612d44565b610716611e46565b6040516001600160a01b03831660248201526044810182905261177090849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611e76565b611d67846323b872dd60e01b858585604051602401611d0f93929190612ab3565b50505050565b6000611d7a838584611f4b565b9050611c9e848683612064565b611d9081611ca5565b611df25760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610464565b600080516020612e3583398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b611e2a836120c9565b600082511180611e375750805b1561177057611d678383612109565b600154610100900460ff16611e6d5760405162461bcd60e51b815260040161046490612d44565b610716336118ad565b6000611ecb826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166121359092919063ffffffff16565b9050805160001480611eec575080806020019051810190611eec9190612a4c565b6117705760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610464565b600080805b85518160ff161015611fe8576000612710878360ff1681518110611f7657611f76612a6e565b60200260200101516000015161ffff1686611f919190612bb2565b611f9b9190612bc9565b9050611fc886888460ff1681518110611fb657611fb6612a6e565b60200260200101516020015183612064565b611fd28184612beb565b9250508080611fe090612d8f565b915050611f50565b508281111561204e5760405162461bcd60e51b815260206004820152602c60248201527f546f74616c20616d6f756e74206f66206665657320617265206d6f726520746860448201526b616e2074686520707269636560a01b6064820152608401610464565b600061205a8285612dae565b9695505050505050565b8060000361207157505050565b6001600160a01b0383166120b5576040516001600160a01b0383169082156108fc029083906000818181858888f19350505050158015611d67573d6000803e3d6000fd5b6117706001600160a01b0384168383611ce3565b6120d281611d87565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b606061212e8383604051806060016040528060278152602001612e5560279139612144565b9392505050565b60606104cd84846000856121b2565b6060600080856001600160a01b0316856040516121619190612de5565b600060405180830381855af49150503d806000811461219c576040519150601f19603f3d011682016040523d82523d6000602084013e6121a1565b606091505b509150915061205a8683838761228d565b6060824710156122135760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610464565b600080866001600160a01b0316858760405161222f9190612de5565b60006040518083038185875af1925050503d806000811461226c576040519150601f19603f3d011682016040523d82523d6000602084013e612271565b606091505b50915091506122828783838761228d565b979650505050505050565b606083156122fa5782516000036122f3576122a785611ca5565b6122f35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610464565b50816104cd565b6104cd838381511561230f5781518083602001fd5b8060405162461bcd60e51b81526004016104649190612e01565b60006020828403121561233b57600080fd5b81356001600160e01b03198116811461212e57600080fd5b6001600160a01b038116811461059a57600080fd5b60006020828403121561237a57600080fd5b813561212e81612353565b803561239081612353565b919050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b03811182821017156123cd576123cd612395565b60405290565b60405161012081016001600160401b03811182821017156123cd576123cd612395565b604051601f8201601f191681016001600160401b038111828210171561241e5761241e612395565b604052919050565b600082601f83011261243757600080fd5b81356001600160401b0381111561245057612450612395565b612463601f8201601f19166020016123f6565b81815284602083860101111561247857600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080608085870312156124ab57600080fd5b84356124b681612353565b935060208501356124c681612353565b92506040850135915060608501356001600160401b038111156124e857600080fd5b6124f487828801612426565b91505092959194509250565b6001600160e01b031991909116815260200190565b60006020828403121561252757600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b03169052565b6101a0810160028f1061257457634e487b7160e01b600052602160045260246000fd5b8e8252612584602083018f612544565b8c60408301528b606083015261259d608083018c612544565b8960a08301528860c08301528760e083015286610100830152856101208301526125cb610140830186612544565b6125d9610160830185612544565b826101808301529e9d5050505050505050505050505050565b6000806040838503121561260557600080fd5b823561261081612353565b915060208301356001600160401b0381111561262b57600080fd5b61263785828601612426565b9150509250929050565b6001600160a01b0391909116815260200190565b60006001600160401b0382111561266e5761266e612395565b5060051b60200190565b61ffff8116811461059a57600080fd5b600082601f83011261269957600080fd5b813560206126ae6126a983612655565b6123f6565b82815260069290921b840181019181810190868411156126cd57600080fd5b8286015b8481101561271e57604081890312156126ea5760008081fd5b6126f26123ab565b81356126fd81612678565b81528185013561270c81612353565b818601528352918301916040016126d1565b509695505050505050565b60006060828403121561273b57600080fd5b50919050565b6000806080838503121561275457600080fd5b82356001600160401b038082111561276b57600080fd5b90840190610120828703121561278057600080fd5b6127886123d3565b61279183612385565b815260208301356020820152604083013560408201526127b360608401612385565b60608201526080830135608082015260a083013560a082015260c083013560c082015260e083013560e082015261010080840135838111156127f457600080fd5b61280089828701612688565b8284015250508094505050506128198460208501612729565b90509250929050565b600082601f83011261283357600080fd5b813560206128436126a983612655565b82815260059290921b8401810191818101908684111561286257600080fd5b8286015b8481101561271e5780358352918301918301612866565b600080600080600060a0868803121561289557600080fd5b85356128a081612353565b945060208601356128b081612353565b935060408601356001600160401b03808211156128cc57600080fd5b6128d889838a01612822565b945060608801359150808211156128ee57600080fd5b6128fa89838a01612822565b9350608088013591508082111561291057600080fd5b5061291d88828901612426565b9150509295509295909350565b6000806040838503121561293d57600080fd5b50508035926020909101359150565b600080600080600060a0868803121561296457600080fd5b853561296f81612353565b9450602086013561297f81612353565b9350604086013592506060860135915060808601356001600160401b038111156129a857600080fd5b61291d88828901612426565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b600060208284031215612a5e57600080fd5b8151801515811461212e57600080fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201612aac57612aac612a84565b5060010190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a06080820181905260009082015260c00190565b6000815480845260208085019450836000528060002060005b83811015612b5b57815461ffff8116885260101c6001600160a01b03168388015260409096019560019182019101612b28565b509495945050505050565b60018060a01b03881681528660208201528560408201528460608201528360808201528260a082015260e060c08201526000612ba560e0830184612b0f565b9998505050505050505050565b808202811582820484141761040b5761040b612a84565b600082612be657634e487b7160e01b600052601260045260246000fd5b500490565b8082018082111561040b5761040b612a84565b60018060a01b0384168152826020820152606060408201526000612c256060830184612b0f565b95945050505050565b60006020808385031215612c4157600080fd5b82516001600160401b03811115612c5757600080fd5b8301601f81018513612c6857600080fd5b8051612c766126a982612655565b81815260069190911b82018301908381019087831115612c9557600080fd5b928401925b828410156122825760408489031215612cb35760008081fd5b612cbb6123ab565b8451612cc681612678565b815284860151612cd581612353565b8187015282526040939093019290840190612c9a565b600060208284031215612cfd57600080fd5b5051919050565b600060208284031215612d1657600080fd5b813560ff8116811461212e57600080fd5b600060208284031215612d3957600080fd5b815161212e81612353565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600060ff821660ff8103612da557612da5612a84565b60010192915050565b8181038181111561040b5761040b612a84565b60005b83811015612ddc578181015183820152602001612dc4565b50506000910152565b60008251612df7818460208701612dc1565b9190910192915050565b6020815260008251806020840152612e20816040850160208701612dc1565b601f01601f1916919091016040019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a164736f6c6343000813000a",
  "devdoc": {
    "events": {
      "AdminChanged(address,address)": {
        "details": "Emitted when the admin account has changed."
      },
      "AuctionCanceled(bytes32)": {
        "details": "emit this event when auction canceled"
      },
      "AuctionFinished(bytes32,address,uint256)": {
        "details": "emit this event when auction finished"
      },
      "AuctionStarted(bytes32,uint256,uint256)": {
        "details": "emit this event when auction started"
      },
      "AuctionTimeExtended(bytes32,uint256)": {
        "details": "emit this event when bid makes in 15 minutes from endTime"
      },
      "BeaconUpgraded(address)": {
        "details": "Emitted when the beacon is changed."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "NewAuction(bytes32,address,address,uint256,uint256,uint256,uint256,uint256,(uint16,address)[])": {
        "details": "emit this event when auction added"
      },
      "NewBid(bytes32,address,uint256)": {
        "details": "emit this event when new bid added"
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "bid(bytes32,uint256)": {
        "details": "This functions changes last bid params, and release last bidder's token      and locks new bidder's token",
        "params": {
          "_id": "id of auction",
          "_price": "new bidding price"
        }
      },
      "cancel(bytes32)": {
        "details": "This function cancels auction.      Sends asset to owner.",
        "params": {
          "_id": "id of auction"
        }
      },
      "createAuction((address,uint256,uint256,address,uint256,uint256,uint256,uint256,(uint16,address)[]),(bytes32,bytes32,uint8))": {
        "params": {
          "_param": "auction params",
          "_sig": "backend signature to validate fee"
        }
      },
      "finish(bytes32)": {
        "details": "This function finishs auction.      Sends asset to winner and sends bid token to owner.",
        "params": {
          "_id": "id of auction"
        }
      },
      "initialize(address)": {
        "params": {
          "_executionDelegate": "execution delegate address"
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeTo(address)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "stateVariables": {
      "auctions": {
        "details": "acutions"
      },
      "executionDelegate": {
        "details": "execution delegate"
      }
    },
    "title": "English Auction Manager Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "bid(bytes32,uint256)": {
        "notice": "make a new bid"
      },
      "cancel(bytes32)": {
        "notice": "cancel auction"
      },
      "createAuction((address,uint256,uint256,address,uint256,uint256,uint256,uint256,(uint16,address)[]),(bytes32,bytes32,uint8))": {
        "notice": "create auction"
      },
      "finish(bytes32)": {
        "notice": "finish auction"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15766,
        "contract": "contracts/AuctionManage.sol:AuctionManager",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 503,
        "contract": "contracts/AuctionManage.sol:AuctionManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "1",
        "type": "t_uint8"
      },
      {
        "astId": 506,
        "contract": "contracts/AuctionManage.sol:AuctionManager",
        "label": "_initializing",
        "offset": 1,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 1172,
        "contract": "contracts/AuctionManage.sol:AuctionManager",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/AuctionManage.sol:AuctionManager",
        "label": "_owner",
        "offset": 0,
        "slot": "52",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/AuctionManage.sol:AuctionManager",
        "label": "__gap",
        "offset": 0,
        "slot": "53",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 485,
        "contract": "contracts/AuctionManage.sol:AuctionManager",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 800,
        "contract": "contracts/AuctionManage.sol:AuctionManager",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 9093,
        "contract": "contracts/AuctionManage.sol:AuctionManager",
        "label": "auctions",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_bytes32,t_struct(Auction)15890_storage)"
      },
      {
        "astId": 9097,
        "contract": "contracts/AuctionManage.sol:AuctionManager",
        "label": "executionDelegate",
        "offset": 0,
        "slot": "203",
        "type": "t_contract(IExecutionDelegate)15180"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Fee)15811_storage)dyn_storage": {
        "base": "t_struct(Fee)15811_storage",
        "encoding": "dynamic_array",
        "label": "struct Fee[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IExecutionDelegate)15180": {
        "encoding": "inplace",
        "label": "contract IExecutionDelegate",
        "numberOfBytes": "20"
      },
      "t_enum(AssetType)15806": {
        "encoding": "inplace",
        "label": "enum AssetType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_bytes32,t_struct(Auction)15890_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Auction)",
        "numberOfBytes": "32",
        "value": "t_struct(Auction)15890_storage"
      },
      "t_struct(Auction)15890_storage": {
        "encoding": "inplace",
        "label": "struct Auction",
        "members": [
          {
            "astId": 15861,
            "contract": "contracts/AuctionManage.sol:AuctionManager",
            "label": "assetType",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(AssetType)15806"
          },
          {
            "astId": 15863,
            "contract": "contracts/AuctionManage.sol:AuctionManager",
            "label": "collection",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 15865,
            "contract": "contracts/AuctionManage.sol:AuctionManager",
            "label": "tokenId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 15867,
            "contract": "contracts/AuctionManage.sol:AuctionManager",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 15869,
            "contract": "contracts/AuctionManage.sol:AuctionManager",
            "label": "paymentToken",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 15871,
            "contract": "contracts/AuctionManage.sol:AuctionManager",
            "label": "minPrice",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 15873,
            "contract": "contracts/AuctionManage.sol:AuctionManager",
            "label": "minWinPercent",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 15875,
            "contract": "contracts/AuctionManage.sol:AuctionManager",
            "label": "startTime",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 15877,
            "contract": "contracts/AuctionManage.sol:AuctionManager",
            "label": "endTime",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 15879,
            "contract": "contracts/AuctionManage.sol:AuctionManager",
            "label": "duration",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 15881,
            "contract": "contracts/AuctionManage.sol:AuctionManager",
            "label": "owner",
            "offset": 0,
            "slot": "9",
            "type": "t_address"
          },
          {
            "astId": 15883,
            "contract": "contracts/AuctionManage.sol:AuctionManager",
            "label": "lastBidder",
            "offset": 0,
            "slot": "10",
            "type": "t_address"
          },
          {
            "astId": 15885,
            "contract": "contracts/AuctionManage.sol:AuctionManager",
            "label": "bidPrice",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 15889,
            "contract": "contracts/AuctionManage.sol:AuctionManager",
            "label": "fees",
            "offset": 0,
            "slot": "12",
            "type": "t_array(t_struct(Fee)15811_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "416"
      },
      "t_struct(Fee)15811_storage": {
        "encoding": "inplace",
        "label": "struct Fee",
        "members": [
          {
            "astId": 15808,
            "contract": "contracts/AuctionManage.sol:AuctionManager",
            "label": "rate",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 15810,
            "contract": "contracts/AuctionManage.sol:AuctionManager",
            "label": "recipient",
            "offset": 2,
            "slot": "0",
            "type": "t_address_payable"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}